type Query {
  """
  Return the elements of the carousel defined by the cms.
  """
  carousel("The carousel we want to show with item choose by the cms for the right page." target: String = "Carousel.Video.Home"): Carousel

  """
  Retrieves a list of Cities.
  """
  cityList(after: String, "The amount of cities to display." first: Int = 10, before: String, last: Int, "If provided, search filter will use specific language searching." analyzer: Locale, "If provided will filter the results by name or zip (using full text algorithms)." search: String, "If provided, will only display cities for those countries." countries: [CountryCode], "Filter localizations if they have theaters." hasTheater: Boolean, "The latitude and longitude as an object : {lat: XXX, lon: YYY}. This is meant to be used with the radius argument." location: CoordinateType, "Used with the \"location\" argument, defines the max distance in meter." radius: Float, order: [CitySorting] = [ALPHABETICAL]): cityConnection

  """
  Show the closest restaurants near the coordinates.
  """
  closestRestaurants("The latitude and longitude as an object : {lat: XXX, lon: YYY}." location: CoordinateType!, "Used with the \"location\" argument, defines the max distance in meter." radius: Float): [TheaterClosestRestaurants]

  """
  Return a company (ex: AMC, Warner, etc..).
  """
  company("The id of the company. (Company:1234 in base64 encoded)" id: String, "The internal id of the company." internalId: Int, "If provided, you can retrieve the company by another id than Allocine, like IMDB, Gaumont, etc.." composedId: ComposedIdType): Company

  country("The internal id of the country." internalId: Int): Country

  """
  An episode of season.
  """
  episode("The id of the episode (Episode:1234 in base64 encoded)" id: String, "The internal id of the episode" internalId: Int): Episode

  """
  A festival (ex: oscar, golden globe, ...).
  """
  festival("The id of the festival. (Festival:1234 in base64 encoded)" id: String, "The internal id of the festival." internalId: Int): Festival

  """
  Retrieves a list of Festivals.
  """
  festivalList(after: String, "The amount of festivals to display." first: Int = 10, before: String, last: Int, "When not provided, festivals are sorted in alphabetical order." order: [FestivalSorting] = [RANK], "When provided, will only select festivals that have at least one of the given countries." countries: [CountryCode], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType], "If provide will get all festival which edition starts date is after or before the selected date." editionStartDate: FilterDate, "If provide will get all festival which edition ends date is after or before the selected date." editionEndDate: FilterDate, "When provided, will only select festivals which name starts with the given letter. If set as '#', get only the festivals which name starts with a number or any special letter." nameFirstChar: [String], "When provided, will only select festivals with this theme" theme: [FestivalTheme], "When provided, will only select festivals with this type" type: [FestivalType]): festivalConnection

  """
  An edition of a festival.
  """
  festivalEdition("The id of the festival. (FestivalEdition:1234 in base64 encoded)" id: String, "The internal id of the festival." internalId: Int): FestivalEdition

  """
  Selected movies, series and persons for a festival and an edition.
  """
  festivalSelection("The id of the festival." id: String): FestivalSelection

  """
  Retrieves a list of festival awards
  """
  award("The id of the festival.  (Festival:1234 in base64 encoded)" id: String, "The amount of awards to display." first: Int = 10, "offset encoded" after: String): FestivalAward

  """
  Get an image of an entity.
  """
  image("The id of the image. (Image:1234 in base64 encoded)" id: String, "The internal id of the image." internalId: BigInt): InternalImage

  """
  A list of images related to an entity.
  """
  imageList(after: String, "The amount of images to display." first: Int = 10, before: String, last: Int, "A global id you want the images to be related to. (Like Movie:1234, Series:1234, ... in base64 encoded)" parentId: String, order: [ImageSorting] = [LATEST], "If true will also include images from seasons and episodes of the parentId." withChildren: Boolean = false, "The type of the images." type: [ImageType!]): imagesConnection

  """
  A localization (ex: city, county, country ...).
  """
  localization("The id of the localization. (Localization:1234 in base64 encoded)" id: String, "The internal id of the localization." internalId: Int): Localization

  """
  Retrieves a list of Localizations.
  """
  localizationList(after: String, "The amount of localizations to display." first: Int = 10, before: String, last: Int, "If provided, search filter will use specific language searching." analyzer: Locale, "Filter localization by types." type: [LocalizationTypeValue], "Filter localizations if they have theaters." hasTheater: Boolean, "Filter localizations if they have not the specified ids." exclude: [Int], "Filter localizations if they have coordinates." withCoordinates: Boolean, "Filter localizations displayed the movie by id." movieDisplayed: Int, "### Use movieDisplayedWithinProductSlidingWeeks instead ### Filter localizations displayed the movie by id in the next sliding weeks defined by the product." movieDisplayedWithinTwoSlidingWeeks: Int, "Filter localizations displayed the movie by id in the next sliding weeks defined by the product." movieDisplayedWithinProductSlidingWeeks: Int, "If provided will filter the results by name or zip (using full text algorithms)." search: String, "If provided, will only display localization for those countries." countries: [CountryCode], "The latitude and longitude as an object : {lat: XXX, lon: YYY}. This is meant to be used with the radius argument." location: CoordinateType, "Used with the \"location\" argument, defines the max distance in meter." radius: Float, "Filter localizations referenced by their parents." parents: [String], order: [LocalizationSorting] = [ALPHABETICAL]): localizationConnection

  """
  Some informations about the current user.
  """
  me: Me

  """
  Get the metadata of an entity.
  """
  metadata("The type of the entity for which we want the metadata." entityType: NodeType!, "The internal identifier related to the entity-type." internalId: String!): EntityMetadata

  movie("The id of the movie. (Movie:1234 in base64 encoded)" id: String, "The internal id of the movie." internalId: Int, "If provided, you can retrieve the movie by another id than Allocine, like IMDB, Gaumont, etc.." composedId: ComposedIdType): Movie

  """
  Will get movies aggregated by selected theaters
  """
  movieByTheaterList(after: String, "The amount of elements to include." first: Int = 10, before: String, last: Int, "Will only display movies broadcasted in this theater. (Theater:C0000 in base64 encoded)" theater: [String]!, "Showtimes starting before this value won't be displayed. Default value is today." from: DateTime, "Showtimes starting after this value won't be displayed. Default value is tomorrow." to: DateTime, order: [MovieShowtimeSorting] = [RELEASE_DATE]): moviesByTheaterListConnection

  """
  A list of movie.
  """
  movieList(after: String, "The amount of movies to display" first: Int = 10, before: String, last: Int, "When provided, will only select movies that have at least one of the given genres." genres: [Genre], "When provided, will only select movies not having at least one of the given genres." excludeGenres: [Genre], "When provided, will only select movies that have at least one of the given countries." countries: [CountryCode], "If provided, will only select movies that have at least one showtime in the given localization." localization: Int, "When not provided, movies are sorted in alphabetical order." order: [MovieSorting] = [ALPHABETICAL], "When provided, will only select movies that were released in the US after this date." releaseFromUs: DateTime, "When provided, will only select movies that were released in the US before this date." releaseToUs: DateTime, "When provided, will only select movies that were released after this date." releaseFrom: DateTime, "When provided, will only select movies that were released before this date." releaseTo: DateTime, "!!! DEPRECATED (Use the releaseMaterialType filter instead) !!! When provided, the releaseFrom and releaseTo filters will be applied on the related release date type." releaseDateType: MovieReleaseDateFilterType, "Filter movies by releases features." releaseFilter: ReleaseFilterType, "Filter movies by a visa number." visaNumber: [String!], "When provided, will only select movies that were produced this year." productionYear: [Int], "When provided, will only select movies that were produced this decade. Must always be a multiple of 10." productionDecade: [Int], "When provided, will only select movies with editorial rating between selected values." editorialRating: FilterRangeRating, "When provided, will only select movies with press rating between selected values." pressRating: FilterRangeRating, "When provided, will only select movies with user rating between selected values." scoreRating: FilterRangeRating, "When provided, will only select movies with editorial rating counter between selected values." editorialRatingCounter: FilterRangeRatingCounter, "When provided, will only select movies with press rating counter between selected values." pressRatingCounter: FilterRangeRatingCounter, "When provided, will only select movies with user rating counter between selected values." scoreRatingCounter: FilterRangeRatingCounter, "When provided, will only select movies that have at least the given amount of theaters during the current week." minTheaters: Int, "### DEPRECATED Use minTheatersProductFloatingWeeks instead ### When provided, will only select movies that have at least the given amount of theaters during the next floating weeks defined by the product." minTheatersTwoFloatingWeeks: Int, "When provided, will only select movies that have at least the given amount of theaters during the next floating weeks defined by the product." minTheatersProductFloatingWeeks: Int, "When provided, will only select movies with a given movie type." type: [MovieType], "When provided, will only select movies not having at least one of the given types." excludeTypes: [MovieType], "A special filter is a particular selection of movies. It only works with the order and pagination arguments.\n                                  Other arguments are not supported and will generate an error." specialFilter: MovieSpecialFilter, "A list of ids to be excluded from the search." exclude: [Int], "A list of ids to be included in the search" include: [Int], "Filter movie list with flags" flags: MovieFlagsType, "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType], "When provided, will only select movies that were updated after this date." lastUpdated: DateTime, "When provided, will only select movies that are linked to one of the companies ids." companies: [Int!], "When provided, will only select movies that have a company with the selected activity linked to it." activities: [CompanyActivity!], "When provided, will return only the movies linked to all specified tags." tag: [Int!], "Does the movie has an advice for children audience ?" forChildren: Boolean, "When provided, return only movies available on these providers." svodProviders: [SvodProviders!], "Filter movie list by release flag." svodFlags: [SvodFlags!], "Filter movies by release flag" releaseFlags: [BaseReleaseType!], "Filter movies matching all physical product flags given" physicalFlags: [PhysicalProductType!], "If true will only filter browsable movies" browsableOnly: Boolean = true): moviesConnection

  movieRelease("The id of a movie release. (MovieRelease:1234 in base64 encoded)" id: String, "The internal id of a movie release." internalId: Int): MovieRelease

  """
  Will get a movies and showtimes aggregation by selected theater.
  """
  movieShowtimeList(after: String, "The amount of elements to include." first: Int = 10, before: String, last: Int, "Will only display showtimes and movies broadcasted in this theater (Theater:C0000 in base64 encoded)." theater: String, "Will only display showtimes and movies broadcasted in the provided theaters list ([Theater:C0000 in base64 encoded])." theaters: [String], "If provided, will only display aggregation for those movies (Movie:1234 in base64 encoded)." movie: [String], "If provided, will only display aggregation for the movie title contains string." search: String, "Showtimes starting before this value won't be displayed. Default value is today." from: DateTime, "Showtimes starting after this value won't be displayed. Default value is tomorrow." to: DateTime, order: [ShowtimeSorting] = [ALPHABETICAL], "Will display showtimes are previews." displayPreview: Boolean, "If true, will only display showtimes that movie is not display in the theater this week but has future showtime (maximum 3 months)." hasFutureReleaseSoon: Boolean, "The comforts available in theater" comfort: [Comfort], "The services available in theater" service: [TheaterService], "The experience of the theater" experience: [Experience], "The projection of the theater" projection: [Projection], "The picture of the theater" picture: [Picture], "The sound of the theater" sound: [Sound], "Filter showtimes by the diffusion version." version: [ShowtimeVersion], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsMovieShowtimeType], "If set to false, with not get any data in index." showtimeGetData: Boolean = true, "!!!!! DEPRECATED !!!!! Use experience filter instead." techno: [TechnoFlag], "!!!!! DEPRECATED !!!!! Use projection filter instead." format: [ProjectionFormat], "!!!!! DEPRECATED !!!!! Use displayPreview filter instead." hasPreview: Boolean = false): movieShowtimeByTheaterListConnection

  """
  A news Allocine.
  """
  news("The id of the news. (News:1234 in base64 encoded)" id: String, "The internal id of the news." internalId: Int, "If provided, you can retrieve the news by another id than Allocine, like IMDB, Gaumont, etc.." composedId: ComposedIdType): News

  """
  A list of news Allocine.
  """
  newsList(after: String, "The amount of news to display." first: Int = 10, before: String, last: Int, "A global id you want the news to be related to. (Like Movie:1234, Series:1234, ... in base64 encoded)" parentId: String, "Order news list." order: [NewsSorting] = [LATEST_PUBLICATION], "Add sponsored news in the list." insertSponsored: Boolean = false, "If true, seo hidden news will be included in the list." includeSeoHidden: Boolean = true, "Filter news by operation target type." operation: [SpecialOperationCode], "Filter news by categories." category: [NewsCategory], "Exclude news by categories." excludeCategory: [NewsCategory], "Filter news by universes." universe: [NewsUniverse], "Exclude news by universe." excludeUniverse: [NewsUniverse], "Filter news by types." type: [NewsType], "Exclude news by id." excludeId: [Int], "Exclude news by types." excludeType: [NewsType], "Filter news by entities linked." relatedType: [NewsRelatedType], "Filter folder news." isFolder: Boolean, "Does the news has an advice for children audience ?" forChildren: Boolean, "When provided, return only news tagged with these providers" svodProviders: [SvodProviders!], "When provided, return only the news written by one of the authors." authors: [String!], "When provided, will only select news that were published after this date." publishedFrom: DateTime, "When provided, will only select news that were published before this date." publishedTo: DateTime, "When provided, return only the news not related to this tag." excludeTag: [String!], "When provided, return only the news who related to this tag." tag: [String!], "If true, all generic universes news categories will be excluded from results." excludeGenericUniverses: Boolean = true): newsConnection

  """
  Fetches an object given its ID
  """
  node("The ID of an object" id: ID!): Node

  """
  A person related to a movie, series or program.
  """
  person("The id of the movie. (Person:1234 in base64 encoded)" id: String, "The internal id of the movie." internalId: Int): Person

  """
  A list of person.
  """
  personList(after: String, "The amount of persons to display." first: Int!, before: String, last: Int, "When not provided, persons are sorted in random order" order: [PersonSorting!], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType], "When provided, will only select persons which last name starts with the given letter. If set as '#', get only the persons which last name starts with a number or any special letter." nameFirstChar: [String], "When provided, will only select persons that were born this year." birthYear: [Int], "When provided, will only select persons that were born this decade. Must always be a multiple of 10." birthDecade: [Int], "If provided, will only display aggregation for those countries." countries: [CountryCode], "When provided, will only select persons that were born this day (mm\/dd format)." birthAnniversary: String, "When provided, will only select persons that died this day (mm\/dd format)." deathAnniversary: String, "If true will only filter browsable persons" browsableOnly: Boolean = true): personsConnection

  """
  A product of type vod, dvd or br.
  """
  product("The id of the product. (Product:1234 in base64 encoded)" id: String, "The internal id of the product." internalId: Int): Product

  """
  Return a list of product(dvd, br, vod, etc).
  """
  productList(after: String, "The amount of products to display." first: Int = 10, before: String, last: Int, "If provided, will only return the products that matches that type. If many types are provided, every product that matches at least one type will be included." type: [ProductType], "A global id you want the products to be related to. Includes all product if omitted. If many ids are provided, every product that relates at least to one of the entities will be included (Like Movie:1234, Series:1234, ... in base64 encoded)" relatedEntity: [String], "Filters the products by entity type (movie or series)." entity: [NodeTypeProducts], order: [ProductSorting] = [ALPHABETICAL], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType], "If true will also include products from seasons and episodes of the parentId." withChildren: Boolean = false): productsConnection

  """
  An Allocine creation program.
  """
  program("The id of the program. (Program:1234 in base64 encoded)" id: String, "The internal id of the program." internalId: Int): Program

  """
  A list of Allocine creation program.
  """
  programList(after: String, "The amount of programs to display." first: Int = 10, before: String, last: Int, "When not provided, program are sorted in weekly_popularity order" order: [ProgramSorting] = [WEEKLY_POPULARITY], "A list of ids to be excluded from the search" exclude: [Int], "A list of ids to be included in the search" include: [Int]): programConnection

  """
  To search a movie, series or person.
  """
  search(after: String, "The amount of elements to display." first: Int = 10, before: String, last: Int, "The text to search for." text: String!, "An array of types to search for." types: [SearchTypes], "The id of the collection. Used for SearchResult.inCollection field (e.g: UserCollection:1234 in base64 encoded)" collection: String, order: [SearchSorting] = [SCORE], "Genres to exclude (for movies and series)" exclude: [Genre], "Choose which provider to use to consume the search" provider: SearchProvider = LEGACY, "Use autocomplete mode (slower)." autocomplete: Boolean = false): searchResultsConnection

  """
  Aggregated search result
  """
  searchTopList("The text to search for." search: String!, "Use autocomplete mode (slower)." autocomplete: Boolean = false): SearchTopListResult

  """
  A season of series.
  """
  season("The id of the season (Season:1234 in base64 encoded)" id: String, "The internal id of the season" internalId: Int): Season

  """
  A series or manga.
  """
  series("The id of the series. (Series:1234 in base64 encoded)" id: String, "The internal id of the series." internalId: Int): Series

  """
  A list of series or manga.
  """
  seriesList(after: String, before: String, "When provided, will only select series that have at least one of the given countries." countries: [CountryCode], "A list of ids to be excluded from the search." exclude: [Int], "When provided, will only select series that have not at least one of the given genres." excludeGenres: [Genre], "When provided, will only select series that have not at least one of the given status." excludeStatus: [Status], "When provided, will only select series that have not at least one of the given type." excludeType: [SeriesType], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType], "The amount of series to display" first: Int = 10, "Filter series list with flags" flags: SeriesFlagsType, "When provided, will only select series that have at least one of the given genres." genres: [Genre], "A list of ids to be included in the search." include: [Int], last: Int, "When not provided, series are sorted in alphabetical order." order: [SeriesSorting] = [ALPHABETICAL], "When provided, will only select series with press rating between selected values." pressRating: FilterRangeRating, "When provided, will only select series that were produced this year." productionYear: [Int], "When provided, will only select series that were produced this decade. Must always be a multiple of 10." productionDecade: [Int], "When provided, will only select series with user rating between selected values." scoreRating: FilterRangeRating, "When provided, will only select series that were started after this date." startsFrom: DateTime, "When provided, will only select series that were started before this date." startsTo: DateTime, "When provided, will only select series that have at least one of the given status." status: [Status], "When provided, will only select series with a given movie type." type: [SeriesType], "When provided, will only select series that were updated after this date." lastUpdated: DateTime, "When provided, will return only the series linked to the specified tags." tag: [Int!], "When provided, return only movies available on these providers." svodProviders: [SvodProviders!], "Filter movie list by release flag." svodFlags: [SvodFlags!], "When provided, will only select series with their season premiere started after this date." seasonStartsFrom: DateTime, "When provided, will only select series with their season premiere started before this date." seasonStartsTo: DateTime, "If true will only filter browsable series" browsableOnly: Boolean = true, "Filter series by release flag" releaseFlags: [BaseReleaseType!], "When provided, will only select series that were released after this date." releaseFrom: DateTime, "When provided, will only select series that were released before this date." releaseTo: DateTime, "!!! DEPRECATED (Use the releaseMaterialType filter instead) !!! When provided, the releaseFrom and releaseTo filters will be applied on the related release date type." releaseDateType: ReleaseDateFilterType, "Filter series by releases features." releaseFilter: ReleaseFilterType, "If true, the filters \"releaseFlags\", \"svodFlags\" and \"svodProviders\" will also be applied on the seasons of this series (except for VOD related flags)" withChildren: Boolean = false, "Filter series list having a recent last season." lastSeason: SeriesLastSeasonFilterType): seriesConnection

  """
  Return a list of soundtracks.
  """
  soundtrackList(after: String, "The amount of soundtracks to display." first: Int = 10, before: String, last: Int, "Array of graphQL entity types to filter." entityType: [NodeTypeSoundtracks], "When provided, will only select soundtracks that were produced this year." productionYear: [Int], "When provided, will only select soundtracks that were produced this decade. Must always be a multiple of 10." productionDecade: [Int], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsSoundtrackType], order: [SoundtrackSorting] = [ALPHABETICAL]): soundtrackConnection

  """
  Show special operation for a specific code.
  """
  operation("The code of the special operation." code: SpecialOperationCode!, "The code of a target of the special operation." target: SpecialOperationTargetCode): SpecialOperation

  """
  A tag.
  """
  tag("The internal id of the tag" internalId: Int): Tag

  """
  A list of tags.
  """
  tagList(after: String, "The amount of tags to display." first: Int = 10, "A list of ids to be included in the search." include: [Int!], "Order tags list." order: [TagSorting!] = [LATEST_PUBLICATION], isSeoFriendly: Boolean, "Filter tag by related entities types." relatedType: [TagRelatedType], "Filter tag by scope." scope: [TagScope!], "When provided, will only select tags not having one of the specified scopes." excludeScope: [TagScope!]): TagConnection

  """
  Return some informations about a theater.
  """
  theater("The id of the theater. (Theater:C0000 in base64 encoded)" id: String, "The internal id of the theater." internalId: String): Theater

  """
  Return the theater group by id.
  """
  theaterGroup("The id of the group. (Group:1 in base64 encoded)" id: String, "The internal id of the group." internalId: Int): Group

  """
  Return list of theater group ordered by path length and rank.
  """
  theaterGroupList(after: String, "The amount of groups to display." first: Int = 10, before: String, last: Int, "If provided, will show groups with or not parents." hasParent: Boolean, "If provided, will show groups with or not children." hasChildren: Boolean, "If provided, will only show the groups that have some showtimes for the specified movie." movie: String, order: [TheaterGroupSorting] = [ALPHABETICAL], "If provided will filter the results by name (using full text algorithms)." search: String): groupConnection

  """
  Will get a theater and showtimes aggregation by selected movie.
  """
  theaterShowtimeList(after: String, "The amount of elements to include." first: Int = 10, before: String, last: Int, "Will only display showtimes and theaters showing this movie. (Movie:1234 in base64 encoded)" movie: String!, "If provided, will only display aggregation for those theaters. (Theater:C0000 in base64 encoded)" theater: [String], "Showtimes starting before this value won't be displayed. Default value is today." from: DateTime, "Showtimes starting after this value won't be displayed. Default value is tomorrow." to: DateTime, "If provided, will only display aggregation for those countries." country: [CountryCode], "If provided, will only display aggregation for that city. (Like Par, Toulouse, ...)" city: String, "If provided, will only display aggregation for that zip." zip: String, "If provided, search and city filter will use specific language searching." analyzer: Locale, "If provided, will only display aggregation for city name, theater name or zip matching the value." search: String, "The latitude and longitude as an object : {lat: XXX, lon: YYY}. This is meant to be used with the radius argument." location: CoordinateType, "Used with the \"location\" argument, defines the max distance in meter." radius: Float, order: [ShowtimeSorting] = [ALPHABETICAL], "Filter theaters by the selected loyalties cards." loyaltyCard: [LoyaltyCard], "If true, will only display previews." hasPreview: Boolean = false, "If true, will only display showtimes that movie is not display in the theater this week but has future showtime (maximum 3 months)." hasFutureReleaseSoon: Boolean, "The comforts available in theater" comfort: [Comfort], "The services available in theater" service: [TheaterService], "The experience of the theater" experience: [Experience], "The projection of the theater" projection: [Projection], "The picture of the theater" picture: [Picture], "The sound of the theater" sound: [Sound], "Filter showtimes by the diffusion version." version: [ShowtimeVersion], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsTheaterShowtimeType], "If true, will only return the theaters with booking function enabled." hasBooking: Boolean, "If set to false, with not get any data in index." showtimeGetData: Boolean = true, "If isset, will filtered the list with theaters in specific group." group: Int, "Filter theaters by a specific relation with a company." affiliation: TheaterAffiliation, "!!!!! DEPRECATED !!!!! Use experience filter instead." techno: [TechnoFlag], "!!!!! DEPRECATED !!!!! Use projection filter instead." format: [ProjectionFormat]): theaterShowtimeByMovieListConnection

  """
  Return a list of theaters.
  """
  theaterList(after: String, "The amount of theaters to display." first: Int = 10, before: String, last: Int, "If provided will filter the results by name (using full text algorithms), where city name, theater name or zip matching the value." search: String, "If provided will filter the results by city (using full text algorithms)" city: String, "If provided, will only display aggregation for that zip." zip: String, "If provided, will only display list filtered by theater network id." network: Int, "If provided, will only theaters in the actual brand." branded: Boolean, "When provided, will only select theaters that have at least one of the given countries." countries: [CountryCode], "The latitude and longitude as an object : {lat: XXX, lon: YYY}. This is meant to be used with the radius argument." location: CoordinateType, "Filter theaters in a specific id localization." localization: Int, "\"Used with the \\\"location\\\" argument, defines the max distance in meter.\"" radius: Float, "Defines how to order theaters on one or more axis. CLOSEST and FARTHEST can only be used if the \"location\" argument is present." order: [TheaterSorting], "A list of ids to be excluded from the search. (C0000)" exclude: [String], "Filter theaters by the selected loyalties cards." loyaltyCard: [LoyaltyCard], "Filter theaters by the selected Projection type." projection: [Projection], "Filter theaters by the selected Experience type." experience: [Experience], "Filter theaters by the selected Sound type." sound: [Sound], "Filter theaters by a specific relation with a company." affiliation: TheaterAffiliation): TheaterConnection

  """
  Return a list of companies.
  """
  theaterCircuitList(after: String, "The amount of theaters to display." first: Int = 10, before: String, last: Int, "If provided will filter the results by name (using full text algorithms)." search: String, "When provided, will only select companies that have at least one of the given countries." countries: [CountryCode], "Order companies in the result." order: [TheaterChainSorting] = [REVERSE_THEATER_COUNT], "A list of ids to be excluded from the search." exclude: [Int]): companyConnection

  """
  Some informations about an user.
  """
  user("The id of the user. (User:1234 in base64 encoded)" id: String, "The internal id of the user." internalId: Int, "The legacy id of the user." legacyId: String): User

  """
  A video related to an entity.
  """
  video("The id of the video. (Video:brand.video_legacy.AC.1234 in base64 encoded)" id: String, "The internal id of the video." internalId: String): Video

  """
  A list of videos related to an entity.
  """
  videoList(after: String, "The amount of videos to display." first: Int = 10, before: String, last: Int, "An global id you want the videos to be related to. (Like Movie:1234, Series:1234, ... in base64 encoded)" parentId: String, "When no provided, videos are sorted by latest date." order: [VideoSorting] = [LATEST], "If true will also include videos from seasons and episodes of the parentId." withChildren: Boolean = false, "The type of the video (trailer, teaser, interview, ...)." type: [VideoType], "The type of the video (trailer, teaser, interview, ...) that should be excluded." excludeType: [VideoType], "If provided, will filter the results by videos name (using full text algorithms)." search: String, "When provided, will only select videos that were released after this date." afterDate: DateTime, "When provided, will only select movies that were released before this date." beforeDate: DateTime, "A special filter is a particular selection of videos. It only works with the order and pagination arguments. Other arguments are not supported and will generate an error." specialFilter: VideoSpecialFilter, "When true, show external videos from facebook, youtube, etc..." externalVideo: Boolean = true, "Filters the videos by entity type." entity: [MediaRelatedEntityTypes!], "A list of ids (Video:brand.video_legacy.AC.1234 in base64 encoded) to be included in the search" include: [String]): videosConnection

  """
  A recommended list of movies.
  """
  recoMovieList("Movie recommendation algo to use" algo: MovieRecommendationAlgo!, "The amount of movies to display" first: Int!): RecoMovieConnection

  """
  A deleted entity.
  """
  deletedEntity("The id of the entity (For exemple 'Movie:1234' or 'Series:5678' encoded in base64)." id: String): DeletedEntity

  author("The id of the author. (Author:1234 in base64 encoded)" id: String, "The internal id of the author." internalId: Int): Author

  showtime("The id of the showtime. (Showtime:1234 in base64 encoded)" id: String, "The internal id of the showtime." internalId: BigInt): ShowtimeWithParentsId
}

"""
An Allociné Carousel.
"""
type Carousel implements Node {
  """
  The id of the carousel.
  """
  id: ID!

  """
  The internal id of the carousel.
  """
  internalId: Int

  stringValue: String

  """
  The brand of the carousel.
  """
  brand: Brand

  """
  The publication informations.
  """
  publication: Publication

  """
  The items of the carousel.
  """
  items: [CarouselItem]
}

"""
Fetches an object given its ID.
"""
interface Node {
  id: ID!

  stringValue: String
}

"""
An Allociné brand.
"""
type Brand {
  """
  The id of the brand.
  """
  id: String

  """
  The name of the brand.
  """
  name: String

  """
  The brand website URL.
  """
  url: String

  """
  The locale for this brand.
  """
  locale: String

  """
  The country id for this brand.
  """
  countryId: Int
}

"""
A publication range with a start and an end date.
"""
type Publication {
  """
  The date at which the publication starts.
  """
  startsAt: DateTime

  """
  The date at which the publication ends.
  """
  endsAt: DateTime

  """
  The original date at which the publication starts.
  """
  originalStartsAt: DateTime

  """
  The original date at which the publication ends.
  """
  originalEndsAt: DateTime

  """
  An object of range between two dates.
  """
  publicationRange: [DateTimeRange]
}

scalar DateTime

"""
An object of range between two dates.
"""
type DateTimeRange {
  """
  The date at which the publication starts.
  """
  startsAt: DateTime

  """
  If true, that indicate to get the date in range.
  """
  includeStartsAt: Boolean

  """
  The date at which the publication ends.
  """
  endsAt: DateTime

  """
  If true, that indicate to get the date in range.
  """
  includeEndsAt: Boolean
}

"""
An item of a carousel.
"""
type CarouselItem {
  """
  The title of the carousel item.
  """
  title: String

  """
  The body of the carousel item.
  """
  body: String

  """
  Different information about an url.
  """
  link: Url

  """
  The position of the item in the carousel.
  """
  rank: Int

  """
  The image of the movie.
  """
  poster: InternalImage

  """
  Show special operations on carousel item.
  """
  operations: SpecialOperation

  """
  The related entities of the carousel item
  """
  relatedEntity: Node
}

"""
Different information about an url.
"""
type Url {
  """
  The link of which the item refers.
  """
  url: String

  """
  The title of the link.
  """
  title: String

  """
  Describe if link must be open in a new tab.
  """
  new_window: Boolean
}

"""
An Allociné internal image. It has some properties on top of the url, like the file size and its id.
"""
type InternalImage implements Node & Image {
  """
  The id of the image
  """
  id: ID!

  """
  The internal id of the image
  """
  internalId: BigInt

  """
  The path of the image
  """
  path: String

  """
  The publication date.
  """
  publicationDate: DateTime

  stringValue: String

  """
  The related entities of the image
  """
  relatedEntities("Filters the related entities of the image based on their type." type: [MediaRelatedEntityTypes]): [Node]

  """
  The full url of the image.
  """
  url("The thickness of the border in pixels." borderWidth: Int, "The color of the border." borderColor: String = "FFFFFF", "Must be a two values array. If provided, will crop the image to the given width\/height." crop: [Int], "The position (in percents) of the crop center. Defaults to 50, 50, the middle center." cropCenter: [Int] = [50,50], "Allows to convert the image type" format: ImageFormat, "The path of an image to use as an overlay (eg. to append on top of the image itself)." overlayImage: String, "The position of the overlay on the image." overlayPosition: ImageOverlayPosition = CENTER, "The offset of the overlay image based on its position. If position is NORTH, the offset will push the overlay to the bottom. If position is SOUTH, the offset will push the overlay to the top." overlayOffset: Int = 0, "Must be a two values array. If provided, will resize the image to the given width\/height." resize: [Int]): String

  """
  The tags of the movie
  """
  tags: TagCollection

  """
  Technical data about images.
  """
  data: ImageData

  """
  A description of the image.
  """
  description: String
}

interface Image {
  """
  The full url to the image
  """
  url("The thickness of the border in pixels." borderWidth: Int, "The color of the border." borderColor: String = "FFFFFF", "Must be a two values array. If provided, will crop the image to the given width\/height." crop: [Int], "The position (in percents) of the crop center. Defaults to 50, 50, the middle center." cropCenter: [Int] = [50,50], "Allows to convert the image type" format: ImageFormat, "The path of an image to use as an overlay (eg. to append on top of the image itself)." overlayImage: String, "The position of the overlay on the image." overlayPosition: ImageOverlayPosition = CENTER, "The offset of the overlay image based on its position. If position is NORTH, the offset will push the overlay to the bottom. If position is SOUTH, the offset will push the overlay to the top." overlayOffset: Int = 0, "Must be a two values array. If provided, will resize the image to the given width\/height." resize: [Int]): String
}

"""
All formats available to convert the image type.
"""
enum ImageFormat {
  JPG

  PNG

  GIF
}

"""
All positions available for the overlay.
"""
enum ImageOverlayPosition {
  CENTER

  NORTH

  NORTH_WEST

  NORTH_EAST

  SOUTH

  SOUTH_WEST

  SOUTH_EAST

  EAST

  WEST
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric
values. BigInt can represent values between -(2^63) and 2^63 - 1.
"""
scalar BigInt

"""
Available types for video entities.
"""
enum MediaRelatedEntityTypes {
  MOVIE

  PERSON

  PROGRAM

  PROGRAM_SEASON

  PROGRAM_EPISODE

  SERIES

  SEASON

  EPISODE

  FESTIVAL

  FESTIVAL_EDITION
}

"""
A collection of tags.
"""
type TagCollection {
  """
  The list of the tags which are in this collection.
  """
  list: [String]
}

"""
Technical data about images.
"""
type ImageData {
  """
  Informations about the file.
  """
  file: ImageFile

  """
  The owner of the image.
  """
  copyright: String
}

"""
Different information about the file.
"""
type ImageFile {
  """
  The size of the image in octets.
  """
  size: Int

  """
  The width of the image in pixels.
  """
  width: Int

  """
  The height of the image in pixels.
  """
  height: Int

  """
  The mime type of the image.
  """
  mime: String
}

"""
Show special operations on entity.
"""
type SpecialOperation {
  """
  Will show all main operations for the entity.
  """
  main: [MainSpecialOperation]

  """
  Will show all target operation witch entity is linked.
  """
  target: [TargetSpecialOperation]
}

"""
Show information about a main special operations on entity.
"""
type MainSpecialOperation {
  """
  The main operation id.
  """
  id: Int

  """
  The main operation code.
  """
  code: String

  """
  The main operation name.
  """
  name: String

  """
  The main operation data.
  """
  data: Json

  """
  The main operation start date.
  """
  startsAt: DateTime

  """
  The main operation end date.
  """
  endsAt: DateTime

  """
  The entity focused on the main operation.
  """
  entity: Node

  """
  The target operations.
  """
  target: [TargetSpecialOperation]
}

scalar Json

"""
Show information about a target special operations on entity.
"""
type TargetSpecialOperation {
  """
  The target operation id.
  """
  id: Int

  """
  The target operation start date.
  """
  startsAt: DateTime

  """
  The target operation end date.
  """
  endsAt: DateTime

  """
  The target of the operation.
  """
  value: String

  """
  The target operation rank.
  """
  rank: Int

  """
  The main operation data.
  """
  data: Json

  """
  The entity focused on the target operation.
  """
  entity: Node

  """
  The main operation focused.
  """
  main: MainSpecialOperation
}

enum Locale {
  ES

  DE

  FR

  PT

  TR
}

enum CountryCode {
  AFGHANISTAN

  ALBANIA

  ALGERIA

  ANDORRA

  ANGOLA

  ANTIGUA_AND_BARBUDA

  ARGENTINA

  ARMENIA

  AUSTRALIA

  AUSTRIA

  AZERBAIDJAN

  BAHAMAS

  BAHREIN

  BANGLADESH

  BARBADOS

  BELGIUM

  BELIZE

  BENIN

  BERMUDA

  BHUTAN

  BOLIVIA

  BOSNIA

  BOTSWANA

  BRAZIL

  BRUNEI_DARUSSALAM

  BULGARIA

  BURKINA_FASO

  BURMA

  BURUNDI

  BYELORUSSIA

  CAMBODIA

  CAMEROON

  CANADA

  CAPE_VERDE

  CHAD

  CHILI

  CHINA

  COLOMBIA

  COMOROS

  CONGO_COD

  CONGO_COG

  COSTA_RICA

  CROATIA

  CUBA

  CYPRUS

  CZECHOSLOVAKIA

  CZECH_REPUBLIC

  DENMARK

  DJIBOUTI

  DOMINICA

  DOMINICAN_REPUBLIC

  EAST_GERMANY

  ECUADO_GUINEA

  EGYPT

  EQUATOR

  ERITREA

  ESTONIA

  ETHIOPIA

  FINLAND

  FRANCE

  GABON

  GEORGIA

  GERMANY

  GHANA

  GREECE

  GRENADA

  GUAMBIA

  GUATEMALA

  GUINEA

  GUINEA_BISSAU

  GUYANA

  HAITI

  HONDURAS

  HONGKONG

  HUNGARIA

  ICELAND

  INDIA

  INDONESIA

  IRAN

  IRAQ

  IRELAND

  ISRAEL

  ITALY

  IVORY_COAST

  JAMAICA

  JAPAN

  JORDAN

  KAZAKHSTAN

  KENYA

  KIRGHIZISTAN

  KIRIBATI

  KOREA

  KOSOVO

  KUWAIT

  LAOS

  LATVIA

  LEBANON

  LESOTHO

  LIBERIA

  LIBIA

  LIECHTENSTEIN

  LITHUANIA

  LUXEMBOURG

  MACEDONIA

  MADAGASCAR

  MALAWI

  MALAYSIA

  MALDIVES

  MALI

  MALTA

  MAURITANIA

  MAURITIUS

  MEXICO

  MICRONESIA

  MOLDAVIA

  MONACO

  MONGOLIA

  MONTENEGRO

  MOROCCO

  MOZAMBIC

  NAMIBIA

  NEPAL

  NETHERLANDS

  NEW_ZEALAND

  NICARAGUA

  NIGER

  NIGERIA

  NORTH_KOREA

  NORWAY

  OMAN

  PAKISTAN

  PALESTINE

  PANAMA

  PAPUA_NEW_GUINEA

  PARAGUAY

  PERU

  PHILIPPINES

  POLAND

  PORTO_RICO

  PORTUGAL

  QATAR

  ROMANIA

  RUSSIA

  RWANDA

  SAINT_LUCIA

  SAINT_VINCENT_AND_THE_GRENADINES

  SALVADOR

  SAMOA

  SAO_TOME_AND_PRINCIPE

  SAUDI_ARABIA

  SENEGAL

  SERBIA

  SEYCHELLES

  SIERRA_LEONE

  SINGAPOR

  SLOVAKIA

  SLOVENIA

  SOMALIA

  SOUTH_AFRICA

  SOUTH_KOREA

  SPAIN

  SRI_LANKA

  SUDAN

  SURINAME

  SWAZILAND

  SWEDEN

  SWITZERLAND

  SYRIA

  TAIWAN

  TAJIKISTAN

  TANZANIA

  THAILAND

  TIMOR_LESTE

  TOGO

  TONGA

  TRINIDAD_AND_TOBAGO

  TUNISIA

  TURKEY

  TURKMENISTAN

  TUVALU

  UGANDA

  UKRAINIA

  UNITED_ARAB_EMIRATES

  UNITED_KINGDOM

  URUGUAY

  USA

  USSR

  UZBEKISTAN

  VANUATU

  VENEZUELA

  VIETNAM

  WEST_GERMANY

  YEMEN

  YUGOSLAVIA

  ZAIRE

  ZAMBIA

  ZIMBABWE
}

input CoordinateType {
  lat: Float!

  lon: Float!
}

"""
Sorting criteria for cities
"""
enum CitySorting {
  """
  No sort is applied.
  """
  NONE

  """
  Sorted by city name in alphabetical order.
  """
  ALPHABETICAL

  """
  Sort with the closest in space first.
  """
  CLOSEST

  """
  Sort by score the matching result.
  """
  SCORE
}

"""
A connection to a list of items.
"""
type cityConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [cityEdge]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type cityEdge {
  """
  The item at the end of the edge.
  """
  node: City

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné city.
"""
type City {
  """
  The id of the city.
  """
  id: Int

  """
  The name of the city.
  """
  name: String

  """
  The zip code of the city.
  """
  zip: String

  """
  The country of the city.
  """
  country: Country

  """
  The coordinates of the city.
  """
  coordinates: Coordinates
}

"""
An Allociné country.
"""
type Country {
  """
  The id of the country.
  """
  id: Int

  """
  The country code (alpha 2).
  """
  alpha2: String

  """
  The country code (alpha 3).
  """
  alpha3: String

  """
  The name of the country.
  """
  name: String

  """
  The localized name of the country.
  """
  localizedName: String

  """
  Technical data about country.
  """
  data: CountryData

  """
  List of theater week starts dates
  """
  theaterShowtimeWeeks("Start date" from: DateTime!, "End date" to: DateTime!): [DateTime]

  """
  List of country weekly box office data
  """
  boxOffice("Range first day" from: DateTime, "To choose between day, week or weekend." period: BoxOfficePeriod): [CountryBoxOffice]

  """
  The top movie by box office global data.
  """
  topMovieBoxOffice(after: String, "The amount of movie to return." first: Int = 10, before: String, last: Int, "When provided, will only select movies that have at least one of the given genres." genres: [Genre], "When provided, will only select movies not having at least one of the given genres." excludeGenres: [Genre], "When provided, will only select movies that have at least one of the given countries." countries: [CountryCode], "If provided, will only select movies that have at least one showtime in the given localization." localization: Int, "When not provided, movies are sorted in alphabetical order." order: [MovieSorting] = [ALPHABETICAL], "When provided, will only select movies that were released in the US after this date." releaseFromUs: DateTime, "When provided, will only select movies that were released in the US before this date." releaseToUs: DateTime, "When provided, will only select movies that were released after this date." releaseFrom: DateTime, "When provided, will only select movies that were released before this date." releaseTo: DateTime, "!!! DEPRECATED (Use the releaseMaterialType filter instead) !!! When provided, the releaseFrom and releaseTo filters will be applied on the related release date type." releaseDateType: MovieReleaseDateFilterType, "Filter movies by releases features." releaseFilter: ReleaseFilterType, "Filter movies by a visa number." visaNumber: [String!], "When provided, will only select movies that were produced this year." productionYear: [Int], "When provided, will only select movies that were produced this decade. Must always be a multiple of 10." productionDecade: [Int], "When provided, will only select movies with editorial rating between selected values." editorialRating: FilterRangeRating, "When provided, will only select movies with press rating between selected values." pressRating: FilterRangeRating, "When provided, will only select movies with user rating between selected values." scoreRating: FilterRangeRating, "When provided, will only select movies with editorial rating counter between selected values." editorialRatingCounter: FilterRangeRatingCounter, "When provided, will only select movies with press rating counter between selected values." pressRatingCounter: FilterRangeRatingCounter, "When provided, will only select movies with user rating counter between selected values." scoreRatingCounter: FilterRangeRatingCounter, "When provided, will only select movies that have at least the given amount of theaters during the current week." minTheaters: Int, "### DEPRECATED Use minTheatersProductFloatingWeeks instead ### When provided, will only select movies that have at least the given amount of theaters during the next floating weeks defined by the product." minTheatersTwoFloatingWeeks: Int, "When provided, will only select movies that have at least the given amount of theaters during the next floating weeks defined by the product." minTheatersProductFloatingWeeks: Int, "When provided, will only select movies with a given movie type." type: [MovieType], "When provided, will only select movies not having at least one of the given types." excludeTypes: [MovieType], "A special filter is a particular selection of movies. It only works with the order and pagination arguments.\n                                  Other arguments are not supported and will generate an error." specialFilter: MovieSpecialFilter, "A list of ids to be excluded from the search." exclude: [Int], "A list of ids to be included in the search" include: [Int], "Filter movie list with flags" flags: MovieFlagsType, "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType], "When provided, will only select movies that were updated after this date." lastUpdated: DateTime, "When provided, will only select movies that are linked to one of the companies ids." companies: [Int!], "When provided, will only select movies that have a company with the selected activity linked to it." activities: [CompanyActivity!], "When provided, will return only the movies linked to all specified tags." tag: [Int!], "Does the movie has an advice for children audience ?" forChildren: Boolean, "When provided, return only movies available on these providers." svodProviders: [SvodProviders!], "Filter movie list by release flag." svodFlags: [SvodFlags!], "Filter movies by release flag" releaseFlags: [BaseReleaseType!], "Filter movies matching all physical product flags given" physicalFlags: [PhysicalProductType!], "If true will only filter browsable movies" browsableOnly: Boolean = true): moviesConnection
}

"""
Technical data about country.
"""
type CountryData {
  """
  The day when movies are releases in the country.
  """
  showtimeReleaseDay: String

  """
  Adjectives used in the country.
  """
  adjective: CountryAdjective
}

"""
Adjectives used in the country.
"""
type CountryAdjective {
  """
  The male adjective in the country already localized.
  """
  male: String

  """
  The female adjective in the country already localized.
  """
  female: String
}

"""
All periods related to boxoffice.
"""
enum BoxOfficePeriod {
  """
  For a day.
  """
  DAY

  """
  For the day of theater release.
  """
  RELEASE_DAY

  """
  For a week.
  """
  WEEK

  """
  Only during weekend (counts Wednesday to Sunday in France).
  """
  WEEKEND
}

"""
Week box office data.
"""
type CountryBoxOffice {
  """
  The boxoffice's value.
  """
  value: Int

  """
  Cumulative boxoffice value since first period.
  """
  cumulative: Int

  """
  Unit for values (ENTRY, PROFIT)
  """
  unit: BoxOfficeType

  """
  Week number since first period
  """
  weekNumber: Int

  """
  First day of the time period
  """
  from: DateTime

  """
  Last day of the time period
  """
  to: DateTime

  """
  The movie.
  """
  movie: Movie
}

"""
All different boxoffice possible.
"""
enum BoxOfficeType {
  """
  BoxOffice will be based on entries.
  """
  ENTRY

  """
  BoxOffice will be base on profits (in USD).
  """
  PROFIT
}

"""
An Allociné movie
"""
type Movie implements Node {
  """
  The id of the movie.
  """
  id: ID!

  """
  The internal id of the movie.
  """
  internalId: Int

  """
  The title of the movie.
  """
  title: String

  stringValue: String

  """
  The title of the movie in the language of the producing country.
  """
  originalTitle: String

  """
  The type of the movie.
  """
  type: MovieType

  """
  The original language(s) of the movie.
  """
  languages: [Language]

  """
  The synopsis of the movie, can be short or long (short by default).
  """
  synopsis("If true will return the full synopsis." long: Boolean = false, "If true will strip the content." strip: Boolean = false): String

  """
  The synopsis of the movie, on json format.
  """
  synopsis_json: BodyJson

  """
  The image of the movie.
  """
  poster: InternalImage

  """
  The keywords of the movie
  """
  keywords: String

  """
  The tags of the movie
  """
  tags: TagCollection

  """
  The genres of the movies, extracted from the tags property.
  """
  genres: [Genre]

  """
  Contains informations about the video and audio format of the movie.
  """
  format: MovieFormat

  """
  Technical data about movies.
  """
  data: MovieData

  """
  The people playing on this movie.
  """
  cast(after: String, "The amount of persons to return." first: Int = 5, before: String, last: Int, "If provided, only persons with this cast type will be returned." castActivity: CastActivity): castMemberConnection

  """
  The people working on this movie.
  """
  credits(after: String, "The amount of persons to return." first: Int = 5, before: String, last: Int, "If provided, only persons of this department will be returned." department: PositionDepartment, "If provided, only persons with this position will be returned." activity: PersonActivity): creditsConnection

  """
  The duration of the movie (format: hh:mm:ss).
  """
  runTime: Duration @deprecated(reason: "Please use the 'runtime' field (which use the ISO 8601 format).")

  """
  The duration of the movie (format: ISO 8601).
  """
  runtime: DateInterval

  """
  The list of companies who worked in this production.
  """
  companies: [MovieCompany]

  """
  The related tags of the movie.
  """
  relatedTags: [Tag!]

  """
  The list of nationalities to which this movie is related to.
  """
  countries: [Country]

  """
  The list of videos related to this movie.
  """
  videos("The amount of videos to return." first: Int = 10, "The order of the videos to return. If none provided the \"RANK\" order is used." order: [EntityVideoSorting] = [RANK], type: [VideoType], excludeTypes: [VideoType], "When true, show external videos from facebook, youtube, etc..." externalVideo: Boolean = true): [Video]

  """
  The total amount of videos this movie has.
  """
  videosCount: Int

  """
  The list of the images for this movie.
  """
  images("The amount of images to return." first: Int = 10, "The order of the images to return. If none provided the \"RANK\" order is used." order: [EntityImageSorting] = [RANK]): [InternalImage]

  """
  The total amount of images this movie has.
  """
  imagesCount: Int

  """
  The list of the news related to this movie.
  """
  news("The amount of news to return." first: Int = 10, "The order of the news to return. If none provided the \"LATEST_PUBLICATION\" order is used." order: [NewsSorting] = [LATEST_PUBLICATION], "If provided, will only return the news that match that category. If many categories are provided, every news that match at least one type will be included." category: [NewsCategory] = [], "When provided, return only the news related to this tag." tag: [String!] = []): [News]

  """
  The total amount of news this movie has.
  """
  newsCount: Int

  """
  The list of the releases of this movie.
  """
  releases("Filter releases on a defined type. No filter are applied if no type or null is given." type: [MovieReleaseType], "Filter releases on a country. No filter are applied if no country or null is given." country: CountryCode): [MovieRelease]

  """
  The main Movie Release according to the defined priorities.
  """
  mainRelease: MainReleaseInfo

  """
  The list of the press reviews of this Movie.
  """
  pressReviews(after: String, "The amount of reviews to return." first: Int = 10, before: String, last: Int, "Defines how to order reviews." order: [PressReviewsOrder!] = [CREATED_AT]): pressReviewsConnection

  """
  The list of the user reviews of this Movie.
  """
  userReviews(after: String, "The amount of users reviews to display." first: Int = 10, before: String, last: Int, "Only includes reviews that were written after this date." from: DateTime, "Only includes reviews that were written before this date." to: DateTime, "Filters the reviews by positive or negative sentiment." sentiment: ReviewSentimentFilter = BOTH, "Only includes reviews for rating equals to X or X,5." rating: ReviewRating, "A filter on reviews statuses" statuses: [ReviewStatus!], "The order to apply to the reviews." order: [ReviewSorting] = [LATEST]): userReviewsConnection

  """
  Reviews written by the website itself.
  """
  editorialReviews: [EditorialReview]

  """
  The trivias of the movie.
  """
  trivias(after: String, "The amount of trivias to return." first: Int = 10, before: String, last: Int, "The order to apply to the trivias." order: [TriviaSorting] = [RANK]): triviasConnection

  """
  !!!!! DEPRECATED !!!!! Use selection instead.
  """
  selections("If true will include only the winners. Does nothing by default." hasWon: Boolean = null): [FestivalSelection] @deprecated(reason: "Use selection instead")

  """
  The selections the movie was selected in.
  """
  selection(after: String, "The amount of entries to return." first: Int = 5, before: String, last: Int, "If true will include only the winners. Does nothing by default." hasWon: Boolean = null): FestivalSelectionConnection

  """
  The festival editions the movie was selected in.
  """
  festivalEdition(after: String, "The amount of editions to return. If not provided, will get all editions" first: Int, before: String, last: Int, "If provided will get all edition which the starts date is after or before the selected date." startDate: FilterDate, "If provided will get all edition which the ends date is after or before the selected date." endDate: FilterDate, "The order of the editions to return. If none provided the \"YEAR\" descendant order is used." order: [FestivalEditionSorting] = [LATEST]): FestivalEditionConnection

  """
  !!!!! DEPRECATED !!!!! Use relatedProducts instead.
  """
  products("The amount of products to display." first: Int = 5, "If provided, will only return the products that match that type. If many types are provided, every product that match at least one type will be included." type: [ProductType], order: [ProductSorting] = [ALPHABETICAL]): [Product] @deprecated(reason: "Use relatedProducts instead")

  """
  The products related to this movie.
  """
  relatedProducts(after: String, "The amount of products to display." first: Int = 10, before: String, last: Int, "If provided, will only return the products that matches that type. If many types are provided, every product that matches at least one type will be included." type: [ProductType], order: [ProductSorting] = [ALPHABETICAL], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType]): productsConnection

  """
  An array of ExternalLink.
  """
  externalLinks: [ExternalLink]

  """
  All stats about the movie.
  """
  stats: MovieStats

  """
  The amount of theaters that will play this movie, from now to the far future.
  """
  theatersCount("If provided will filter theaters by country code." country: [CountryCode], "The latitude and longitude as an object : {lat: XXX, lon: YYY}. This is meant to be used with the radius argument." location: CoordinateType, "Used with the \"location\" argument, defines the max distance in meter." radius: Float, "If provided, returns the amount of theaters among those theaters on which this movie is played. (Theater:C0000 in base64 encoded)" theater: [String]): Int

  """
  The amount of theaters that will be playing or have played this movie in the current week.
  """
  weeklyTheatersCount("If provided will filter theaters by country code." country: [CountryCode], "The latitude and longitude as an object : {lat: XXX, lon: YYY}. This is meant to be used with the radius argument." location: CoordinateType, "Used with the \"location\" argument, defines the max distance in meter." radius: Float, "If provided, returns the amount of theaters among those theaters on which this movie is played. (Theater:C0000 in base64 encoded)" theater: [String]): Int

  """
  The amount of theaters that will be playing this movie in the next floating weeks (number fixed by product).
  """
  twoFloatingWeeksTheatersCount("If provided will filter theaters by country code." country: [CountryCode], "The latitude and longitude as an object : {lat: XXX, lon: YYY}. This is meant to be used with the radius argument." location: CoordinateType, "Used with the \"location\" argument, defines the max distance in meter." radius: Float, "If provided, returns the amount of theaters among those theaters on which this movie is played. (Theater:C0000 in base64 encoded)" theater: [String]): Int @deprecated(reason: "No longer used. Will be removed soon. Use productFloatingWeeksTheatersCount instead.")

  """
  The amount of theaters that will be playing this movie in the next floating weeks (number fixed by product).
  """
  productFloatingWeeksTheatersCount("If provided will filter theaters by country code." country: [CountryCode], "The latitude and longitude as an object : {lat: XXX, lon: YYY}. This is meant to be used with the radius argument." location: CoordinateType, "Used with the \"location\" argument, defines the max distance in meter." radius: Float, "If provided, returns the amount of theaters among those theaters on which this movie is played. (Theater:C0000 in base64 encoded)" theater: [String]): Int

  """
  The list of movies/series/seasons/... this movie relates to.
  """
  relations: [Relation]

  """
  The newest comments added on this movie, up to 50 elements. Directly use disqus API to get more of them.
  """
  comments("The amount of comments to display." first: Int = 50): [Comment]

  """
  The best affinities of the movie (based on the users, with social action (like it, seen it, etc...)).
  """
  affinities(after: String, "The amount of items to display." first: Int = 20, before: String, last: Int, "If provided will only return the items of the given types." type: [AnalogyType], "If provided, will only return items with videos of the given type." videoFilter: [VideoType], "Videos filters operator (OR\/AND)." videoFilterOperator: Operator = OR, "If true, will only return released affinity movies." released: Boolean, "A list of series, movies or userColletions ids to be excluded from the affinities (e.g: Movie:1234, Series:1234, UserCollection:1234 in base64 encoded)" exclude: [String]): analogyConnection

  """
  The best similarities of the movie (based on metas of movie (genre, actors, country, etc...)).
  """
  similarities(after: String, "The amount of items to display." first: Int = 4, before: String, last: Int, "If provided will only return the items of the given types." type: [AnalogyType], "A list of series, movies or userColletions ids to be excluded from the similarities (e.g: Movie:1234, Series:1234, UserCollection:1234 in base64 encoded)" exclude: [String]): analogyConnection

  """
  Technical flags about movie to have rapid information
  """
  flags: MovieFlags

  """
  The series' spotify albums
  """
  albums("The amount of items to display." first: Int = 10, order: [SoundtrackSorting] = [ALPHABETICAL]): [Soundtrack]

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  The movie's boxoffice by week.
  """
  boxOffice("To choose between by entry or by profits (in USD)." type: BoxOfficeType!, "Filter box-office on a country." country: CountryCode, "To choose between day, week or weekend." period: BoxOfficePeriod): [BoxOffice]

  """
  The movie's global boxoffice for a country.
  """
  globalBoxOffice("Filter box-office on a country." idCountry: Int!): GlobalBoxOffice

  """
  Show special operations on movie.
  """
  operation: SpecialOperation

  """
  Fixed similar entities.
  """
  similar: [Node!]

  userAffinity: MovieUserAffinity

  """
  Show all showtimes dates for this movie.
  """
  showtimesDates("If provided, will only display date for those countries." country: [CountryCode], "Showtimes starting before this value won't be displayed. Default value is today." from: DateTime, "Showtimes starting after this value won't be displayed. Default value is tomorrow." to: DateTime, "If provided, will only display date for that city. (Localization:1234 in base64 encoded)" city: [String], "The latitude and longitude as an object : {lat: XXX, lon: YYY}. This is meant to be used with the radius argument." location: CoordinateType, "If provided, search and city filter will use specific language searching." analyzer: Locale, "Used with the \"location\" argument, defines the max distance in meter." radius: Float, "If provided, will only search showtimes date for those theaters. (Theater:C0000 in base64 encoded)" theater: [String], "If provided, will only display date for the movie, where localization name, zip or theater name match the value." search: String, "If provided, will only display date for the movie with showtimes which have this experiences." experience: [Experience], "If provided, will only display date for the movie with showtimes which have this projections formats." projection: [Projection], "If provided, will only display date for the movie with showtimes in the selected version." version: [ShowtimeVersion], "If provided, will only display date with theaters which have the selected loyalties cards." loyaltyCard: [LoyaltyCard], "The comforts available in theater" comfort: [Comfort], "The picture of the theater" picture: [Picture], "The sound of the theater" sound: [Sound], "!!! WARNING - The data in this endpoint are sensible and not accurate. You should not use them as long as this warning is present !!! The services available in theater" service: [TheaterService], "True if the theater has a list of movie that will be displayed on the following weeks (maximum 3 months)." hasFutureReleaseSoon: Boolean, "If isset, will filtered the list with theaters in specific group." group: Int, "!!!!! DEPRECATED !!!!! Use experience filter instead." techno: [TechnoFlag], "!!!!! DEPRECATED !!!!! Use projection filter instead." format: [ProjectionFormat]): [String]

  releaseFlags: ReleaseFlags

  """
  The movie's spotify soundtracks
  """
  soundtracks: Soundtrack @deprecated(reason: "No longer used. You need to get the real architecture on albums endpoint. Will be remove soon.")
}

enum MovieType {
  """
  A feature film is a film (also called a movie, motion picture or just film) with a running time long enough to be considered the principal or sole film to fill a program.
  """
  FEATURE_FILM

  """
  A medium length film is a film that has a running time of 30 to 59 minutes. In a lot of countries this term is not officially recognized.
  """
  MEDIUM_LENGTH_FILM

  """
  A short film, is a cinema format, denoting any film not long enough to be considered a feature film.
  """
  SHORT_FILM

  """
  A television film is a feature-length motion picture that is produced for, and originally distributed by or to, a television network, in contrast to theatrical films, which are made explicitly for initial showing in movie theaters.
  """
  TV_MOVIE

  """
  A serial, film serial, movie serial or chapter play, is a motion picture form popular during the first half of the 20th century, consisting of a series of short subjects exhibited in consecutive order at one theater, generally advancing weekly, until the series is completed.
  """
  SERIAL

  """
  An anthology film is a subgenre of films consisting of several different short films, often tied together by only a single theme, premise, or brief interlocking event (often a turning point). Sometimes each one is directed by a different director.
  """
  ANTHOLOGY_FILM

  EPISODE

  BRAND_CONTENT

  COMMERCIAL

  SPECIAL_EVENT
}

enum Language {
  ABORIGINAL_LANGUAGE

  AFRICAN_DIALECT

  AFRIKAANS

  ALBANIAN

  ALGERIAN

  AMHARIC

  ARABIC

  ARAMAIC

  ARMENIAN

  AZERI

  BAMBARA

  BENGALI

  BOSNIAN

  BRITON

  BULGARIAN

  BURMESE

  CANTONESE

  CATALAN

  CHINESE

  CREOLE

  CZECH

  DANISH

  DUTCH

  ENGLISH

  ESTONIAN

  EUSKERA

  FARSI

  FILIPINO

  FINNISH

  FLEMISH

  FRENCH

  GAELIC

  GALLEGO

  GEORGIAN

  GERMAN

  GREEK

  GUARANI

  HEBREW

  HINDI

  HOKKIEN

  HUNGARIAN

  ICELANDIC

  INDONESIAN

  INUKTITUT

  ITALIAN

  JAPANESE

  KANNADA

  KAZAKH

  KHMER

  KIRGIZIAN

  KLINGON

  KOREAN

  KURDISH

  LATIN

  LATVIAN

  LINGALA

  LITHUANIAN

  MACEDONIAN

  MALAGASY

  MALAY

  MALAYALAM

  MANDARIN

  MARATHI

  MAYA

  MONGOLESE

  NORWEGIAN

  OTHER

  PASHTO

  PERSIAN

  POLISH

  PORTUGUESE

  PUNJABI

  ROMANIAN

  ROMANY

  RUSSIAN

  SERB

  SERBO_CROAT

  SIGN_LANGUAGE

  SILENT

  SLOVAK

  SLOVENIAN

  SOMALI

  SOTHO

  SPANISH

  SWAHILI

  SWEDISH

  SWISS_GERMAN

  TADZHIK

  TAMIL

  THAI

  TELUGU

  TIBETAN

  TURKISH

  UKRAINIAN

  UNDETERMINED_LANGUAGE

  URDU

  VALENCIANO

  VIETNAMESE

  WOLOF

  YIDDISH

  ZANSKARI

  ZULU
}

"""
An object containing all the informations needed to display a body_json
"""
type BodyJson {
  """
  The body_json field itself.
  """
  body: Json

  """
  The related entities of the body_json
  """
  relatedEntities: [Node]
}

enum Genre {
  ACTION

  ADVENTURE

  ANIMATION

  BIOPIC

  BOLLYWOOD

  CARTOON

  CLASSIC

  COMEDY

  COMEDY_DRAMA

  CONCERT

  DETECTIVE

  DIVERS

  DOCUMENTARY

  DRAMA

  EROTIC

  EXPERIMENTAL

  FAMILY

  FANTASY

  HISTORICAL

  HISTORICAL_EPIC

  HORROR

  JUDICIAL

  KOREAN_DRAMA

  MARTIAL_ARTS

  MEDICAL

  MOBISODE

  MOVIE_NIGHT

  MUSIC

  MUSICAL

  OPERA

  ROMANCE

  SCIENCE_FICTION

  PERFORMANCE

  SOAP

  SPORT_EVENT

  SPY

  THRILLER

  WARMOVIE

  WEB_SERIES

  WESTERN
}

"""
Contains informations about the video and audio format of the movie.
"""
type MovieFormat {
  """
  The color of the movie.
  """
  color: Color

  """
  The audio format of the movie. Can have multiple values.
  """
  audio: [AudioFormat]

  """
  The aspect ratio of an image describes the proportional relationship between its width and its height. It is commonly expressed as two numbers separated by a colon, as in 16:9.
  """
  aspectRatios: [AspectRatio]

  """
  Film gauge is a physical property of photographic or motion picture film stock which defines its width.
  """
  filmGauges: [FilmGauge]
}

"""
The color of the movie.
"""
enum Color {
  COLOR

  BLACK_WHITE

  COLOR_BLACK_WHITE
}

"""
The audio of the movie.
"""
enum AudioFormat {
  DOLBY_SRD_DTS_EX

  DOLBY_DIGITAL

  DOLBY_DIGITAL_DTS

  MONO

  STEREO

  SDDS

  DOLBY_SR_DIGITAL_DTS_DIGITAL

  DOLBYA

  SRDDTS

  DRS

  DOLBY_SR_DIGITAL_SR_DDTS_AMP_SDDS

  DOLBY_SR_DDTS

  DTS

  DOLBY_STEREO

  DOLBY_ATMOS

  DOLBY_SRD

  DOLBY

  DOLBY_SR

  SONICS_DDP

  DTS_STEREO

  DOLBY_SR_DOLBY_SR_DTS_AMP_SDDS

  EX

  DOLBY_DIGITAL_EX
}

enum AspectRatio {
  """
  1.66:1
  """
  R_1_66

  """
  1.37:1
  """
  R_1_37

  """
  1.77:1, also considered to be 16:9.
  """
  R_1_77

  """
  1.19:1
  """
  R_1_19

  """
  2.00:1
  """
  R_2_00

  """
  1.44:1
  """
  R_1_44

  """
  2.76:1 Ultra Panavision 70
  """
  ULTRA_PANAVISION_70

  """
  1.78:1, also considered to be 16:9.
  """
  R_1_78

  """
  2.6:1 Cinerama
  """
  CINERAMA

  """
  1.85:1
  """
  R_1_85

  """
  2:1
  """
  R_2

  """
  1.33:1, also known as 4:3.
  """
  R_1_33

  """
  2.55:1
  """
  ORIGINAL_CINEMASCOPE

  """
  1.20:1
  """
  R_1_20

  """
  2.35:1 Cinemascope
  """
  CINEMASCOPE

  """
  2.2:1
  """
  R_22

  WIDESCREEN

  """
  2.75:1 MGM camera 65
  """
  MGM_CAMERA_65
}

enum FilmGauge {
  STANDARD_16MM

  SUPER_16MM

  STANDARD_35MM

  SUPER_35MM

  STANDARD_70MM

  DV

  HD

  SUPER_8
}

"""
Technical data about movies.
"""
type MovieData {
  """
  The money spent on this movie. It is expressed as a string with currency included.
  """
  budget: String

  """
  The year the movie was produced.
  """
  productionYear: Int

  """
  Differents fields for seo purposes.
  """
  seo: Seo

  """
  The universal unique identifier.
  """
  eidr: String

  """
  The international standard audiovisual number.
  """
  isan: String

  """
  German MoviePilot ID.
  """
  moviepilot: String

  """
  IMDb ID.
  """
  imdb: String

  """
  An advice of the redaction.
  """
  recommendation: Recommendation
}

"""
Differents fields for seo purposes.
"""
type Seo {
  """
  Information to know if the entity is browsable.
  """
  browsable: Boolean
}

"""
An advice of the redaction.
"""
type Recommendation {
  """
  A short description.
  """
  label: String

  """
  Indicate if it's recommended for children.
  """
  forChildren: Boolean
}

enum CastActivity {
  ACTOR

  VOICE_ACTOR

  ORIGINAL_VOICE_ACTOR
}

"""
A connection to a list of items.
"""
type castMemberConnection {
  totalCount: Int

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [castMemberEdge]
}

"""
An object used for seo.
"""
type Backlink {
  """
  The linking text.
  """
  label: String

  """
  The backlink's url.
  """
  url: String
}

"""
An edge in a connection.
"""
type castMemberEdge {
  """
  The item at the end of the edge.
  """
  node: CastMember

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A person playing in a series/movie.
"""
type CastMember {
  """
  The person that is part of the cast.
  """
  person: Person @deprecated(reason: "Use actor instead")

  """
  The person that is part of the cast.
  """
  actor: Person

  """
  The person that is part of the cast.
  """
  voiceActor: Person

  """
  The person that is part of the cast.
  """
  originalVoiceActor: Person

  """
  The role on screen of the cast member.
  """
  role: String

  """
  The rank of the cast member.
  """
  rank: Int
}

"""
An Allociné person
"""
type Person implements Node {
  """
  The id of the person
  """
  id: ID!

  """
  The internal id of the person.
  """
  internalId: Int

  """
  The first name of the person.
  """
  firstName: String

  """
  The last name of the person.
  """
  lastName: String

  stringValue: String

  """
  The formal name of the person.
  """
  formalName: String

  """
  The birth date of the person.
  """
  birthDate: DateLimited

  """
  The place of birth of the person.
  """
  birthPlace: String

  """
  The birth date of the person.
  """
  deathDate: DateLimited

  """
  The place of death of the person.
  """
  deathPlace: String

  """
  The cause of the death of the person.
  """
  deathCause: String

  """
  Differents fields for seo purposes.
  """
  seo: Seo

  """
  The image of the person.
  """
  picture: InternalImage

  """
  The gender of this person.
  """
  gender: Gender

  """
  The biography of this person, can be short or long (short by default).
  """
  biography("If true will return the full biography." long: Boolean = false): String

  """
  The biography of this person on json format.
  """
  biography_json: BodyJson

  """
  The list of nationalities to which this person is related to.
  """
  countries: [Country]

  """
  The list of videos related to this person.
  """
  videos("The amount of videos to return." first: Int = 10, "The order of the videos to return. If none provided the \"RANK\" order is used." order: [EntityVideoSorting] = [RANK], type: [VideoType]): [Video]

  """
  The last video related to the person if it exists, else the last movie related video (ordered by descending production date)
  """
  lastVideo: Video

  """
  The total amount of videos this person has.
  """
  videosCount: Int

  """
  The list of the images for this person.
  """
  images("The amount of images to return." first: Int = 10, "The order of the images to return. If none provided the \"RANK\" order is used." order: [EntityImageSorting] = [RANK]): [InternalImage]

  """
  The total amount of images this person has.
  """
  imagesCount: Int

  """
  The list of the news related to this movie.
  """
  news("The amount of news to return." first: Int = 10, "The order of the news to return. If none provided the \"LATEST_PUBLICATION\" order is used." order: [NewsSorting] = [LATEST_PUBLICATION], "If provided, will only return the news that match that category. If many categories are provided, every news that match at least one type will be included." category: [NewsCategory] = []): [News]

  """
  The total amount of news this movie has.
  """
  newsCount: Int

  """
  !!!!! DEPRECATED !!!!! Use selection instead.
  """
  selections("If true will include only the winners. Does nothing by default." hasWon: Boolean = null, "the amount of entries to return." first: Int = 5): [FestivalSelection] @deprecated(reason: "Use selection instead")

  """
  The selections the person was selected in.
  """
  selection(after: String, "The amount of entries to return." first: Int = 5, before: String, last: Int, "If true will include only the winners. Does nothing by default." hasWon: Boolean = null): FestivalSelectionConnection

  """
  The known positions this person has occupied. Sorted by most frequent first.
  """
  positions: [Position]

  """
  The movies/series/programs this person took part in.
  """
  filmography("The amount of entries to return." first: Int = 5, offset: Int = 0, "If provided, only persons of this department will be returned. Please note that this filter supports an extra value \"Acting\" to get the actors." department: PositionDepartment, "If true, only the entities having the provided status will be returned." entityStatus: [FilmographyEntityStatus], "- If provided, will only return filmography entries of this type. - SERIES type will also return seasons and episodes" entityType: [FilmographyEntityType], "- If true, will also include each series episode where this person took part in." withEpisodes: Boolean = true): [FilmographyEntry]

  """
  The movies/series/programs this person took part in.
  """
  filmographyPaginated(after: String, "The amount of filmography entries to return." first: Int = 5, before: String, last: Int, offset: Int = 0, "If provided, only persons of this department will be returned. Please note that this filter supports an extra value \"Acting\" to get the actors." department: PositionDepartment, "If true, only the entities having the provided status will be returned." entityStatus: [FilmographyEntityStatus], "- If provided, will only return filmography entries of this type. - SERIES type will also return seasons and episodes" entityType: [FilmographyEntityType], "- If true, will also include each series episode where this person took part in." withEpisodes: Boolean = true): filmographyConnection

  """
  Some stats about the total amount of series/movies where the person appears in.
  """
  appearanceStats: PersonAppearanceStats

  """
  The best movies for the person.
  """
  topMovies(after: String, "The amount of entries to return." first: Int = 5, before: String, last: Int, "The release status of the movies" releaseFlag: PersonMovieReleaseFlags = ALL): moviesConnection

  """
  The best series for the person.
  """
  topSeries("The amount of entries to return." first: Int = 5): seriesConnection

  """
  The list of collobaration (order by number desc)
  """
  collaboration("The amount of entries to return." first: Int = 5, "If true will only filter browsable persons" browsableOnly: Boolean = true): personsCollaborationConnection

  """
  The keywords of the person
  """
  keywords: String

  """
  The tags of the person
  """
  tags: TagCollection

  """
  The newest comments added on this person, up to 50 elements. Directly use disqus API to get more of them.
  """
  comments("The amount of comments to display." first: Int = 50): [Comment]

  backlink("A custom label set by backoffice." label: String): Backlink
}

scalar DateLimited

"""
The gender of a person.
"""
enum Gender {
  MALE

  FEMALE
}

"""
Sorting criteria for videos.
"""
enum EntityVideoSorting {
  """
  Videos are sorted by added date desc.
  """
  LATEST

  """
  Videos are sorted by added date.
  """
  OLDEST

  """
  Videos sorted by title in alphabetical order.
  """
  ALPHABETICAL

  """
  Videos sorted by title in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Videos sorted by popularity on a monthly basis.
  """
  MONTHLY_POPULARITY

  """
  Videos sorted by popularity on a weekly basis.
  """
  WEEKLY_POPULARITY

  """
  Videos sorted by popularity on a daily J-1.
  """
  DAILY_POPULARITY

  """
  Videos sorted by the selection of cms.
  """
  CMS_RANK

  """
  Videos sorted by rank in ascending order.
  """
  RANK

  """
  Video sorted by popularity (all time).
  """
  ALL_TIME_POPULARITY

  """
  This order will display the trailers first, then the teasers, then the clips, and then the other types.
  """
  CUSTOM_VIDEO_TYPE
}

enum VideoType {
  """
  Credits are a list of the cast and crew of a particular motion picture, television program, or video game.
  """
  CREDITS

  """
  Advertising is a video form of marketing communication that employs an openly sponsored, nonpersonal message to promote or sell a product, service or idea.
  """
  ADVERTISING

  """
  A tv program is a segment of content intended for broadcast on over-the-air, cable television, or Internet television, other than a commercial, trailer, or any other segment of content not serving as attraction for viewership. It may be a single production, or more commonly, a series of related productions (also called a television show).
  """
  TV_PROGRAM

  """
  Featurette is a term used in the American film industry to designate a film usually of three reels in length, or about 24–40 minutes in running time, thus longer than a two-reel short subject but shorter than a feature film.
  """
  FEATURETTE

  """
  A video of an interview.
  """
  INTERVIEW

  """
  A video excerpt.
  """
  EXCERPT

  """
  A parody mashup combines multiple pre-existing video sources in a parodic way into a unified video. The video sources usually have no discernible relation with each other.
  """
  PARODY_MASHUP

  """
  Their purpose is less to tell the audience about a movie's content than simply to let them know that the movie is coming up in the near future, and to add to the hype of the upcoming release.
  """
  TEASER

  """
  A trailer is an advertisement, usually in the form of a brief excerpt or string of excerpts, for a media work.
  """
  TRAILER

  """
  Video clips are short clips of video, usually part of a longer recording. The term is also more loosely used to mean any short video less than the length of a traditional television program.
  """
  VIDEO_CLIP

  """
  A trailer for a video game.
  """
  VIDEO_GAME_TRAILER

  """
  An online user review is a video where a user from the community, gives his feedback and feelings about various topics (movies, tv show, ...).
  """
  ONLINE_USER_REVIEW

  """
  A video where a moviegoer (a person who goes to the cinema, especially on a regular basis) gives his feedback.
  """
  MOVIEGOER_REACTIONS

  """
  A full movie or a full series episode.
  """
  COMPLETE

  """
  The first minutes of a movie or a series episode.
  """
  FIRST_MINUTES

  """
  A video of a report.
  """
  SPECIAL_REPORT

  """
  A trailer stream.
  """
  TRAILER_STREAM

  EMERGENCE_CAROUSEL_VIDEO
}

"""
An Allociné Video.
"""
type Video implements Node {
  """
  The id of the video.
  """
  id: ID!

  """
  The internal id of the video.
  """
  internalId: String

  """
  The code of the video.
  """
  code: Int

  """
  The title of the video.
  """
  title("If false will omit the generated title and use the base one." generated: Boolean = true): String

  stringValue: String

  """
  The original title of the video.
  """
  originalTitle("If false will omit the generated original title and use the base one." generated: Boolean = true): String

  """
  The description of the video.
  """
  description: String

  """
  The original description of the video.
  """
  originalDescription: String

  """
  The duration of the video.
  """
  duration: String

  """
  the video html
  """
  html: String

  """
  The image snapshot of the video.
  """
  snapshot: InternalImage

  """
  Info about video if preroll and postroll are available
  """
  ads: VideoAds

  """
  The type of the video.
  """
  type: VideoType

  """
  The tags of the video.
  """
  tags: TagCollection

  """
  The files of the video.
  """
  files("If provided, only files that match at least one of the given formats will be returned." format: [VideoFormat], "If provided, only files that match at least one of the given qualities will be returned." quality: [VideoQuality]): [VideoFile]

  """
  The publication information of the video.
  """
  publication: Publication

  """
  The language of the video
  """
  language: Language

  """
  The related entities of the video
  """
  relatedEntities("Filters the related entities of the video based on their type." type: [MediaRelatedEntityTypes]): [Node]

  """
  The newest comments added on this video, up to 50 elements. Directly use disqus API to get more of them.
  """
  comments("The amount of comments to display." first: Int = 50): [Comment]

  """
  All stats about the video.
  """
  stats: VideoStats

  youtube: [String]

  dailymotion: [String]

  mySkreen: [String]
}

"""
Contains informations about the video preroll and postroll
"""
type VideoAds {
  """
  True is video must'nt have preroll
  """
  hasNoPreroll: Boolean

  """
  True is video must'nt have postroll
  """
  hasNoPostroll: Boolean
}

"""
All format which can be used to encode the video.
"""
enum VideoFormat {
  """
  m4v
  """
  M4V

  """
  FLV / H.264
  """
  FLV_H264

  """
  FLV / H.264, letterbox, legacy
  """
  FLV_LETTER

  """
  H264 High Profile, with splashscreen
  """
  MP4_HIP

  """
  MP4 / H.264 Baseline Profile, Low Complexity, with splashscreen
  """
  MP4_LC

  """
  MP4 / H.264 High Profile, for archive
  """
  MP4_ARCHIVE

  """
  MPEG-2 Main Profile
  """
  MPEG2

  """
  XVID
  """
  AVI_XVID

  """
  WMV9
  """
  WMV9

  """
  MPEG-1
  """
  MPEG1

  """
  MPEG-2 720p
  """
  MPEG2_THEATER

  """
  WebM
  """
  WEBM

  """
  MP4 / H.264 High Profile, no splashscreen
  """
  MP4_HIP_RAW

  """
  MP4 / H.264 Baseline Profile, Low Complexity, no splashscreen
  """
  MP4_LC_RAW
}

"""
All videos qualities available.
"""
enum VideoQuality {
  """
  The lowest quality, very light. It corresponds to 180p.
  """
  LOW

  """
  An intermediate quality, fair ratio between size and image quality. It corresponds to 320p.
  """
  MEDIUM

  """
  Standard size, which should be used by default. It corresponds to 480p.
  """
  STANDARD

  """
  High quality, but it's heavy. It corresponds to 720p.
  """
  HIGH

  """
  The highest quality, but it's the heaviest file. It's not often used. It corresponds to 1080p.
  """
  HIGHEST
}

"""
The real files for a given video. They are meant to offer the same content in different formats/qualities.
"""
type VideoFile {
  """
  The full path where the file can be found.
  """
  url: String

  """
  The quality (HIGH, LOW, MEDIUM...) used to encode the video.
  """
  quality: VideoQuality

  """
  The format (M4V, MP4, ...) used to encode the video.
  """
  formats: [VideoFormat]

  """
  The file size in bytes.
  """
  size: Int

  """
  The width of the video.
  """
  width: Int

  """
  The height of the video.
  """
  height: Int
}

"""
A comment, written by a user.
"""
type Comment {
  """
  The user that wrote the comment.
  """
  author: String

  """
  The date this comment was submitted.
  """
  createdAt: DateTime

  """
  The content of the comment.
  """
  body("If true will strip the content." strip: Boolean = false): String
}

"""
All stats about the video.
"""
type VideoStats {
  """
  An array of metrics for a given entity.
  """
  metric: StatsMetric
}

type StatsMetric {
  """
  The number of hits for this page.
  """
  hits: Int

  """
  The number of unique visitors who has seen this page.
  """
  unique_visitors: Int

  """
  The number 
  """
  videos: Int

  """
  The number of sessions.
  """
  sessions: Int

  advertising_videos: Int

  """
  The number of user votes indicating that this is helpful.
  """
  helpful_count: Int

  """
  The number of user votes indicating that this is not helpful.
  """
  unhelpful_count: Int

  """
  The number of starts on the video.
  """
  starts: Int
}

"""
Sorting criteria for images.
"""
enum EntityImageSorting {
  """
  Images are sorted by added date.
  """
  LATEST

  """
  Images sorted by title in alphabetical order.
  """
  ALPHABETICAL

  """
  Images sorted by title in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Images sorted by rank in ascending order.
  """
  RANK
}

"""
Sorting criteria for news
"""
enum NewsSorting {
  """
  News are sorted by reverse publication date.
  """
  LATEST_PUBLICATION

  """
  News are sorted by reverse edition date.
  """
  LATEST_EDITION

  """
  News sorted by shortTitle in alphabetical order.
  """
  ALPHABETICAL

  """
  News sorted by shortTitle in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  News sorted by the popularity of the last day.
  """
  DAILY_POPULARITY

  """
  News sorted by the popularity of the last three days.
  """
  THREE_DAYS_POPULARITY

  """
  News sorted by the popularity of the last week.
  """
  WEEKLY_POPULARITY

  """
  News sorted by the popularity of the last month.
  """
  MONTHLY_POPULARITY
}

"""
An AlloCiné News Category.
"""
enum NewsCategory {
  STREAMING

  """
  A category about news which were released elsewhere on the web.
  """
  AS_SEEN_ON_THE_WEB

  """
  A category for box office news.
  """
  BUSINESS

  """
  A category for news related to independant theaters.
  """
  INDIE

  """
  A category for news about celebrities.
  """
  CELEBRITIES

  """
  A category for news related to festival awards and compatible with AMP.
  """
  FESTIVALS_AMP_AWARDS

  """
  A category for news related to festival awards.
  """
  FESTIVALS_AWARDS

  """
  A category for news related to film trailers.
  """
  FILMS_TRAILER_VIDEOS

  """
  A category for news related to interviews.
  """
  INTERVIEWS

  """
  A category for news related to a movie launch.
  """
  MOVIE_LAUNCH

  """
  A category for news related to a movie.
  """
  MOVIE_NEWS

  """
  A category for news related to soundtracks.
  """
  NEWS_SOUNDTRACK

  """
  A category for news about film making of.
  """
  NOW_FILMING

  PERSONAL_STUFF_SERIES

  SERIES_AS_SEEN_ON_THE_WEB

  """
  A category for news related to tv shows.
  """
  TV_SERIES

  """
  A category for news related to tv shows.
  """
  TV_SERIES_CHANNELS

  """
  A category for news related to tv show interviews.
  """
  TV_SERIES_INTERVIEWS

  """
  A category for news related to people playing in tv shows.
  """
  TV_SERIES_PEOPLE

  """
  A category for news which are related to the Comic Con.
  """
  COMIC_CON

  DOSSIERS_COURTS_METRAGES

  """
  A category for news about unusual stuff.
  """
  INSOLITE

  ITUNES

  LISTE_GENERIQUE

  """
  A category for news about movies broadcasted on TV.
  """
  MOVIES_ON_TV

  MOVIE_DID_YOU_KNOW

  MOVIE_EVENT

  """
  A category for news for national theater event.
  """
  NATIONAL_EVENT_THEATER

  """
  A category for news about videos selected by our team.
  """
  OUR_VIDEO_PICKS

  """
  A category for news about short movies.
  """
  SHORT_FILMS

  """
  A category for news about short movie videos.
  """
  SHORT_FILMS_VIDEO

  TV_SERIES_FEATURES_FOCUS_ON

  """
  A category for news related to series being currently broadcasted.
  """
  TV_SERIES_FEATURES_WHAT_S_ON

  """
  A category for news about people who have played in a series a long time ago.
  """
  TV_SERIES_FEATURES_WHERE_ARE_THEY_NOW

  """
  A category for news about series press roundup.
  """
  TV_SERIES_PRESS_ROUNDUP

  """
  A category for news about series statistics.
  """
  TV_SERIES_RATINGS

  VIDEO_BUZZ

  """
  A category for news about video games.
  """
  VIDEO_GAMES_NEWS

  INTERVIEWS_SERIES

  SERIES_IN_PRODUCTION

  TV_SERIES_BUSINESS

  TV_SERIES_FESTIVALS

  FEATURES

  FILMS_AS_SEEN_ON_THE_WEB

  FILMS_IN_PRODUCTION

  FILMS_PEOPLE

  SERIES_NEWS

  TV_SERIES_FEATURES

  BERLINALE

  CELEBRITIES_PROJECT

  DOSSIER_GALLERIE_PHOTO_LISTEN_LISTEN_LISTEN

  DOSSIER_GALLERIE_PHOTO_TV_TIPPS

  DVD_BOOKS

  NEWS_PHOTOS

  PERSONAL_STUFF_MOVIE

  REPORT

  AMIGOS_DE_SENSACINE

  """
  A category for news which are related to competitions and previews.
  """
  CONCURSOS_Y_PREESTRENOS

  TV_SERIES_SPOILERS

  AS_SEEN_ON_THE_WEB_FEATURE

  BUSINESS_FEATURE

  CELEBRITIES_FEATURE

  DOSSIER_GALLERIE_PHOTO_DIE

  DOSSIER_GALLERIE_PHOTO_PORTRAIT_DE_STAR_SERIES

  FESTIVALS_AWARDS_FEATURE

  INTERVIEWS_FEATURE

  MOVIE_LAUNCH_FEATURE

  NOW_FILMING_FEATURE

  RETROSPECTIVE_NEWS

  TOPS_FLOPS_SERIES

  TV_SERIES_FEATURES_BEST_OF

  TV_SERIES_FEATURES_TALK_BACK

  TV_SERIES_TOP_FEATURES

  VIDEO_GAMES_FEATURE

  SERIES_DID_YOU_KNOW

  SERIES_QUIZ

  SERIES_STREAMING

  ON_TV

  EMISSIONS_MAGS

  TELEREALITE
}

"""
An Allociné News.
"""
type News implements Node {
  """
  The id of the news.
  """
  id: ID!

  """
  The internal id of the news.
  """
  internalId: Int

  """
  The brand of the news.
  """
  brand: Brand

  """
  The short title of the news.
  """
  title: String

  """
  The long title of the news.
  """
  headline: String

  stringValue: String

  legacyId: [String]

  """
  The publication informations.
  """
  publication: Publication

  """
  The image of the news.
  """
  picture: InternalImage

  """
  The keywords of the movie
  """
  keywords: String

  """
  The tags of the news.
  """
  tags: TagCollection

  """
  The related entities of the news
  """
  relatedEntities("A list of types to be excluded from the search." excludedTypes: [NewsRelatedEntityTypes], "A list of types to search for." types: [NewsRelatedEntityTypes]): [Node]

  """
  The pages of the news. This is were the readable content is stored.
  """
  pages("When provided, will only select the given page" number: Int): [NewsPage!]

  """
  The slides of the news.
  """
  slides: [NewsSlide!]

  """
  The categories of the news.
  """
  categories: [NewsCategory]

  """
  The universes of the news.
  """
  universes: [NewsUniverse]

  """
  The type of the news.
  """
  type: NewsType

  """
  Show special operations on news.
  """
  operations: SpecialOperation

  """
  News that are related to the current one. Up to 10.
  """
  relatedNews("The amount of news to return." first: Int = 5): [News]

  """
  The related tags of the news.
  """
  relatedTags: [Tag!]

  """
  The name of the person who wrote the news.
  """
  author: String @deprecated(reason: "Use the 'authors' field instead.")

  """
  The number of pages this news has.
  """
  pageCount: Int

  """
  The newest comments added on this news, up to 50 elements. Directly use disqus API to get more of them.
  """
  comments("The amount of comments to display." first: Int = 50): [Comment]

  """
  All stats about the news.
  """
  stats: NewsStats

  """
  Technical data about news.
  """
  data: NewsData

  """
  The date when the news was updated
  """
  updatedAt: DateTime

  """
  The authors who wrote the news.
  """
  authors(after: String, "The amount of nodes to return." first: Int = 10, before: String, last: Int): AuthorByEntityListConnection
}

"""
Available types for video entities.
"""
enum NewsRelatedEntityTypes {
  NEWS

  FESTIVAL

  FESTIVAL_EDITION

  MOVIE

  PERSON

  SERIES

  SERIES_EPISODE

  SERIES_SEASON
}

"""
A page of a news, this is where the news content lives.
"""
type NewsPage {
  """
  The news this page belongs to.
  """
  news: News!

  """
  The page number, from 1 to +Inf.
  """
  number: Int!

  """
  The title of the page.
  """
  title: String

  """
  The content of the page.
  """
  body: String

  """
  The content of the page on json format.
  """
  body_json: BodyJson

  """
  The video attached to this news. This is the player that appears at the top of the news on the website.
  """
  video: Video
}

"""
A slide of a news, this is where the news content lives.
"""
type NewsSlide {
  """
  The news this page belongs to.
  """
  news: News!

  """
  The slide number, from 1 to +Inf.
  """
  number: Int!

  """
  The title of the slide.
  """
  title: String

  """
  The content of the slide.
  """
  body: String

  """
  The content of the slide on json format.
  """
  body_json: BodyJson

  """
  The image attached to this slide.
  """
  image: InternalImage
}

"""
An AlloCiné News Universes.
"""
enum NewsUniverse {
  MOVIE

  SERIES

  PERSON

  THEATER

  VIDEO_GAME

  VIDEO

  SHORT_FILM

  SOUNDTRACK

  GENERIC_TVACTU

  GENERIC_IVORY_COAST
}

"""
All formats of Allocine news.
"""
enum NewsType {
  """
  This type is a global news type.
  """
  ACTUALITE

  """
  This type represent news with different pages.
  """
  DIAPORAMA

  """
  This type represent a news with different pages witch has a video launch in autoplay.
  """
  JUKEBOX

  """
  This type represent an old news will be remove in perfect world.
  """
  OLD_FOLDER

  """
  This type represent a news with different videos in one page.
  """
  PLAYLIST

  """
  The type represent a news with audio song.
  """
  PODCAST
}

"""
A Tag, it contain a list of movies and series by theme
"""
type Tag implements Node {
  """
  The id of the tag.
  """
  id: ID!

  """
  The internal id of the tag.
  """
  internalId: Int!

  stringValue: String!

  """
  The tag's name.
  """
  name: String!

  """
  The tags of the tag
  """
  tags: TagCollection!

  """
  Technical data about tag.
  """
  data: TagData!

  """
  The scope of the tag if it has one.
  """
  scope: TagScope

  """
  The related entities of the tag.
  """
  relatedEntities(after: String, "The amount of related entities to return." first: Int = 5, before: String, last: Int, "Filter on related entities types" type: [TagType!]): nodeConnection
}

"""
Technical data about tag.
"""
type TagData {
  """
  Differents fields for seo purposes.
  """
  seo: SeoTag
}

"""
Differents fields for seo purposes.
"""
type SeoTag {
  """
  Information to know if the entity is browsable.
  """
  browsable: Boolean

  """
  Information to know if the entity is seo ready.
  """
  friendly: Boolean

  topRanking: Boolean!

  """
  seo scope.
  """
  scope: SeoTagScope!
}

type SeoTagScope {
  userRating: SeoAbstractScope!

  pressRating: SeoAbstractScope!

  popularity: SeoAbstractScope!

  ranking: SeoAbstractScope!
}

type SeoAbstractScope {
  movie: SeoAbstractScopeEntity!

  series: SeoAbstractScopeEntity!
}

type SeoAbstractScopeEntity {
  title: String

  subTitle: String

  description: String
}

enum TagScope {
  AGE

  PROVIDER

  THEME

  TRACKING
}

"""
Related entities type on tag.
"""
enum TagType {
  """
  Filter tag by related entities type movie.
  """
  MOVIE

  """
  Filter tag by related entities type series.
  """
  SERIES

  """
  Filter tag by related entities type person.
  """
  PERSON
}

"""
A connection to a list of items.
"""
type nodeConnection {
  totalCount: Int

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [nodeEdge]
}

"""
An edge in a connection.
"""
type nodeEdge {
  """
  The item at the end of the edge.
  """
  node: Node

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
All stats about the news.
"""
type NewsStats {
  """
  A list of metrics for a given entity.
  """
  metric: StatsMetric
}

"""
Technical data about news.
"""
type NewsData {
  """
  Differents fields for seo purposes.
  """
  seo: SeoNews

  """
  Differents fields for tracking purposes.
  """
  tracking: TrackingData
}

"""
Differents fields for seo purposes.
"""
type SeoNews {
  """
  Information to know if the entity is hidden.
  """
  hidden: Boolean
}

"""
Differents fields for tracking purposes.
"""
type TrackingData {
  """
  VgWort tracking data.
  """
  vgwort: TrackingDataVgwort
}

"""
WgWort tracking data.
"""
type TrackingDataVgwort {
  """
  VgWort public key.
  """
  public: String
}

"""
A connection to a list of items.
"""
type AuthorByEntityListConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [AuthorByEntityListEdge]
}

"""
An edge in a connection.
"""
type AuthorByEntityListEdge {
  """
  The item at the end of the edge.
  """
  node: AuthorByEntityLeaf

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type AuthorByEntityLeaf {
  """
  The author of the entity.
  """
  author: Author

  signature: AuthorSignature
}

"""
An Allociné author
"""
type Author implements Node {
  """
  The id of the author.
  """
  id: ID!

  """
  The internal id of the author.
  """
  internalId: Int

  stringValue: String

  """
  The name of the author.
  """
  name: String!

  """
  The nickname of the author.
  """
  nickname: String

  """
  The position of the author (redactor, ...).
  """
  position: String

  """
  The full biography of the author.
  """
  biography: BodyJson

  """
  The short biography of the author.
  """
  shortBiography: String!

  """
  The date when the author started working for Allociné
  """
  startDate: DateTime

  """
  The date when the author stopped working for Allociné
  """
  endDate: DateTime

  """
  The avatar of the author
  """
  picture: InternalImage

  """
  The social User of the author
  """
  socialUser: User

  data: AuthorData

  stats: AuthorStats
}

"""
An Allociné User
"""
type User implements Node {
  """
  The id of the user
  """
  id: ID!

  """
  The internal id of the user
  """
  internalId: String

  """
  The legacy id of the user.
  """
  legacyId: String

  """
  The brand of the user.
  """
  brandId: String

  stringValue: String

  """
  The date when the user was created
  """
  creationDate: DateTime

  """
  The last date when the user was modified
  """
  modificationDate: DateTime

  """
  Whether or not the user is active
  """
  isActive: Boolean

  """
  The email of the user
  """
  email: String

  """
  The nickname of the user
  """
  nickname: String

  """
  An Allocine User Profile.
  """
  profile: Profile

  """
  The gender of the user.
  """
  gender: Gender

  """
  The user sharing preferences.
  """
  sharingPreferences: UserSharingPreferences

  """
  Some stats about user.
  """
  stats: UserStats

  """
  Social information for this user.
  """
  social: UserSocialInformation

  """
  User uploaded avatar URL.
  """
  avatar: String

  """
  User main avatar URL.
  """
  mainAvatar: String

  """
  True if the user belongs to club300.
  """
  isClub300Member: Boolean
}

"""
An Allocine User Profile.
"""
type Profile {
  """
  !!!!! DEPRECATED !!!!! Use mainAvatar instead.
  """
  avatar: String @deprecated(reason: "Use mainAvatar instead.")

  """
  The birth date of the user.
  """
  birthDate: DateLimited

  """
  Email has been validated by the user.
  """
  isEmailValidated: Boolean

  """
  Check if CGU are validated
  """
  isCguValidated: Boolean
}

type UserSharingPreferences {
  """
  Which activities from the user will be shared.
  """
  activities: [UserSharedActivityType]
}

"""
Activities available to be shared.
"""
enum UserSharedActivityType {
  """
  The user indicated he saw a video content.
  """
  SEE

  """
  The user rated a video content.
  """
  RATE

  """
  The user wrote a review about a video content.
  """
  REVIEW

  """
  The user provided an emotion related to a video content.
  """
  EMOTE

  """
  The user indicated he is following a series.
  """
  FOLLOW_SERIES

  """
  The user indicated he wants to see a video content.
  """
  WANT_TO_SEE

  """
  The user added, edited or deleted a collection.
  """
  COLLECTION
}

type UserStats {
  """
  The total reviews made by a user.
  """
  total_reviews: Int!

  """
  The total of subscribers for this user.
  """
  total_subscribers: Int!

  """
  The total of ratings for this user.
  """
  total_ratings: Int!
}

type UserSocialInformation {
  """
  List user collections
  """
  collections(after: String, "The amount of nodes to return." first: Int = 10, before: String, last: Int, "Id of one collection." id: String): UserCollectionConnection

  """
  List of user collections followed by the current user
  """
  followedCollections(after: String, "The amount of nodes to return." first: Int = 10, before: String, last: Int, "Ids of several collections to use as filters." ids: [ID!]): UserCollectionConnection

  """
  The registered theaters for this user.
  """
  theaters(after: String, "The amount of nodes to return." first: Int = 10, before: String, last: Int, "Id of one theater." internalId: String): TheaterConnection

  """
  Any entities related to this user.
  """
  relatedEntities: UserRelatedEntities

  """
  A list of entities suggested to this user.
  """
  suggestedEntities: UserSuggestedEntities

  """
  All user connections.
  """
  userConnections: UserConnections

  """
  Return a list of all user's actions.
  """
  actions(after: String, "The amount of news to display." first: Int = 10, before: String, last: Int, "If not provided, socials actions are sorted by creation date, the more recent first." order: [UserSocialActionSorting] = [LATEST], "A filter on social actions." action: [UserSocialActionType], "Filter on a user rating, on base 5." rating: ReviewRating, "Array of graphQL entity ids to filter. (Like Movie:1234, Series:1234, ... in base64 encoded)" entity: [String]): UserSocialActionConnection

  """
  Return a list of all user's followees actions.
  """
  followeesActions(after: String, "The amount of news to display." first: Int = 10, before: String, last: Int, "If not provided, socials actions are sorted by creation date, the more recent first." order: [UserSocialActionSorting] = [LATEST], "A filter on social actions." action: [UserSocialActionType], "Filter on a user rating, on base 5." rating: ReviewRating, "Array of graphQL entity ids to filter. (Like Movie:1234, Series:1234, ... in base64 encoded)" entity: [String], "Only includes actions that were written after this date." from: DateTime, "Only includes actions that were written before this date." to: DateTime): UserSocialActionConnection

  """
  Returns the followees average rating for the given entity
  """
  followeesAverageRating(base: Int = 10, "The entity id to filter. (Like Movie:1234, Series:1234, ... in base64 encoded)" entity: String!): Float

  """
  Returns a list of entities on which the user interacted.
  """
  entities(after: String, "The amount of entities to display." first: Int = 10, before: String, last: Int, "When not provided, socials actions are sorted in descending creation date order." order: [UserSocialActionSorting] = [LATEST], "A filter on social actions." action: [UserSocialActionType], "Filter on a user rating, on base 5." rating: ReviewRating, "Array of graphQL entity ids to filter. (Like Movie:1234, Series:1234, ... in base64 encoded)" entity: [String], "Array of graphQL entity types to filter." entityType: [NodeType]): UserEntityConnection

  """
  Returns a list of top active users that could be followed.
  """
  suggestedFollowees(after: String, "The amount of nodes to return." first: Int = 10, before: String, last: Int): UsersConnection
}

"""
A connection to a list of items.
"""
type UserCollectionConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [UserCollectionEdge]
}

"""
An edge in a connection.
"""
type UserCollectionEdge {
  """
  The item at the end of the edge.
  """
  node: UserCollection

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
a user collection of movies, series ...
"""
type UserCollection implements Node {
  """
  The collection id.
  """
  id: ID!

  """
  The collection internal id.
  """
  internalId: Int

  """
  The user owning the collection.
  """
  owner: User

  """
  The collection name.
  """
  name: String

  """
  The collection description.
  """
  description: String

  """
  The collection visibility.
  """
  public: Boolean

  """
  The date when the collection was created
  """
  createdAt: DateTime

  """
  The date when the collection was updated
  """
  updatedAt: DateTime

  """
  the number of series in the collection
  """
  seriesCount: Int

  """
  the number of movies in the collection
  """
  moviesCount: Int

  """
  number of users following current collection
  """
  followersCount: Int!

  """
  The entities of the current collection.
  """
  entities(after: String, "The amount of entities to display." first: Int = 10, before: String, last: Int, "The entity id." id: [String!]): UserEntityConnection @deprecated(reason: "From April 2020 on, this should be changed to UserEntityInterfaceConnection and entitiesWithInterface should be deprecated instead (see iOS adoption rates)")

  """
  The entities of the current collection.
  """
  entitiesWithInterface(after: String, "The amount of entities to display." first: Int = 10, before: String, last: Int, "The entity id." id: [String!]): UserEntityInterfaceConnection

  stringValue: String
}

"""
A connection to a list of items.
"""
type UserEntityConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [UserEntityEdge]
}

"""
An edge in a connection.
"""
type UserEntityEdge {
  """
  The item at the end of the edge.
  """
  node: UserEntityLeaf

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Returns an entity on which the user interacted.
"""
type UserEntityLeaf implements UserEntityLeafInterface {
  """
  The id of the UserEntityLeaf.
  """
  id: String

  """
  The related entity of the social action.
  """
  entity: Node

  """
  The user's Fan action on this entity.
  """
  fan: Fan

  """
  The user's NotInterested action on this entity.
  """
  notInterested: NotInterested

  """
  The user's opinion on this entity.
  """
  opinion: Opinion

  """
  The user's SeenIt action on this entity.
  """
  seenIt: SeenIt

  """
  The user's Subscribe action on this entity.
  """
  subscribe: Subscribe

  """
  The user's WantToSee action on this entity.
  """
  wantToSee: WantToSee

  """
  The user's Helpful action on this entity.
  """
  helpful: Helpful

  """
  The user's Unhelpful action on this entity.
  """
  unhelpful: Unhelpful

  """
  The list of social actions for this user and this entity.
  """
  actionList: [SocialActionInterface]
}

"""
An entity on which the user interacted.
"""
interface UserEntityLeafInterface {
  """
  The id of the UserEntityLeaf.
  """
  id: String

  """
  The related entity of the social action.
  """
  entity: Node

  """
  The user's Fan action on this entity.
  """
  fan: Fan

  """
  The user's NotInterested action on this entity.
  """
  notInterested: NotInterested

  """
  The user's opinion on this entity.
  """
  opinion: Opinion

  """
  The user's SeenIt action on this entity.
  """
  seenIt: SeenIt

  """
  The user's Subscribe action on this entity.
  """
  subscribe: Subscribe

  """
  The user's WantToSee action on this entity.
  """
  wantToSee: WantToSee

  """
  The user's Helpful action on this entity.
  """
  helpful: Helpful

  """
  The user's Unhelpful action on this entity.
  """
  unhelpful: Unhelpful

  """
  The list of social actions for this user and this entity.
  """
  actionList: [SocialActionInterface]
}

"""
A social action done by a user.
"""
type Fan implements SocialActionInterface {
  """
  The id of the social action.
  """
  id: ID!

  """
  The internal id of the social action.
  """
  internalId: Int

  stringValue: String

  """
  The date this action was submitted at first.
  """
  createdAt: DateTime

  """
  The date this action was updated.
  """
  updatedAt: DateTime

  """
  The related entity of the social action.
  """
  relatedEntity: Node
}

"""
Fetches a social action given its ID
"""
interface SocialActionInterface {
  id: ID!

  stringValue: String

  """
  The date this action was submitted at first.
  """
  createdAt: DateTime

  """
  The date this action was updated.
  """
  updatedAt: DateTime

  """
  The related entity of the social action.
  """
  relatedEntity: Node
}

"""
A social action done by a user.
"""
type NotInterested implements SocialActionInterface {
  """
  The id of the social action.
  """
  id: ID!

  """
  The internal id of the social action.
  """
  internalId: Int

  stringValue: String

  """
  The date this action was submitted at first.
  """
  createdAt: DateTime

  """
  The date this action was updated.
  """
  updatedAt: DateTime

  """
  The related entity of the social action.
  """
  relatedEntity: Node
}

"""
A opinion done by a user.
"""
type Opinion implements SocialActionInterface {
  """
  The id of the social action.
  """
  id: ID!

  """
  The internal id of the social action.
  """
  internalId: Int

  stringValue: String

  """
  The date this action was submitted at first.
  """
  createdAt: DateTime

  """
  The date this action was updated.
  """
  updatedAt: DateTime

  """
  The related entity of the social action.
  """
  relatedEntity: Node

  """
  An Allociné user review.
  """
  content: OpinionReview
}

"""
A review done by a user.
"""
type OpinionReview {
  """
  The content of the review.
  """
  review: String

  """
  The status of the review.
  """
  status: ReviewStatus

  """
  The date when the review was submitted at first.
  """
  createdAt: DateTime

  """
  The date when the review was updated.
  """
  updatedAt: DateTime

  """
  The rating, out of 10 by default, given by the user.
  """
  rating(base: Int = 10): Float

  """
  If this opinion contains a review, this field give the number of users whom find this review helpful.
  """
  helpfulCount: Int

  """
  If this opinion contains a review, this field give the number of users whom find this review unhelpful.
  """
  unhelpfulCount: Int
}

"""
Status of a review.
"""
enum ReviewStatus {
  ACCEPTED

  BEING_CHECKED

  BLOCKED

  DENIED

  MUST_BE_CHECKED

  PENDING

  PUBLISHED

  REPORTED
}

"""
A social action done by a user.
"""
type SeenIt implements SocialActionInterface {
  """
  The id of the social action.
  """
  id: ID!

  """
  The internal id of the social action.
  """
  internalId: Int

  stringValue: String

  """
  The date this action was submitted at first.
  """
  createdAt: DateTime

  """
  The date this action was updated.
  """
  updatedAt: DateTime

  """
  The related entity of the social action.
  """
  relatedEntity: Node
}

"""
A social action done by a user.
"""
type Subscribe implements SocialActionInterface {
  """
  The id of the social action.
  """
  id: ID!

  """
  The internal id of the social action.
  """
  internalId: Int

  stringValue: String

  """
  The date this action was submitted at first.
  """
  createdAt: DateTime

  """
  The date this action was updated.
  """
  updatedAt: DateTime

  """
  The related entity of the social action.
  """
  relatedEntity: Node
}

"""
A social action done by a user.
"""
type WantToSee implements SocialActionInterface {
  """
  The id of the social action.
  """
  id: ID!

  """
  The internal id of the social action.
  """
  internalId: Int

  stringValue: String

  """
  The date this action was submitted at first.
  """
  createdAt: DateTime

  """
  The date this action was updated.
  """
  updatedAt: DateTime

  """
  The related entity of the social action.
  """
  relatedEntity: Node
}

"""
A social action done by a user.
"""
type Helpful implements SocialActionInterface {
  """
  The id of the social action.
  """
  id: ID!

  """
  The internal id of the social action.
  """
  internalId: Int

  stringValue: String

  """
  The date this action was submitted at first.
  """
  createdAt: DateTime

  """
  The date this action was updated.
  """
  updatedAt: DateTime

  """
  The related entity of the social action.
  """
  relatedEntity: Node
}

"""
A social action done by a user.
"""
type Unhelpful implements SocialActionInterface {
  """
  The id of the social action.
  """
  id: ID!

  """
  The internal id of the social action.
  """
  internalId: Int

  stringValue: String

  """
  The date this action was submitted at first.
  """
  createdAt: DateTime

  """
  The date this action was updated.
  """
  updatedAt: DateTime

  """
  The related entity of the social action.
  """
  relatedEntity: Node
}

"""
A connection to a list of items.
"""
type UserEntityInterfaceConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [UserEntityInterfaceEdge]
}

"""
An edge in a connection.
"""
type UserEntityInterfaceEdge {
  """
  The item at the end of the edge.
  """
  node: UserEntityLeafInterface

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A connection to a list of items.
"""
type TheaterConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [TheaterEdge]
}

"""
An edge in a connection.
"""
type TheaterEdge {
  """
  The item at the end of the edge.
  """
  node: Theater

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné theater.
"""
type Theater implements Node {
  """
  The id of the theater.
  """
  id: ID!

  """
  The internal id of the theater.
  """
  internalId: String

  """
  The name of the theater.
  """
  name: String

  """
  The timezone of the theater.
  """
  timezone: String

  """
  The cover of the theater.
  """
  cover: InternalImage

  stringValue: String

  """
  The theater's screens.
  """
  screens: [TheaterScreen]

  url: String

  urlShowtimes: String

  urlShowtimesAlternate: String

  email: String

  phone: String

  description("The description's locale" locale: Locales!): String

  """
  The address of the theater.
  """
  location: Location

  """
  The coordinates of the theater.
  """
  coordinates: Coordinates

  """
  The circuit of the theater.
  """
  theaterCircuits: Company

  """
  The different groups that theater has been related.
  """
  groups: [Group]

  """
  All company link to the theater.
  """
  companies: [EntityCompany]

  """
  The country of the theater.
  """
  country: Country

  """
  The number of screens in the theater.
  """
  screenNumber: Int

  """
  The number of seat in the theater.
  """
  seatNumber: Int

  """
  The comforts available in theater
  """
  comfort: [Comfort]

  """
  !!! WARNING - The data in this endpoint are sensible and not accurate. You should not use them as long as this warning is present !!! The services available in theater
  """
  service: [TheaterService]

  """
  The experience available in theater
  """
  experience: [Experience]

  """
  The projection available in theater
  """
  projection: [Projection]

  """
  The sounds available in theater
  """
  sound: [Sound]

  """
  The tags of the theater
  """
  tags: TagCollection

  """
  The list of loyalty cards accepted in this theater.
  """
  loyaltyCards: [LoyaltyCard]

  """
  The list of fares available in this theater.
  """
  fares: [TheaterFare]

  """
  The image of the theater.
  """
  poster: InternalImage

  """
  The list of the images for this theater.
  """
  images("The amount of images to return." first: Int = 10, "The order of the images to return. If none provided the \"CMS_RANK\" order is used." order: [EntityImageSorting] = [RANK]): [InternalImage]

  """
  The theater feeds.
  """
  feeds: [TheaterFeeds]

  """
  A list of public transportations which can be used to reach the theater.
  """
  transportations: Transportations

  """
  Show all showtimes dates for this theater.
  """
  showtimesDates("If provided, will only display date for those countries." country: [CountryCode], "Showtimes starting before this value won't be displayed. Default value is today." from: DateTime, "Showtimes starting after this value won't be displayed. Default value is tomorrow." to: DateTime, "If provided, will only display date with showtimes by the selected experiences." experience: [Experience], "If provided, will only display date with showtimes by the selected projections formats." projection: [Projection], "If provided, will only display date with showtimes by the selected diffusion version." version: [ShowtimeVersion], "The comforts available in theater" comfort: [Comfort], "The picture of the theater" picture: [Picture], "The sound of the theater" sound: [Sound], "!!! WARNING - The data in this endpoint are sensible and not accurate. You should not use them as long as this warning is present !!! The services available in theater" service: [TheaterService], "True if the theater has a list of movie that will be displayed on the following weeks (maximum 3 months)." hasFutureReleaseSoon: Boolean, "!!!!! DEPRECATED !!!!! Use experience filter instead." techno: [TechnoFlag], "!!!!! DEPRECATED !!!!! Use projection filter instead." format: [ProjectionFormat]): [String]

  """
  Show the closest restaurants to this theater.
  """
  closestRestaurants: [TheaterClosestRestaurants]

  """
  Show information if the theater has a temporary closure and reason.
  """
  temporaryClosure: TheaterTemporaryClosureType

  """
  Technical flags about theater to have rapid information.
  """
  flags: TheaterFlags

  """
  True if theater has showtimes.
  """
  hasPreview: Boolean @deprecated(reason: "Use flags.hasPreview instead")
}

"""
An Allociné theater screen.
"""
type TheaterScreen implements Node {
  """
  The id of the theater screen.
  """
  id: ID!

  """
  The internal id of the screen.
  """
  internalId: String

  """
  The name of the theater screen.
  """
  name: String

  """
  The number of seats available in showtime room.
  """
  seatCount: Int

  """
  True if a handicap access is available.
  """
  handicapAccess: Boolean

  stringValue: String

  """
  The accessibilities available for this screen
  """
  accessibility: [Accessibility]

  """
  The comforts available for this screen
  """
  comfort: [Comfort]

  """
  !!! WARNING - The data in this endpoint are sensible and not accurate. You should not use them as long as this warning is present !!! The services available for this screen
  """
  service: [TheaterService]

  """
  The experience available for this screen
  """
  experience: [Experience]

  """
  The projection available for this screen
  """
  projection: [Projection]

  """
  The sound available for this screen
  """
  sound: [Sound]

  """
  The picture available for this screen
  """
  picture: [Picture]

  """
  The list of loyalty cards accepted in this theater.
  """
  loyaltyCards: [LoyaltyCard]
}

"""
All accessibilities available in theater, showtime or screen.
"""
enum Accessibility {
  ACCESSIBLE

  ASSISTED_LISTENING

  AUDIO_DESCRIPTION

  CLOSED_CAPTION

  HEARING_IMPAIRED

  INACCESSIBLE

  OPEN_CAPTION

  SENSORY_FRIENDLY

  SUBTITLED

  AUDIO_LOOP_CINEMA

  AUDIO_LOOP_PATRON

  TWAVOX

  FIDELIO

  DOLBY_ACCESSIBILITY

  SONY_ACCESSIBILITY

  SENNHEISER_ACCESSIBILITY

  CINE_CONNECT_SENNHEISER_ACCESSIBILITY

  LISTEN_EVERYWHERE

  GRETA

  AUTISM_FRIENDLY
}

"""
All comfort available in theater, showtime or screen.
"""
enum Comfort {
  AIR_CONDITIONING

  CUDDLE_SEATING

  ELECTRIC_RECLINER_SEATS

  LUXURY_SEATS

  RECLINERS

  RESERVED_SEATING

  STADIUM_SEATING
}

"""
All services.
"""
enum TheaterService {
  AUTISM

  DISABLED_ACCESS

  CANDY_STORE

  THEATER_RESTAURANT
}

"""
All experiences available in theater, showtime or screen.
"""
enum Experience {
  E_4DX

  BUTT_KICKER

  DBOX

  DOLBY_ATMOS

  ATMOS_EXPERIENCE

  DOLBY_CINEMA

  ECLAIR_COLOR

  ICE

  JUMBO

  LIGHT_VIBES

  MX4D

  PLATINUM

  PREMIUM

  PLF

  SCREEN_X

  TRADITIONAL_AUDITORIUM

  TREMOR_FX

  E_4D_EMOTION
}

"""
All projections formats.
"""
enum Projection {
  F_2D

  F_3D

  F_4K

  F_3D70MM

  F_35MM

  F_70MM

  F_4K3D

  F_ATMOS

  ANALOG

  REALD_3D

  DIGITAL

  IMAX

  IMAX_3D

  IMAX_70MM

  HFR

  F_3DHFR

  IMAX_3D_HFR
}

"""
All sound formats.
"""
enum Sound {
  ATMOS

  AURO

  DUBBED

  THX

  S_51

  S_71

  DOLBY_71

  MULTI_CHANNEL_SOUND
}

"""
All picture formats.
"""
enum Picture {
  P_70MM

  REAL_D

  LASER
}

"""
All loyalty cards.
"""
enum LoyaltyCard {
  CCU

  CINE_CARTE_CIP

  CINECHEQUE

  LE_PASS

  CINEPASS

  UGC_ILLIMITE
}

enum Locales {
  en_AU

  en_CA

  es_ES

  en_GB

  es_MX

  en_NZ

  en_US

  de_DE

  fr_CA

  fr_FR

  pt_BR

  tr_TR
}

"""
A location object defined by it full address.
"""
type Location {
  """
  The number & street of the address.
  """
  address: String

  """
  The zip of the address.
  """
  zip: String

  """
  The city of the address.
  """
  city: String

  """
  The country of the address.
  """
  country: String

  """
  The region of the address.
  """
  region: String

  """
  The theater localizations ordered by path (City/County/Country/).
  """
  localizations("If provided, return only the first X localizations." first: Int = 10, "The id of the localization. (Localization:1234 in base64 encoded)" id: String, "The internal id of the localization." internalId: Int, "If provided, will only display localization filtered by type." type: [LocalizationTypeValue], order: [LocalizationSortingLight] = [REVERSE_PARENT_NUMBER]): [Localization]
}

enum LocalizationTypeValue {
  AREA

  BOROUGH

  COUNTRY

  COUNTY

  LOCALAREA

  REGION
}

"""
Sorting criteria for localizations
"""
enum LocalizationSortingLight {
  """
  No sort is applied.
  """
  NONE

  """
  Sorted by localization name in alphabetical order.
  """
  ALPHABETICAL

  """
  Sort by number of theaters linked to the localization ascendant.
  """
  THEATER_COUNT

  """
  Sort by number of theaters linked to the localization descendant.
  """
  REVERSE_THEATER_COUNT

  """
  Sort by number of parent localization ascendant.
  """
  PARENT_NUMBER

  """
  Sort by number of parent localization ascendant.
  """
  REVERSE_PARENT_NUMBER

  """
  Sort ascendant by number of screen attached to the localization's theaters.
  """
  SCREEN_COUNT

  """
  Sort descendant by number of screen attached to the localization's theaters.
  """
  REVERSE_SCREEN_COUNT
}

"""
The localization object.
"""
type Localization {
  """
  The localization id.
  """
  id: ID!

  """
  The localization internal id.
  """
  internalId: Int

  """
  The localization name.
  """
  name: String

  """
  The localization path.
  """
  path: [Int]

  """
  The localization code.
  """
  code: String

  """
  The localization type.
  """
  type: LocalizationTypeValue

  """
  The parents localizations ordered by path (City/County/Country/).
  """
  parentsLocalization("If provided, return only the first X localizations." first: Int = 10, "The id of the localization. (Localization:1234 in base64 encoded)" id: String, "The internal id of the localization." internalId: Int, "If provided, will only display localization filtered by type." type: [LocalizationTypeValue], order: [LocalizationSortingLight] = [REVERSE_PARENT_NUMBER], "If provided, will filter list of localization if they have theaters or not." hasTheater: Boolean, "If provided, will filter localization list parent which is not of the specified type." excludeParentType: [LocalizationTypeValue]): [Localization]

  """
  The children localizations ordered by path (City/County/Country/).
  """
  childrenLocalization(after: String, "If provided, return only the first X localizations." first: Int = 10, before: String, last: Int, "The id of the localization. (Localization:1234 in base64 encoded)" id: String, "The internal id of the localization." internalId: Int, "If provided, will only display localization filtered by type." type: [LocalizationTypeValue], order: [LocalizationSortingLight] = [REVERSE_PARENT_NUMBER], "If provided, will filter list of localization if they have theaters or not." hasTheater: Boolean, "If provided, will filter localization list parent which is not of the specified type." excludeParentType: [LocalizationTypeValue]): localizationConnection

  """
  The coordinates of the localization.
  """
  coordinates: Coordinates

  """
  Return a list of theaters.
  """
  theaters(after: String, "The amount of theaters to display." first: Int = 10, before: String, last: Int, "Defines how to order theaters." order: [TheaterSortingLight], "If provided, will only show the theaters that have some showtimes for the specified movie." movie: String, "### Use nextProductSlidingWeeks instead ### If true, will filter the movie argument so it fetches only the movies that will be display in the next sliding weeks defined by the product." nextTwoSlidingWeeks: Boolean = false, "If true, will filter the movie argument so it fetches only the movies that will be display in the next sliding weeks defined by the product." nextProductSlidingWeeks: Boolean = false): TheaterConnection
}

"""
A connection to a list of items.
"""
type localizationConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [localizationEdge]
}

"""
An edge in a connection.
"""
type localizationEdge {
  """
  The item at the end of the edge.
  """
  node: Localization

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type Coordinates {
  latitude: Float!

  longitude: Float!

  """
  The distance between the coordinates and the from argument.
  """
  distance("The point to calculate the distance." from: CoordinateType, "The value for distance unit(km or mi)." unit: String): Float
}

"""
Sorting criteria for theaters
"""
enum TheaterSortingLight {
  """
  Theaters sorted by name in alphabetical order.
  """
  ALPHABETICAL

  """
  Theaters sorted by name in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Sort theaters by screen count ascendant.
  """
  SCREEN_COUNT

  """
  Sort theaters by screen count descendant.
  """
  REVERSE_SCREEN_COUNT

  """
  Sort theater by daily stats desc.
  """
  DAILY_STATS

  """
  Sort theater by weekly stats desc.
  """
  WEEKLY_STATS

  """
  Sort theater by monthly stats desc.
  """
  MONTHLY_STATS

  """
  Sort theater by all time stats desc.
  """
  ALL_TIME_STATS
}

"""
An Allociné company.
"""
type Company implements Node {
  """
  The id of the company.
  """
  id: ID!

  """
  The internal id of the company.
  """
  internalId: Int

  """
  The name of the company.
  """
  name: String

  stringValue: String

  """
  The localized description of the company.
  """
  description: String

  """
  The country of the company.
  """
  country: Country

  """
  The image of the company.
  """
  poster: InternalImage

  """
  The tags of the company.
  """
  tags: TagCollection

  legacyId: [String]

  """
  Differents fields for seo purposes.
  """
  seo: Seo

  """
  Return a list of theaters if the company is a theater's network.
  """
  theaters(after: String, "The amount of theaters to display." first: Int = 10, before: String, last: Int, "Defines how to order theaters." order: [TheaterSortingLight]): TheaterConnection

  """
  The list of the press reviews of this Company.
  """
  pressReviews(after: String, "The amount of reviews to return." first: Int = 10, before: String, last: Int, "Defines how to order reviews." order: [PressReviewsOrder!] = [CREATED_AT], "Filters the reviews based on their type." type: [NodeTypePressReviews!]): pressReviewsConnection

  """
  The activities of the company.
  """
  activities: CompanyActivitiesCollection
}

"""
Sorting reviews
"""
enum PressReviewsOrder {
  """
  Reviews ordered by creation_date desc.
  """
  CREATED_AT

  """
  Reviews ordered by creation_date asc.
  """
  REVERSE_CREATED_AT

  """
  Reviews ordered by rating desc.
  """
  NOTE

  """
  Reviews ordered by rating asc.
  """
  REVERSE_NOTE

  """
  Reviews ordered by company name asc.
  """
  COMPANY_NAME

  """
  Reviews ordered by company name desc.
  """
  REVERSE_COMPANY_NAME
}

enum NodeTypePressReviews {
  MOVIE

  SERIES
}

"""
A connection to a list of items.
"""
type pressReviewsConnection {
  totalCount: Int

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [pressReviewsEdge]
}

"""
An edge in a connection.
"""
type pressReviewsEdge {
  """
  The item at the end of the edge.
  """
  node: PressReview

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné press review.
"""
type PressReview implements Node {
  """
  The id of the press review.
  """
  id: ID!

  """
  The internal id of the press review.
  """
  internalId: Int

  """
  The company to which the press review is related to.
  """
  company: Company

  """
  The author name of the press review.
  """
  authorName: String

  """
  The short body text of the press review.
  """
  shortBody: String

  stringValue: String

  """
  The body text of the press review.
  """
  body: String

  """
  The body of the press review on json format.
  """
  body_json: BodyJson

  """
  The rating of the press review.
  """
  rating: Rating

  """
  The URL of the press review.
  """
  url: String

  """
  The related entity of the review (Series or Movie)
  """
  relatedEntity: Node
}

scalar Rating

"""
A collection of activities.
"""
type CompanyActivitiesCollection {
  """
  The list of the activities which are in this collection.
  """
  list: [CompanyActivity!]
}

enum CompanyActivity {
  AGENTS

  ANIMATION_STUDIO

  CO_PRODUCTION

  DIGITAL_EFFECTS

  DISTRIBUTION_COMPANIES

  DISTRIBUTION_COORDINATION

  EXECUTIVE_PRODUCER_COMPANIES

  FILM_EXHIBITOR

  FOREIGN_DISTRIBUTOR

  FRENCH_DISRIBUTOR

  INTERNATIONAL_DISTRIBUTION_EXPORTS

  MUSICAL_SUPERVISOR_COMPANIES

  NETWORK_SERVICE_PROVIDER

  POST_PRODUCTION

  PR_AGENCY

  PRODUCTION

  SOUND_EDITOR_COMPANIES

  SPECIAL_EFFECTS_COMPANIES

  TV_CHANNEL

  VISUAL_EFFECTS

  VIDEO_PROVIDER

  PROVIDER_SVOD

  PROVIDER_VOD

  PROVIDER_DVD

  PROVIDER_REPLAY
}

"""
A group.
"""
type Group {
  """
  The group id.
  """
  id: ID!

  """
  The group internal id.
  """
  internalId: Int

  """
  The group name.
  """
  name: String

  """
  The group path.
  """
  path: [Int]

  """
  Related theaters in the group.
  """
  theaters(after: String, "The amount of theaters to display." first: Int = 10, before: String, last: Int): TheaterConnection

  """
  The parents group ordered by path length.
  """
  parents: [LinkedGroup]

  """
  Return list of children theater group ordered by path length and rank.
  """
  children(after: String, "The amount of groups to display." first: Int = 10, before: String, last: Int, "If provided, will show groups with or not parents." hasParent: Boolean, "If provided, will show groups with or not children." hasChildren: Boolean, order: [TheaterGroupSorting] = [ALPHABETICAL]): groupConnection
}

"""
A parent group.
"""
type LinkedGroup {
  """
  The group id.
  """
  id: ID!

  """
  The group internal id.
  """
  internalId: Int

  """
  The group name.
  """
  name: String

  """
  The group path.
  """
  path: [Int]

  """
  Related theaters in the group.
  """
  theaters(after: String, "The amount of theaters to display." first: Int = 10, before: String, last: Int): TheaterConnection
}

"""
Sorting criteria for theaters group list.
"""
enum TheaterGroupSorting {
  """
  Theaters group sorted by name in alphabetical order.
  """
  ALPHABETICAL

  """
  Theaters group sorted by name in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL
}

"""
A connection to a list of items.
"""
type groupConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [groupEdge]
}

"""
An edge in a connection.
"""
type groupEdge {
  """
  The item at the end of the edge.
  """
  node: Group

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné relation between an entity and a company.
"""
type EntityCompany {
  """
  The activity of the company.
  """
  activity: String

  """
  The company.
  """
  company: Company
}

"""
The fares available in a theater.
"""
type TheaterFare {
  """
  The name of the fare.
  """
  name: String

  """
  A comment about the fare.
  """
  comment: String

  """
  The price list for this fare.
  """
  prices: [TheaterFarePrice]

  """
  The internal id of the fare.
  """
  internalId: String
}

"""
The prices for a given fare.
"""
type TheaterFarePrice {
  """
  The raw price value.
  """
  price: String

  """
  The currency code for this price.
  """
  currency: String

  """
  The price formatted for the current locale.
  """
  displayPrice: String

  """
  The theater screens this price is valid for.
  """
  screens: [TheaterScreen]
}

"""
A theater feed.
"""
type TheaterFeeds {
  """
  The feed's id.
  """
  id: Int

  """
  The feed's title.
  """
  title: String

  """
  The feed's body.
  """
  body: String

  """
  The image of the feed.
  """
  poster: InternalImage

  """
  The feed starting date.
  """
  startsAt: DateTime

  """
  The feed ending date.
  """
  endsAt: DateTime

  """
  The feed display start date
  """
  startsDisplayAt: DateTime

  """
  The feed display end date
  """
  endsDisplayAt: DateTime

  """
  The feed type.
  """
  type: TheaterFeedTypeEnum
}

enum TheaterFeedTypeEnum {
  CONCERT

  CYCLE

  EXHIBITION

  LATE_NIGHT_SCREENING

  PREVIEW

  PREVIEWWITHMOVIETEAM

  SPECIALOFFER

  VARIOUS
}

"""
The different transportation available in a list.
"""
type Transportations {
  list("Filter transportation list by type." type: TransportationTypeEnum): [TransportationStopType]
}

enum TransportationTypeEnum {
  BUS

  METRO

  RAPIDTRANSIT

  TRAMWAY

  LOCALTRAIN

  COACH

  FERRY

  TRAIN

  RAILSHUTTLE
}

"""
A transportation stop.
"""
type TransportationStopType {
  """
  The transportation stop type.
  """
  type: TransportationTypeEnum

  """
  The transportation stop name.
  """
  name: String

  """
  The lines stopped at transportation.
  """
  lines: [TransportationLineType]
}

"""
A transportation line.
"""
type TransportationLineType {
  """
  The line name.
  """
  label: String

  """
  The line logo style.
  """
  style: TransportationStyleType

  """
  The distance with the theater.
  """
  distance: Float

  """
  The line coordinates.
  """
  coordinates: Coordinates
}

"""
The line style declaration.
"""
type TransportationStyleType {
  """
  The color in hex.
  """
  color: String

  """
  The background color in hex.
  """
  background: String
}

"""
The available showtime diffusion version.
"""
enum ShowtimeVersion {
  """
  The showtime has the same language than the movie and the country.
  """
  LOCAL

  """
  The showtime has the same language than the movie but not the country.
  """
  ORIGINAL

  """
  The showtime has not the same language than the movie.
  """
  DUBBED
}

"""
All projections techno flags.
"""
enum TechnoFlag {
  ATMOS

  ICE

  T_4DX

  LIGHT_VIBES

  ECLAIR_COLOR

  DOLBY_CINEMA
}

"""
All projections formats.
"""
enum ProjectionFormat {
  F_2D

  F_3D

  F_4K

  F_70MM

  ANALOG

  DIGITAL

  IMAX

  IMAX3D

  IMAX70MM

  F_35MM

  ATMOS

  REALD3D
}

"""
The closest restaurants for a given theater.
"""
type TheaterClosestRestaurants {
  """
  The id of the restaurant.
  """
  id: ID!

  """
  The code of the restaurant.
  """
  code: String

  """
  The name of the restaurant.
  """
  name: String

  """
  The mobile URL of the restaurant.
  """
  mobileUrl: String

  """
  The deep link of the restaurant.
  """
  deepLink: String

  """
  The reference of the restaurant.
  """
  reference: Int

  """
  The opening hours of the restaurant.
  """
  openingHours: [OpeningHours]

  """
  The coordinates of the restaurant.
  """
  coordinates: Coordinates

  """
  The address of the restaurant.
  """
  localization: Location
}

type OpeningHours {
  day: Int

  beginHour: String

  endHour: String
}

"""
Show information if the theater has a temporary closure and reason.
"""
type TheaterTemporaryClosureType {
  """
  The temporary closure started date.
  """
  startsAt: DateTime

  """
  The temporary closure ended date.
  """
  endsAt: DateTime

  """
  The reason of temporary closure.
  """
  message: String
}

"""
Technical flags about theater to have rapid information.
"""
type TheaterFlags {
  """
  True if the theater has showtime with url ticketing.
  """
  hasBooking: Boolean

  """
  True if the theater display movie before his outing day.
  """
  hasPreview: Boolean

  """
  Contains the number of previews for the theater.
  """
  previewCount: Int

  """
  True if the theater has a list of movie that will be displayed on the following weeks (maximum 3 months).
  """
  hasFutureReleaseSoon: Boolean

  """
  True if the theater has some events on the planning.
  """
  hasFeed: Boolean

  """
  True if the theater has some showtimes with some prices.
  """
  hasPrice: Boolean

  """
  Contains the number of movies displayed in the theater this week.
  """
  moviesDisplayedWeekCount: Int

  """
  Contains the number of movies displayed in the theater this next week.
  """
  moviesDisplayedNextWeekCount: Int
}

type UserRelatedEntities {
  """
  Returns a list of series on which the user interacted.
  """
  series(after: String, "The amount of nodes to return." first: Int = 20, before: String, last: Int, "When not provided, socials actions are sorted in descending last update date order." order: [UserSocialActionSorting] = [LATEST], "series status." status: [RelatedSeriesStatus!]!, "Id of one series." id: String, "Filter on a user rating, on base 5." rating: SeriesReviewRating): UserSeriesConnection

  """
  Returns a list of movies on which the user interacted.
  """
  movies(after: String, "The amount of entities to display." first: Int = 10, before: String, last: Int, "When not provided, socials actions are sorted in descending creation date order." order: [UserSocialActionSorting] = [LATEST], "A filter on social actions." action: [UserSocialActionType], "Filter on a user rating, on base 5." rating: ReviewRating, "Array of graphQL entity ids to filter. (Like Movie:1234, Series:1234, ... in base64 encoded)" entity: [String], "Array of graphQL entity types to filter." entityType: [NodeType], "A filter on social actions that have not yet been done." notAction: [UserSocialActionType], "A filter on Movie that have already been released." alreadyReleased: Boolean = false, "Array of movie release types." movieReleaseType: [CustomReleaseType], "movie status." status: [MovieStatus]): UserMovieConnection

  """
  Returns a list of reviews on which the user interacted, eventually filtered on a type.
  """
  reviews(after: String, "The amount of nodes to return." first: Int = 20, before: String, last: Int, "When not provided, socials actions are sorted in descending last update date order." order: [UserSocialActionSorting] = [LATEST], "Filter on a user rating, on base 5." rating: ReviewRating, "Array of graphQL entity types to filter." entityType: [NodeType], "Array of graphQL entity ids to filter. (Like Movie:1234, Series:1234, ... in base64 encoded)" entity: [String], "A filter on reviews statuses" statuses: [ReviewStatus], "A filter on Movie or Series that have already been released." alreadyReleased: Boolean = false): UserEntityConnection

  """
  The top movies not impacted by given social actions of the current user.
  """
  unratedTopMovies(after: String, "The amount of movies to display" first: Int = 10, before: String, last: Int, "When provided, will only select movies that have at least one of the given genres." genres: [Genre], "When provided, will only select movies not having at least one of the given genres." excludeGenres: [Genre], "When provided, will only select movies that have at least one of the given countries." countries: [CountryCode], "If provided, will only select movies that have at least one showtime in the given localization." localization: Int, "When not provided, movies are sorted in alphabetical order." order: [MovieSorting] = [ALPHABETICAL], "When provided, will only select movies that were released in the US after this date." releaseFromUs: DateTime, "When provided, will only select movies that were released in the US before this date." releaseToUs: DateTime, "When provided, will only select movies that were released after this date." releaseFrom: DateTime, "When provided, will only select movies that were released before this date." releaseTo: DateTime, "!!! DEPRECATED (Use the releaseMaterialType filter instead) !!! When provided, the releaseFrom and releaseTo filters will be applied on the related release date type." releaseDateType: MovieReleaseDateFilterType, "Filter movies by releases features." releaseFilter: ReleaseFilterType, "Filter movies by a visa number." visaNumber: [String!], "When provided, will only select movies that were produced this year." productionYear: [Int], "When provided, will only select movies that were produced this decade. Must always be a multiple of 10." productionDecade: [Int], "When provided, will only select movies with editorial rating between selected values." editorialRating: FilterRangeRating, "When provided, will only select movies with press rating between selected values." pressRating: FilterRangeRating, "When provided, will only select movies with user rating between selected values." scoreRating: FilterRangeRating, "When provided, will only select movies with editorial rating counter between selected values." editorialRatingCounter: FilterRangeRatingCounter, "When provided, will only select movies with press rating counter between selected values." pressRatingCounter: FilterRangeRatingCounter, "When provided, will only select movies with user rating counter between selected values." scoreRatingCounter: FilterRangeRatingCounter, "When provided, will only select movies that have at least the given amount of theaters during the current week." minTheaters: Int, "### DEPRECATED Use minTheatersProductFloatingWeeks instead ### When provided, will only select movies that have at least the given amount of theaters during the next floating weeks defined by the product." minTheatersTwoFloatingWeeks: Int, "When provided, will only select movies that have at least the given amount of theaters during the next floating weeks defined by the product." minTheatersProductFloatingWeeks: Int, "When provided, will only select movies with a given movie type." type: [MovieType], "When provided, will only select movies not having at least one of the given types." excludeTypes: [MovieType], "A special filter is a particular selection of movies. It only works with the order and pagination arguments.\n                                  Other arguments are not supported and will generate an error." specialFilter: MovieSpecialFilter, "A list of ids to be excluded from the search." exclude: [Int], "A list of ids to be included in the search" include: [Int], "Filter movie list with flags" flags: MovieFlagsType, "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType], "When provided, will only select movies that were updated after this date." lastUpdated: DateTime, "When provided, will only select movies that are linked to one of the companies ids." companies: [Int!], "When provided, will only select movies that have a company with the selected activity linked to it." activities: [CompanyActivity!], "When provided, will return only the movies linked to all specified tags." tag: [Int!], "Does the movie has an advice for children audience ?" forChildren: Boolean, "When provided, return only movies available on these providers." svodProviders: [SvodProviders!], "Filter movie list by release flag." svodFlags: [SvodFlags!], "Filter movies by release flag" releaseFlags: [BaseReleaseType!], "Filter movies matching all physical product flags given" physicalFlags: [PhysicalProductType!], "If true will only filter browsable movies" browsableOnly: Boolean = true, "A filter on social actions." action: [UserSocialActionType] = [OPINION]): moviesConnection
}

"""
Sorting criteria for social actions
"""
enum UserSocialActionSorting {
  """
  Social actions are sorted by creation date.
  """
  LATEST

  """
  Social actions are sorted by rating ascending.
  """
  RATING_ASC

  """
  Social actions are sorted by rating descending.
  """
  RATING_DESC

  """
  Social actions are sorted by popularity ascending.
  """
  MONTHLY_POPULARITY_ASC

  """
  Social actions are sorted by popularity descending.
  """
  MONTHLY_POPULARITY_DESC

  """
  Movies sorted by their release dates, most recent releases first.
  """
  LATEST_RELEASES

  """
  Movies sorted by their release dates, oldest releases first.
  """
  OLDEST_RELEASES

  """
  Shows the reviews that were the most helpful.
  """
  MOST_HELPFUL
}

"""
User series status.
"""
enum RelatedSeriesStatus {
  WANT_TO_SEE

  SEEN

  FOLLOWED

  NOT_REVIEWED

  NOT_INTERESTED

  HAVING_PROGRESSION

  """
  Series having a rating on series level
  """
  RATING

  """
  Series having a rating on series or season level
  """
  RATING_ON_SERIES_AND_SEASONS
}

"""
Filter series users reviews by one rating.
"""
enum SeriesReviewRating {
  """
  Only show reviews for rating equals to 0.5 (O can't be submit).
  """
  ZERO

  """
  Only show reviews for rating equals to 1 or 1.5.
  """
  ONE

  """
  Only show reviews for rating equals to 2 or 2.5.
  """
  TWO

  """
  Only show reviews for rating equals to 3 or 3.5.
  """
  THREE

  """
  Only show reviews for rating equals to 4 or 4.5.
  """
  FOUR

  """
  Only show reviews for rating equals to 5.
  """
  FIVE

  """
  Only show series without rating.
  """
  NONE
}

"""
A connection to a list of items.
"""
type UserSeriesConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [UserSeriesEdge]
}

"""
An edge in a connection.
"""
type UserSeriesEdge {
  """
  The item at the end of the edge.
  """
  node: UserSeriesLeaf

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Returns a series on which the user interacted.
"""
type UserSeriesLeaf implements UserEntityLeafInterface {
  """
  The id of the UserSeriesLeaf.
  """
  id: String

  """
  The related entity of the social action.
  """
  entity: Node

  """
  The user's Fan action on this entity.
  """
  fan: Fan

  """
  The user's NotInterested action on this entity.
  """
  notInterested: NotInterested

  """
  The user's opinion on this entity.
  """
  opinion: Opinion

  """
  The user's SeenIt action on this entity.
  """
  seenIt: SeenIt

  """
  The user's Subscribe action on this entity.
  """
  subscribe: Subscribe

  """
  The user's WantToSee action on this entity.
  """
  wantToSee: WantToSee

  """
  The user's Helpful action on this entity.
  """
  helpful: Helpful

  """
  The user's Unhelpful action on this entity.
  """
  unhelpful: Unhelpful

  """
  The list of social actions for this user and this entity.
  """
  actionList: [SocialActionInterface]

  """
  The series on which the user performed a social action.
  """
  series: Series

  """
  User Progression for a Series
  """
  progression: UserSeriesProgression
}

"""
An Allociné series.
"""
type Series implements Node {
  """
  The id of the series.
  """
  id: ID!

  """
  The internal id of the series.
  """
  internalId: Int

  """
  The title of the series.
  """
  title: String

  stringValue: String

  """
  The poster of the season.
  """
  poster: InternalImage

  """
  The cover of the series
  """
  cover: InternalImage

  """
  The original title of the series.
  """
  originalTitle: String

  """
  The synopsis of the series, can be short or long (short by default).
  """
  synopsis("If true will return the full synopsis." long: Boolean = false, "If true will strip the content." strip: Boolean = false): String

  """
  The synopsis of the serie, on json format.
  """
  synopsis_json: BodyJson

  """
  The keywords of the series.
  """
  keywords: String

  userAffinity: SeriesUserAffinity

  """
  The paginated seasons of the series.
  """
  seasons(after: String, "The amount of seasons to return." first: Int = 10, before: String, last: Int, "When provided, will only select seasons with the choosen status." status: [Status], "Technical flags about series season to have rapid information" flags: SeriesSeasonFlags, "The order of the seasons to return." order: [SeasonSorting] = [NUMBER_ASC]): seasonsConnection

  """
  The people playing on this series based on current season.
  """
  cast(after: String, "The amount of persons to return." first: Int = 5, before: String, last: Int): castMemberConnection

  """
  The people working on this series.
  """
  credits(after: String, "The amount of persons to return." first: Int = 5, before: String, last: Int, "If provided, only persons of this department will be returned." department: PositionDepartment, "If provided, only persons with this position will be returned." activity: PersonActivity): creditsConnection

  """
  The tags of the series.
  """
  tags: TagCollection

  """
  The genres of the series, extracted from the tags property.
  """
  genres: [Genre]

  """
  Technical flags about series to have rapid information
  """
  flags: SeriesFlags

  """
  The current status of the series.
  """
  status: Status

  """
  The current type of the series.
  """
  type: SeriesType

  """
  The best affinities of the series (based on the users, with social action (like it, seen it, etc...).
  """
  affinities(after: String, "The amount of items to display." first: Int = 10, before: String, last: Int, "If provided will only return the items of the given types." type: [AnalogyType], "If provided, will only return items with videos of the given type." videoFilter: [VideoType], "Videos filters operator (OR\/AND)." videoFilterOperator: Operator = OR, "If provided will only return affinity series in progress" isInProgress: Boolean = false, "If true, will only return released affinity series." released: Boolean, "A list of series, movies or userColletions ids to be excluded from the affinities (e.g: Movie:1234, Series:1234, UserCollection:1234 in base64 encoded)" exclude: [String]): analogyConnection

  """
  The best similarities of the series (based on metas of series (genre, actors, country, etc...))
  """
  similarities(after: String, "The amount of items to display." first: Int = 4, before: String, last: Int, "If provided will only return the items of the given types." type: [AnalogyType], "A list of series, movies or userColletions ids to be excluded from the similarities (e.g: Movie:1234, Series:1234, UserCollection:1234 in base64 encoded)" exclude: [String]): analogyConnection

  """
  News that are related to the current one. Up to 10.
  """
  news("The amount of news to return." first: Int = 10, "The order of the news to return. If none provided the \"LATEST_PUBLICATION\" order is used." order: [NewsSorting] = [LATEST_PUBLICATION], "If provided, will only return the news that match that category. If many categories are provided, every news that match at least one type will be included." category: [NewsCategory] = []): [News]

  """
  The total amount of news this series has.
  """
  newsCount: Int

  """
  The list of nationalities to which this series is related to.
  """
  countries: [Country]

  """
  The related tags of the movie.
  """
  relatedTags: [Tag!]

  """
  The usual length of an episode. Special episodes can be shorter/longer.
  """
  episodeLength: Duration

  """
  The number of known seasons (existing and coming).
  """
  seasonCount: Int

  """
  The number of known episodes (existing and coming).
  """
  episodeCount: Int

  """
  Differents fields for seo purposes.
  """
  seo: Seo

  """
  The number of episodes existing in database
  """
  computedEpisodeCount: Int

  """
  The number of episodes existing in database
  """
  computedSeasonCount: Int

  """
  Informations about the first broadcast of the series.
  """
  originalBroadcast: SeriesOriginalBroadcast

  """
  All current broadcast for the series.
  """
  broadcast("Return the X broadcasts which will diffuse soon." first: Int = 10, "Returns the X programs which have been already broadcasted." last: Int = 5): [Broadcast]

  """
  The list of the releases of this series.
  """
  releases("Filter releases on a country. No filter are applied if no country or null is given." country: CountryCode = null): [SeriesRelease]

  """
  The main Movie Release according to the defined priorities.
  """
  mainRelease: MainReleaseInfo

  """
  The list of videos related to this series.
  """
  videos("The amount of videos to return." first: Int = 10, "The order of the videos to return. If none provided the \"RANK\" order is used." order: [EntityVideoSorting] = [RANK], "The types of video we want to display." type: [VideoType], "If true will also include videos from seasons and episodes of this series." withChildren: Boolean = false, "When true, show external videos from facebook, youtube, etc..." externalVideo: Boolean = true): [Video]

  """
  The list of the images for this series.
  """
  images("The amount of images to return." first: Int = 10, "The order of the images to return. If none provided the \"RANK\" order is used." order: [EntityImageSorting] = [RANK], "If true will also include images from seasons and episodes of this series." withChildren: Boolean = false): [InternalImage]

  """
  The newest comments added on this series, up to 50 elements. Directly use disqus API to get more of them.
  """
  comments("The amount of comments to display." first: Int = 50): [Comment]

  """
  !!!!! DEPRECATED !!!!! Use relatedProducts instead.
  """
  products("The amount of products to display." first: Int = 5, "If provided, will only return the products that match that type. If many types are provided, every product that match at least one type will be included." type: [ProductType], "If not provided, return products in alphabetical order." order: [ProductSorting] = [ALPHABETICAL], "If true will also include products from seasons and episodes of this series." withChildren: Boolean = false): [Product] @deprecated(reason: "Use relatedProducts instead")

  """
  The products related to this series.
  """
  relatedProducts(after: String, "The amount of products to display." first: Int = 10, before: String, last: Int, "If provided, will only return the products that matches that type. If many types are provided, every product that matches at least one type will be included." type: [ProductType], order: [ProductSorting] = [ALPHABETICAL], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType], "If true will also include products from seasons and episodes of this series." withChildren: Boolean = false): productsConnection

  """
  All stats about the series.
  """
  stats: SeriesStats

  """
  Trending evolution of the daily rank.
  """
  trendingEvolution: Int

  """
  The trivias of the series.
  """
  trivias(after: String, "The amount of trivias to return." first: Int = 10, before: String, last: Int, "The order to apply to the trivias." order: [TriviaSorting] = [RANK]): triviasConnection

  """
  The list of the press reviews of this Series.
  """
  pressReviews(after: String, "The amount of reviews to return." first: Int = 10, before: String, last: Int, "Defines how to order reviews." order: [PressReviewsOrder!] = [CREATED_AT]): pressReviewsConnection

  """
  The list of the user reviews of this Series.
  """
  userReviews(after: String, "The amount of user's reviews to return." first: Int = 10, before: String, last: Int, "Only includes reviews that were written after this date." from: DateTime, "Only includes reviews that were written before this date." to: DateTime, "Filters the reviews by positive or negative sentiment." sentiment: ReviewSentimentFilter = BOTH, "Only includes reviews for rating equals to X or X,5." rating: ReviewRating, "The order to apply to the reviews." order: [ReviewSorting] = [LATEST], "If true will also include reviews from seasons of the parentId." withChildren: Boolean = false, "A filter on reviews statuses" statuses: [ReviewStatus!]): userReviewsConnection

  """
  The selections the series was selected in.
  """
  selections("If true will include only the winners. Does nothing by default." hasWon: Boolean = null): [FestivalSelection]

  """
  The series' spotify albums
  """
  albums("The amount of items to display." first: Int = 10, order: [SoundtrackSorting] = [ALPHABETICAL]): [Soundtrack]

  """
  The audiences of the series per country.
  """
  audience: [Audience]

  """
  The list of movies/series/seasons/... this series relates to.
  """
  relations: [Relation]

  releaseFlags("If true, will merge the releaseFlags with the ones of the series seasons." withChildren: Boolean = false): ReleaseFlags

  """
  The most recent season having at least one VOD product (including the season episodes).
  """
  lastSeasonWithVod: Season

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  The series' spotify soundtracks
  """
  soundtracks: Soundtrack @deprecated(reason: "No longer used. You need to get the real architecture on albums endpoint. Will be remove soon.")
}

"""
Series affinity score for current user.
"""
type SeriesUserAffinity {
  reason: [UserAffinityScoreReason!]

  affinityScore: Float
}

"""
list of possible reasons for the absence of an affinity score
"""
enum UserAffinityScoreReason {
  """
  User has not confirm his email.
  """
  ACCOUNT_NOT_ACTIVATED

  """
  API RECO enable to calculate affinity score.
  """
  ONGOING_ALGO

  """
  User has not rated enough movies to be eligible for the calculation of the affinity score.
  """
  NOT_ENOUGH_RATINGS

  """
  User has already rated current movie.
  """
  ALREADY_RATED
}

enum Status {
  """
  The series is currently diffused or next season arrive soon.
  """
  IN_PROGRESS

  """
  The series is over.
  """
  ENDED

  """
  The series was cancelled.
  """
  CANCELLED

  """
  The pilot of the series is ready.
  """
  PILOT

  """
  the series is being produced.
  """
  TO_COME
}

"""
Technical flags about series season to have rapid information
"""
input SeriesSeasonFlags {
  """
  True if the season has vod/vodest.
  """
  has_vod_product: Boolean
}

"""
Sorting criteria for season
"""
enum SeasonSorting {
  """
  Season sorted by number asc.
  """
  NUMBER_ASC

  """
  Season sorted by number desc.
  """
  NUMBER_DESC
}

"""
A connection to a list of items.
"""
type seasonsConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [seasonsEdge]
}

"""
An edge in a connection.
"""
type seasonsEdge {
  """
  The item at the end of the edge.
  """
  node: Season

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné series or program season.
"""
type Season implements Node {
  """
  The id of the season.
  """
  id: ID!

  """
  The internal id of the season.
  """
  internalId: Int

  """
  The number of the season.
  """
  number: Int

  stringValue: String

  """
  The poster of the season.
  """
  poster: InternalImage

  """
  The series of the season.
  """
  series: Series

  """
  The list of episodes in that season.
  """
  episodes(after: String, "The amount of episodes to return." first: Int = 20, before: String, last: Int, "The order of the episodes to return." order: [EpisodeSorting] = [NUMBER_ASC]): episodesConnection

  """
  The people playing on this season.
  """
  cast(after: String, "The amount of persons to return." first: Int = 5, before: String, last: Int): castMemberConnection

  """
  The people working on this season.
  """
  credits(after: String, "The amount of persons to return." first: Int = 5, before: String, last: Int, "If provided, only persons of this department will be returned." department: PositionDepartment, "If provided, only persons with this position will be returned." activity: PersonActivity): creditsConnection

  """
  All stats for the season.
  """
  stats: SeasonStats

  """
  The start date of the season.
  """
  startsAt: DateLimited @deprecated(reason: "Use startsAtPartial instead")

  """
  The start date of the season.
  """
  startsAtPartial: PartialDate

  """
  The end date of the season.
  """
  endsAt: DateLimited @deprecated(reason: "Use endsAtPartial instead")

  """
  The end date of the season.
  """
  endsAtPartial: PartialDate

  """
  The tags of the season.
  """
  tags: TagCollection

  """
  The current status of the season.
  """
  status: Status

  """
  Technical informations about the season.
  """
  data: SeasonData

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  News that are related to the current one. Up to 10.
  """
  news("The amount of news to return." first: Int = 10, "The order of the news to return. If none provided the \"LATEST_PUBLICATION\" order is used." order: [NewsSorting] = [LATEST_PUBLICATION], "If provided, will only return the news that match that category. If many categories are provided, every news that match at least one type will be included." category: [NewsCategory] = []): [News]

  """
  The total amount of news this season has.
  """
  newsCount: Int

  """
  The list of videos related to this season.
  """
  videos("The amount of videos to return." first: Int = 10, "The order of the videos to return. If none provided the \"RANK\" order is used." order: [EntityVideoSorting] = [RANK], "The types of video we want to display." type: [VideoType], "If true will also include videos from episodes of this season." withChildren: Boolean = false, "When true, show external videos from facebook, youtube, etc..." externalVideo: Boolean = true): [Video]

  """
  The list of the images for this season.
  """
  images("The amount of images to return." first: Int = 10, "The order of the images to return. If none provided the \"RANK\" order is used." order: [EntityImageSorting] = [RANK], "If true will also include images from episodes of this season." withChildren: Boolean = false): [InternalImage]

  """
  The newest comments added on this season, up to 50 elements. Directly use disqus API to get more of them.
  """
  comments("The amount of comments to display." first: Int = 50): [Comment]

  """
  !!!!! DEPRECATED !!!!! Use relatedProducts instead.
  """
  products("The amount of products to display." first: Int = 5, "If provided, will only return the products that match that type. If many types are provided, every product that match at least one type will be included." type: [ProductType], "If not provided, return products in alphabetical order." order: [ProductSorting] = [ALPHABETICAL], "If true will also include products from episodes of this season." withChildren: Boolean = false): [Product] @deprecated(reason: "Use relatedProducts instead")

  """
  The products related to this season.
  """
  relatedProducts(after: String, "The amount of products to display." first: Int = 10, before: String, last: Int, "If provided, will only return the products that matches that type. If many types are provided, every product that matches at least one type will be included." type: [ProductType], order: [ProductSorting] = [ALPHABETICAL], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType], "If true will also include products from episodes of this season." withChildren: Boolean = false): productsConnection

  """
  The list of VOD/VODEST providers for the season.
  """
  vodProviders("" type: [VodProductType!]): [VodProviders!]

  """
  The list of the user reviews of this Season.
  """
  userReviews(after: String, "The amount of user's reviews to return." first: Int = 10, before: String, last: Int, "Only includes reviews that were written after this date." from: DateTime, "Only includes reviews that were written before this date." to: DateTime, "Filters the reviews by positive or negative sentiment." sentiment: ReviewSentimentFilter = BOTH, "Only includes reviews for rating equals to X or X,5." rating: ReviewRating, "The order to apply to the reviews." order: [ReviewSorting] = [LATEST], "If true will also include reviews from episodes of the parentId." withChildren: Boolean = false, "A filter on reviews statuses" statuses: [ReviewStatus!]): userReviewsConnection

  """
  The audiences of the season per country.
  """
  audience: [Audience]

  """
  The synopsis of the season, can be short or long (short by default).
  """
  synopsis("If true will return the full synopsis." long: Boolean = false, "If true will strip the content." strip: Boolean = false): String

  """
  The synopsis of the season, on json format.
  """
  synopsis_json: BodyJson

  releaseFlags: ReleaseFlags

  """
  The list of the releases of this series.
  """
  releases("Filter releases on a country. No filter are applied if no country or null is given." country: CountryCode = null): [SeasonRelease]

  """
  Next season based on season number
  """
  nextSeason: Season

  """
  Next season based on season number
  """
  previousSeason: Season
}

"""
Sorting criteria for episode
"""
enum EpisodeSorting {
  """
  Episode sorted by number asc.
  """
  NUMBER_ASC

  """
  Episode sorted by number desc.
  """
  NUMBER_DESC
}

"""
A connection to a list of items.
"""
type episodesConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [episodesEdge]
}

"""
An edge in a connection.
"""
type episodesEdge {
  """
  The item at the end of the edge.
  """
  node: Episode

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné series or program episode
"""
type Episode implements Node {
  """
  The id of the episode
  """
  id: ID!

  """
  The internal id of the episode
  """
  internalId: Int

  """
  The synopsis of the episode, can be short or long (short by default).
  """
  synopsis("If true will return the full synopsis." long: Boolean = false, "If true will strip the content." strip: Boolean = false): String

  """
  The synopsis of the episode, on json format.
  """
  synopsis_json: BodyJson

  """
  The number of the episode in its season
  """
  number: Int

  """
  The number of the episode in the whole series
  """
  numberInSeries: Int

  """
  The title of the episode
  """
  title: String

  """
  The original title of the episode
  """
  originalTitle: String

  stringValue: String

  """
  The keywords of the series
  """
  keywords: String

  """
  The season of the episode
  """
  season: Season

  """
  The series of the episode, it is equivalent as getting the series from the season.
  """
  series: Series

  """
  The people playing in the series this season.
  """
  cast(after: String, "The amount of persons to return." first: Int = 5, before: String, last: Int): castMemberConnection

  """
  The people working on the series this season.
  """
  credits(after: String, "The amount of persons to return." first: Int = 5, before: String, last: Int, "If provided, only persons of this department will be returned." department: PositionDepartment, "If provided, only persons with this position will be returned." activity: PersonActivity): creditsConnection

  """
  News that are related to the current one. Up to 10.
  """
  news("The amount of news to return." first: Int = 10, "The order of the news to return. If none provided the \"LATEST_PUBLICATION\" order is used." order: [NewsSorting] = [LATEST_PUBLICATION], "If provided, will only return the news that match that category. If many categories are provided, every news that match at least one type will be included." category: [NewsCategory] = []): [News]

  """
  The total amount of news this episode has.
  """
  newsCount: Int

  """
  The list of videos related to this episode.
  """
  videos("The amount of videos to return." first: Int = 10, "The order of the videos to return. If none provided the \"RANK\" order is used." order: [EntityVideoSorting] = [RANK], "The types of video we want to display." type: [VideoType], "When true, show external videos from facebook, youtube, etc..." externalVideo: Boolean = true): [Video]

  """
  The list of the images for this episode.
  """
  images("The amount of images to return." first: Int = 10, "The order of the images to return. If none provided the \"RANK\" order is used." order: [EntityImageSorting] = [RANK]): [InternalImage]

  """
  The newest comments added on this episode, up to 50 elements. Directly use disqus API to get more of them.
  """
  comments("The amount of comments to display." first: Int = 50): [Comment]

  """
  !!!!! DEPRECATED !!!!! Use relatedProducts instead.
  """
  products("The amount of products to display." first: Int = 5, "If provided, will only return the products that match that type. If many types are provided, every product that match at least one type will be included." type: [ProductType], order: [ProductSorting] = [ALPHABETICAL]): [Product] @deprecated(reason: "Use relatedProducts instead")

  """
  The products related to this episode.
  """
  relatedProducts(after: String, "The amount of products to display." first: Int = 10, before: String, last: Int, "If provided, will only return the products that matches that type. If many types are provided, every product that matches at least one type will be included." type: [ProductType], order: [ProductSorting] = [ALPHABETICAL], "When provided, will add aggregation on you query search with the facets you want." facets: [FacetsType], "An array of company global id you want the products to be related to. If many ids are provided, every product that relates at least to one of the entities will be included" relatedCompanies: [String]): productsConnection

  """
  The audiences of the episode per country.
  """
  audience: [Audience]

  """
  All stats for the episode.
  """
  stats: EpisodeStats
}

enum PositionDepartment {
  """
  Persons that play in the series/movie.
  """
  ACTING

  """
  Persons representing a company.
  """
  COMPANIES

  """
  Persons that were part of the technical film crew.
  """
  CREW

  """
  Persons that directed the series/movie (Showrunner, Director...).
  """
  DIRECTION

  """
  Persons that distributed the series/movie.
  """
  DISTRIBUTION

  """
  Persons that worked on the soundtrack.
  """
  MUSIC_DEPARTMENT

  """
  Persons that did uncategorizable things.
  """
  OTHERS

  """
  Persons that procuded the series/movie.
  """
  PRODUCTION_DEPARTMENT

  """
  Persons that took part in the creation of the story.
  """
  STORYLINE

  """
  Persons that did uncategorizable things.
  """
  UNKNOWN
}

enum PersonActivity {
  ACTOR

  AGENTS

  ANIMATION_STUDIO

  CO_PRODUCTION

  DIGITAL_EFFECTS

  DISTRIBUTION_COMPANIES

  DISTRIBUTION_COORDINATION

  EXECUTIVE_PRODUCER_COMPANIES

  FILM_EXHIBITOR

  FOREIGN_DISTRIBUTOR

  FRENCH_DISRIBUTOR

  INTERNATIONAL_DISTRIBUTION_EXPORTS

  MUSICAL_SUPERVISOR_COMPANIES

  NETWORK_SERVICE_PROVIDER

  POST_PRODUCTION

  PR_AGENCY_COMPANIES

  PRODUCTION

  SOUND_EDITOR_COMPANIES

  SPECIAL_EFFECTS_COMPANIES

  TV_CHANNEL

  VISUAL_EFFECTS

  VIDEO_PROVIDER

  FIRST_ASSISTANT_DIRECTOR

  FIRST_CAMERA_ASSISTANT

  SPECIAL_EFFECTS_2D

  SECOND_ASSISTANT_DIRECTOR

  SECOND_CAMERA_ASSISTANT

  SECOND_UNIT_DIRECTOR

  SUPERVISOR_3D

  THIRD_ASSISTANT_DIRECTOR

  ACTING_COACHING

  AIR_RECORDING

  ANIMAL_HANDLER

  ANIMATIC

  ANIMATION_AND_VISUAL_EFFECTS_SUPERVISOR

  ANIMATOR

  ART_DIRECTOR

  ART_SUPERVISOR

  ARTISTIC_CONSULTANT

  ASSISTANT_COSTUME_DESIGNER

  ASSISTANT_DIRECTOR

  ASSISTANT_PRODUCTION

  ASSISTANT_EDITOR

  ASSISTANT_FIGHT_CHOREOGRAPHER

  ASSISTANT_PRODUCTION_CO_ORDINATOR

  ASSISTANT_SET_DECORATOR

  ASSISTANT_SET_DRESSER

  ASSISTANT_STUNT_COORDINATOR

  ASSISTANT_TECHNICAL_ADVISOR

  ASSISTANT_TO_ART_DIRECTOR

  ASSISTANT_UNIT_MANAGER

  ASSOCIATE_EDITOR

  B_CAMERA

  BOOM_OPERATOR

  CAMERA_ASSISTANT

  CAMERA_OPERATOR

  CASTING_DIRECTOR

  CASTING_DIRECTOR_CHILDREN

  CASTING_PRODUCER

  CG_SUPERVISOR

  CHARACTER_ANIMATION_SUPERVISOR

  CHARACTER_EFFECTS

  CHARACTER_GRAPHIC_CREATION

  CHARACTER_PAINTING_SUPERVISOR

  CHARACTER_SPECIAL_EFFECTS

  CHARACTER_TECHNICAL_DIRECTOR

  CHILDREN_S_COACH

  CHOREOGRAPHER

  COLORIST

  COMPOSITING_SUPERVISOR

  CONCEPT_ARTIST

  CONSULTANT

  COSTUME_DESIGNER

  COSTUME_SUPERVISOR

  CROWD

  DANCER

  DIALOGUE_EDITOR

  DIALOGUE_EDITOR_SUPERVISOR

  DIRECTOR_OF_PHOTOGRAPHY

  DIRECTOR_OF_PHOTOGRAPHY_ASSISTANT

  DUBBING_ASSISTANT

  EDITOR

  EDITOR_IN_CHIEF

  ELECTRICIANS

  EXECUTIVE_DIRECTOR

  EXTRAS_CASTING

  FIGHT_CHOREOGRAPHER

  FILM_POSTER_BY

  FOLEY_ARTIST

  FOLEY_EDITOR

  FOLEY_RECORDIST

  GAFFER

  GRAPHIC_DESIGNER

  HAIR

  HAIRDRESSER_SUPERVISOR

  HEAD_COSTUMER

  ILLUSTRATOR

  INTERTITLES

  KEY_GRIP

  LAYOUT

  LAYOUT_SUPERVISOR

  LEAD_MAN

  LEGAL_ADVISOR

  LIGHTING

  LIGHTING_DIRECTOR

  LOCATION_ASSISTANT_ASSISTANT

  LOCATION_MANAGER

  LOCATION_SCOUT

  MAKE_UP

  MAKE_UP_ASSISTANT

  MAKE_UP_SUPERVISOR

  MAKE_UP_VISUAL_EFFECTS

  MAKING_OF_BY

  MATTE_PAINTER

  MODEL_MAKER

  MODELLING

  PAINTER

  PHOTOGRAPHER

  PICTURE_RESTORATION

  POST_PRODUCTION_COORDINATOR

  POST_PRODUCTION_PRODUCER

  POST_PRODUCTION_SUPERVISOR

  POST_PRODUCTION_DIRECTOR

  PRODUCTION_CREW

  PRODUCTION_ADMINISTRATOR

  PRODUCTION_ASSISTANT

  PRODUCTION_CO_ORDINATOR

  PRODUCTION_COORDINATOR_DIRECTOR

  PRODUCTION_COORDINATOR

  PRODUCTION_DESIGNER

  PRODUCTION_DIRECTOR

  PRODUCTION_MANAGER

  PRODUCTION_SECRETARY

  PRODUCTION_SUPERVISOR_MANAGER

  PRODUCTION_SUPERVISOR

  PROP_MASTER

  PROP_WRANGLER

  PUPPETEER

  RESEARCH

  SCANNING_LASER3D

  SCRIPT

  SECOND_UNIT_CINEMATOGRAPHER

  SECOND_UNIT_STUNT_COORDINATOR

  SET_DECORATOR_CHEF

  SET_DECORATOR

  SET_DECORATOR_ASSEMBLER

  SET_IN_COLOR

  SOUND_ASSISTANT

  SOUND_CREATION

  SOUND_DESIGN

  SOUND_DESIGNER

  SOUND_EDITOR

  SOUND_EFFECTS_EDITOR

  SOUND_ENGINEER

  SOUND_MIXING

  SOUND_RESTORATION

  SOUND_EFFECTS_ENGINEER

  SPECIAL_EFFECTS

  SPORTS_COACH

  STAGEHAND

  STEREOGRAPHIC_ANIMATION

  STEREOSCOPIC_SUPERVISOR

  STILLS_PHOTOGRAPHER

  STORY

  STORYBOARD_ARTIST

  STUNT_COORDINATOR_CHEF

  STUNT_COORDINATOR

  STUNTS

  STUNTS_RIGGER

  STYLIST

  SUBMARINE_PHOTOGRAPHY

  SUBTITLES

  SUPPORT_ADDITIONAL_LOCATION_ASSISTANT_CHEF

  SUPPORT_ADDITIONAL_LOCATION_ASSISTANT

  TAMER

  TECHNICAL_ADVISOR

  TECHNICAL_DIRECTOR

  TECHNICAL_SUPERVISOR

  TEXTURING

  TITLE_SEQUENCE_DESIGNER

  UNIT_MANAGER

  VISUAL_DEVELOPMENT

  VISUAL_EFFECTS_CINEMATOGRAPHER

  VISUAL_EFFECTS_COORDINATOR

  VISUAL_EFFECTS_DIRECTOR

  VISUAL_EFFECTS_EDITOR

  VISUAL_EFFECTS_SUPERVISOR

  VISUAL_EFFECTS_SUPERVISOR_PRODUCTION

  VOICE_COACHING

  WARDROBE

  WEAPONS_MASTER

  WILDLIFE_PHOTOGRAPHY

  CO_DIRECTOR

  CREATOR_SHOWRUNNER

  DIRECTOR

  SHOWRUNNER

  PRESS_AGENT

  PUBLIC_RELATIONS

  SALES_AGENT

  ADDITIONAL_MUSIC

  ADDITIONAL_MUSIC_COMPOSER

  LYRICIST

  MUSIC_COMPOSER

  MUSIC_COMPOSER_THEME_SONG

  MUSIC_COORDINATOR

  MUSIC_EDITOR

  MUSIC_MIXING

  MUSIC_PRODUCER

  MUSICAL_CONSULTANT

  MUSICAL_SUPERVISOR

  MUSICIAN

  ORIGINAL_COMPOSITION_BY

  SINGER

  SINGER_SONGS_FROM_THE_FILM_FRENCH_VERSION

  THEME_SONG_PERFORMER

  TITLE_SOUNDTRACK

  YELMO

  ADJUNCT_EXECUTIVE_DIRECTOR

  BUSINESSMAN

  DIRECTOR_OF_COMMUNICATIONS

  EXPLORER

  JOURNALIST

  LAWYER

  NONE

  POET

  POLITICIAN

  PRESENTER

  PSYCHIATRIST

  SCIENTIST

  SPORTSMAN

  TV_PRODUCER

  UNKNOWN_CREDITS

  ASSOCIATE_PRODUCER

  CO_PRODUCER

  EXECUTIVE_CO_PRODUCER

  EXECUTIVE_PRODUCER

  GENERAL_REPRESENTATIVE

  LINE_PRODUCER

  PRODUCER

  ADAPTED_BY

  AUTHOR

  BASED_ON

  CO_SCREENWRITER

  COLLABORATION_TO_THE_SCENARIO

  CREATOR

  DIALOGUE_COACH

  DIALOGUE_WRITER

  GAGMAN

  ORIGINAL_CHARACTERS_BY

  ORIGINAL_IDEA

  ORIGINAL_SCRIPT_BY

  SCREENWRITER

  STORY_EDITOR

  WRITING_DIRECTOR
}

"""
A connection to a list of items.
"""
type creditsConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [creditsEdge]
}

"""
An edge in a connection.
"""
type creditsEdge {
  """
  The item at the end of the edge.
  """
  node: CreditsMember

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A person working for a series/movie.
"""
type CreditsMember {
  """
  The person that is in the credits.
  """
  person: Person

  """
  The job of the person in the credits.
  """
  position: Position

  """
  The rank of the cast member.
  """
  rank: Int
}

type Position {
  """
  The position name.
  """
  name: PersonActivity

  """
  The department related to the position.
  """
  department: PositionDepartment
}

"""
All formats of product.
"""
enum ProductType {
  """
  Blu-ray or Blu-ray Disc (BD) is a digital optical disc data storage format. It was designed to supersede the DVD format, in that it is capable of storing high-definition (720p and 1080p) and ultra high-definition video resolution (2160p).
  """
  BLU_RAY

  """
  VD (an abbreviation of "digital versatile disc"[4][5] or "digital video disc"[6]) is a digital optical disc storage format invented and developed by Panasonic, Philips, Sony and Toshiba in 1995.
  """
  DVD

  """
  This represent a poster (a picture) product.
  """
  POSTER

  """
  Replay services allow the user to watch movie or series in streaming without any subscription.
  """
  REPLAY

  """
  Subscription VOD (SVOD) services use a subscription business model, where subscribers are charged a monthly fee to access unlimited programs.
  """
  SVOD

  """
  Video on demand (display) (VOD) are systems which allow users to select and watch/listen to video or audio content such as movies and TV shows when they choose to, rather than having to watch at a specific broadcast time.
  """
  VOD

  """
  Transactional video on demand (TVOD) is a distribution method by which customers pay for each individual piece of video on demand content.
  """
  TVOD

  """
  Video on demand electronic sales through (VODEST) which allow users to buy the video definitively.
  """
  VODEST
}

"""
Sorting criteria for products
"""
enum ProductSorting {
  """
  Products sorted by title in alphabetical order.
  """
  ALPHABETICAL

  """
  Products sorted by title in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Products sorted by release date with the newer products first.
  """
  LATEST

  """
  Products sorted by release date with the older products first.
  """
  OLDEST

  """
  Products sorted by offers lowest price first.
  """
  MIN_PRICE
}

"""
An Allociné product
"""
type Product implements Node {
  """
  The id of the product.
  """
  id: ID!

  """
  The internal id of the product.
  """
  internalId: Int

  """
  The name of the product
  """
  name: String

  stringValue: String

  """
  The type of the product (blu-ray, dvd...)
  """
  type: ProductType

  """
  The image used to represent this product. The source can be external. In that case the image will not be editable on the fly.
  """
  image: Image

  """
  A localized text explaining what the product includes.
  """
  content: String

  """
  The tags of the product
  """
  tags: TagCollection

  """
  The date at which the product was released.
  """
  releasedAt: DateLimited

  """
  The country the product is available in.
  """
  country: Country

  """
  Some informations about audio and video format.
  """
  format: ProductFormat

  """
  Additional data about the product.
  """
  data: ProductData

  """
  A list of Allocine product offer.
  """
  offers: [ProductOffer]

  """
  The language(s) of the product.
  """
  languages: [Language]

  """
  The video's quality.
  """
  definition: ProductQuality

  """
  The related entities of the product
  """
  relatedEntities("Filter on related entities type" type: [NodeTypeProducts!]): [Node!]
}

"""
Format informations about a product.
"""
type ProductFormat {
  """
  The audio format of the product.
  """
  audio: String

  """
  The video format of the product.
  """
  video: String

  """
  The subtitles available for the product (if applicable).
  """
  subtitle: String
}

"""
Various additional informations about a product.
"""
type ProductData {
  """
  The EAN code (European Article Number) for the product.
  """
  eanCode: [String]

  """
  The name of the editor of the product.
  """
  editor: String

  """
  If the product is a dvd, tells its region.
  """
  dvdRegion: [String]

  """
  Technical data about the product, like the number of discs, the recommended age for users, etc...
  """
  specification: String
}

"""
An Allocine product offer.
"""
type ProductOffer {
  """
  The country in which is the offer.
  """
  country: Country

  """
  The product(BR, DVD, VOD) related to this offer.
  """
  product: Product

  """
  The company which make the offer.
  """
  company: Company

  """
  The url of the offer.
  """
  url: String

  """
  The price of the offer.
  """
  price: Float

  """
  The price with it currency.
  """
  displayPrice: String

  """
  The currency in which is the price.
  """
  currency: String
}

"""
All product's qualities.
"""
enum ProductQuality {
  """
  Ultra high definition (4000 px).
  """
  F_4K

  """
  High definition (1080 px)
  """
  FHD

  """
  The lowest high definition (720 px)
  """
  HighDefinition

  """
  High definition (1080 px)
  """
  P_1080

  """
  Very high definition (2160 px)
  """
  P_2160

  """
  A vertical resolution of 576 px with a horizontal resolution of 768, 720 or 704 px.
  """
  P_576

  """
  Simple definition (480 px)
  """
  Standard
}

enum NodeTypeProducts {
  EPISODE

  MOVIE

  SEASON

  SERIES
}

input FacetsType {
  """
  The aggregation field name.
  """
  field: FacetFieldValue!

  """
  When provide will return the number count of facets.
  """
  first: Int

  """
  When provide will order aggregation keys.
  """
  order: [FacetSorting]
}

enum FacetFieldValue {
  GENRES

  DECADES

  YEAR

  COUNTRIES

  FIRST_CHAR

  TYPE

  AGE

  THEME

  THEME_TAG

  PHYSICAL_PRODUCT
}

"""
Sorting criteria for facets
"""
enum FacetSorting {
  """
  Facets sorted by name in alphabetical order.
  """
  ALPHABETICAL

  """
  Facets sorted by name in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Facets sorted by count.
  """
  TOTAL_COUNT

  """
  Facets sorted by reversed count.
  """
  REVERSE_TOTAL_COUNT
}

"""
A connection to a list of items.
"""
type productsConnection {
  """
  Facets are ES aggregation. Represent the available filter in ES.
  """
  facets: [Facets]

  totalCount: Int

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [productsEdge]
}

type Facets {
  """
  The facet name. It's the ES filter name.
  """
  name: String!

  """
  The values aggregation.
  """
  values: [FacetValue]
}

interface FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!
}

"""
An edge in a connection.
"""
type productsEdge {
  """
  The item at the end of the edge.
  """
  node: Product

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
The audience of an episode/season or series.
"""
type Audience {
  """
  The number of viewers on this episode.
  """
  value: Int

  """
  The country of the audience.
  """
  country: Country

  """
  The original channel that broadcasted the series.
  """
  channel: Company
}

"""
All stats about the episode.
"""
type EpisodeStats {
  """
  Stats about ratings given by the users.
  """
  userRating: UserRatingsStats

  """
  Stats about reviews given by the users. Note that ratings related to reviews are already aggregated into the userRating field
  """
  userReview: UserReviewsStats
}

"""
Aggregated stats about user ratings.
"""
type UserRatingsStats {
  """
  The score, out of 10 by default, given by users.
  """
  score(base: Int = 10): Float

  """
  The distribution of the ratings given by users.
  """
  distribution: [Int]

  """
  The amount of ratings for a given score range (default from min to max).
  """
  count("All ratings smaller than this value will be excluded for the amount." from: Float, "All ratings bigger than this value will be excluded for the amount." to: Float, "Return rating on base 10 by default (base 5 available)." base: Int = 10): Int
}

"""
Aggregated stats about user reviews.
"""
type UserReviewsStats {
  """
  The distribution of the reviews given by users.
  """
  distribution: [Int]

  """
  The amount of ratings for a given score range (default from min to max).
  """
  count("All ratings smaller than this value will be excluded for the amount." from: Float, "All ratings bigger than this value will be excluded for the amount." to: Float, "Return rating on base 10 by default (base 5 available)." base: Int = 10): Int
}

"""
All stats about the season.
"""
type SeasonStats {
  """
  Stats about ratings given by the users.
  """
  userRating: UserRatingsStats

  """
  Stats about reviews given by the users. Note that ratings related to reviews are already aggregated into the userRating field
  """
  userReview: UserReviewsStats
}

"""
A date can be partial, we return too its precision
"""
type PartialDate {
  """
  The date like it's formated in database
  """
  date: String

  """
  3 values possible, day(YYYY-MM-DD), month(YYYY-MM) or year(YYYY)
  """
  precision: String
}

"""
Technical data about seasons.
"""
type SeasonData {
  """
  Count of known episodes in the season (existing and coming).
  """
  episodeCount: Int
}

"""
All formats of VOD product.
"""
enum VodProductType {
  """
  Video on demand (display) (VOD) are systems which allow users to select and watch/listen to video or audio content such as movies and TV shows when they choose to, rather than having to watch at a specific broadcast time.
  """
  VOD

  """
  Video on demand electronic sales through (VODEST) which allow users to buy the video definitively.
  """
  VODEST
}

"""
A list of the VOD/VODEST providers for a season with their lowest price.
"""
type VodProviders {
  """
  The company concerned.
  """
  company: Company

  """
  The lowest price.
  """
  price: Float

  """
  The currency in which is the price.
  """
  currency: String

  """
  The number of products listed in the category.
  """
  productsCount: Int

  """
  The price with it currency.
  """
  displayPrice: String

  type: VodProductType
}

"""
Filter user reviews by most negative / positive.
"""
enum ReviewSentimentFilter {
  """
  Only shows reviews that says something negative about the content (eg. rating < 2.5).
  """
  NEGATIVE

  """
  Only shows reviews that says something positive about the content. (eg. rating >= 2.5)
  """
  POSITIVE

  """
  Shows all reviews, ignoring if they are positive or negative.
  """
  BOTH
}

"""
Filter users reviews by one rating.
"""
enum ReviewRating {
  """
  Only show reviews for rating equals to 0.5 (O can't be submit).
  """
  ZERO

  """
  Only show reviews for rating equals to 1 or 1.5.
  """
  ONE

  """
  Only show reviews for rating equals to 2 or 2.5.
  """
  TWO

  """
  Only show reviews for rating equals to 3 or 3.5.
  """
  THREE

  """
  Only show reviews for rating equals to 4 or 4.5.
  """
  FOUR

  """
  Only show reviews for rating equals to 5.
  """
  FIVE
}

"""
Sorting criteria for reviews.
"""
enum ReviewSorting {
  """
  Shows the newest reviews first.
  """
  LATEST

  """
  Shows the oldest reviews first.
  """
  OLDEST

  """
  Shows the reviews with the best rating first.
  """
  MOST_POSITIVE

  """
  Shows the reviews with the worst rating first.
  """
  MOST_NEGATIVE

  """
  Shows the reviews that were the most approved by the community.
  """
  MOST_HELPFUL

  """
  Show the reviews with the most subscribers for the review's user.
  """
  MOST_SUBSCRIBERS

  """
  Show the reviews with the most user which write the more reviews.
  """
  MOST_REVIEWS
}

"""
A connection to a list of items.
"""
type userReviewsConnection {
  totalCount: Int

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [userReviewsEdge]
}

"""
An edge in a connection.
"""
type userReviewsEdge {
  """
  The item at the end of the edge.
  """
  node: UserReview

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné user review.
"""
type UserReview implements Node {
  """
  The id of the user review.
  """
  id: ID!

  """
  The internal id of the user review.
  """
  internalId: Int

  """
  The user who wrote the review.
  """
  author: User

  """
  The content of the review
  """
  body: String

  """
  The status of the review
  """
  status: ReviewStatus

  """
  The rating the user gave with this review.
  """
  rating: Float

  stringValue: String

  """
  Some stats about metric.
  """
  stats: UserReviewStats

  """
  The date when the review was created
  """
  createdAt: DateTime

  """
  The date when the review was updated
  """
  updatedAt: DateTime

  """
  The related entity of the review.
  """
  relatedEntity: Node
}

"""
Some stats about metric.
"""
type UserReviewStats {
  """
  An array of metrics for a given entity.
  """
  metric: StatsMetric
}

type ReleaseFlags {
  product: ReleaseProductFlags

  release: ReleaseBaseFlags

  showtime: ReleaseShowtimeFlags

  upcoming: ReleaseBaseFlags

  specialOps: ReleaseSpecialOpsFlags
}

type ReleaseProductFlags {
  online: ReleaseOnlineFlags

  physical: ReleasePhysicalFlags

  provider: ReleaseProvidersFlags
}

type ReleaseOnlineFlags {
  global: Boolean

  vod: Boolean

  vodest: Boolean

  svod: Boolean
}

type ReleasePhysicalFlags {
  global: Boolean

  dvd: Boolean

  bluray: Boolean
}

type ReleaseProvidersFlags {
  vod: [Company]

  replay: [Company]

  svod: [Company]

  vodest: [Company]

  dvd: [Company]

  bluray: [Company]

  television: [Company]

  extra: ExtraProviderFlags
}

type ExtraProviderFlags {
  svod_originals: Company

  svod_exclusive: Company
}

type ReleaseBaseFlags {
  svod: ReleaseSvodFlags

  global: Boolean

  online: Boolean

  theater: Boolean

  physical: Boolean

  television: Boolean

  vod: Boolean

  vodest: Boolean

  globalWithoutDate: Boolean

  provider: ReleaseProvidersFlags
}

type ReleaseSvodFlags {
  original: String

  exclusive: String

  adn: Boolean

  amazonPrime: Boolean

  appletv: Boolean

  benshi: Boolean

  canalplay: Boolean

  disney: Boolean

  filmotv: Boolean

  globoplay: Boolean

  hbo: Boolean

  hbo_go: Boolean

  madelen: Boolean

  movistar: Boolean

  mycanal: Boolean

  netflix: Boolean

  ocs: Boolean

  salto: Boolean

  sfrPlay: Boolean

  sky: Boolean
}

type ReleaseShowtimeFlags {
  playing: Boolean

  preview: Boolean
}

type ReleaseSpecialOpsFlags {
  club300: Boolean

  emergence: Boolean

  sponsoredAutocomplete: Boolean
}

"""
An Allociné release for a series.
"""
type SeasonRelease implements Node & ReleaseInterface {
  """
  The id of the release.
  """
  id: ID!

  stringValue: String

  """
  The country of the release.
  """
  country: Country

  """
  The company for which this release is limited to.
  """
  companyLimitation: Company

  """
  The date of the release.
  """
  releaseDate: PartialDate

  """
  The area for this release
  """
  area: String

  """
  Some data related to this release.
  """
  data: Json

  """
  The official recommendation of CNC.
  """
  certificate: Certificate

  releaseTags: ReleaseTag

  """
  The date of the release.
  """
  date: DateLimited @deprecated(reason: "No longer used. Will be remove soon. Use releaseDate instead.")

  """
  The name of the release.
  """
  name: String @deprecated(reason: "Please use the 'releaseTags' field instead.")

  """
  The internal id of the release.
  """
  internalId: Int

  """
  The list of companies who worked in this production.
  """
  companies("If provided, will only return the companies that match that type." activity: [CompanyActivity!]): [EntityCompany!]!
}

"""
An Allociné release
"""
interface ReleaseInterface {
  """
  The id of the release.
  """
  id: ID!

  stringValue: String

  """
  The country of the release.
  """
  country: Country

  """
  The company for which this release is limited to.
  """
  companyLimitation: Company

  """
  The date of the release.
  """
  releaseDate: PartialDate

  """
  The area for this release
  """
  area: String

  """
  Some data related to this release.
  """
  data: Json

  """
  The official recommendation of CNC.
  """
  certificate: Certificate

  releaseTags: ReleaseTag

  """
  The date of the release.
  """
  date: DateLimited @deprecated(reason: "No longer used. Will be remove soon. Use releaseDate instead.")

  """
  The name of the release.
  """
  name: String @deprecated(reason: "Please use the 'releaseTags' field instead.")
}

"""
A certificate given by the CNC.
"""
type Certificate {
  """
  The certificate's definition.
  """
  label: String

  """
  The certificate's code.
  """
  code: String
}

type ReleaseTag {
  tagTypes: [ReleaseTagType!]

  tagFlags: [ReleaseTagFlag!]
}

"""
The available release types.
"""
enum ReleaseTagType {
  ONLINE

  ONLINE_E_CINEMA

  ONLINE_SVOD

  ONLINE_VOD

  ONLINE_VODEST

  PHYSICAL

  PHYSICAL_BLURAY

  PHYSICAL_DVD

  TELEVISION

  THEATER

  RELEASED

  REPLAY
}

enum ReleaseTagFlag {
  DIRECT

  NOT_RELEASED_YET

  LIMITATION_PLATFORM

  LIMITATION_THEATER

  PREVIEW

  RERUN

  EXCLUSIVE

  ORIGINAL
}

"""
Technical flags about series to have rapid information
"""
type SeriesFlags {
  """
  True if the series is coming soon on netflix.
  """
  comingSoonOnNetflix: Boolean

  """
  True if the series has dvd release.
  """
  hasDvdRelease: Boolean

  """
  True if the series has vod, svod or vodest.
  """
  hasOnlineProduct: Boolean

  """
  True if the series has vodest.
  """
  hasVodProduct: Boolean

  """
  True if the series has vod release.
  """
  hasOnlineRelease: Boolean

  """
  True if the series has at least one news.
  """
  hasNews: Boolean

  """
  True if the series has bluray or dvd.
  """
  hasPhysicalProduct: Boolean

  """
  True if the series has soundtrack.
  """
  hasSoundtrack: Boolean

  """
  True if the series has some trivia.
  """
  hasTrivia: Boolean

  """
  True if the series is coming soon without release dates.
  """
  isComingSoon: Boolean

  """
  True if the series is only on netflix.
  """
  onlyNetflix: Boolean

  """
  True if the series has tv release.
  """
  tvRelease: Boolean
}

enum SeriesType {
  MANGA

  MINISERIES

  SERIES
}

enum AnalogyType {
  MOVIE

  SERIES
}

enum Operator {
  OR

  AND
}

"""
A connection to a list of items.
"""
type analogyConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [analogyEdge]
}

"""
An edge in a connection.
"""
type analogyEdge {
  """
  The item at the end of the edge.
  """
  node: Analogy

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An analogy between two entities.
"""
type Analogy {
  """
  Also called the "target", it is the entity that has a match.
  """
  entity: Node

  """
  The score of the analogy, the higher is the better.
  """
  score: Float

  """
  The number of visits that are shared between the entity and the target.
  """
  commonVisits: Int
}

"""
A duration in the HH:MM:SS format.
"""
scalar Duration

"""
An Allociné series.
"""
type SeriesOriginalBroadcast {
  """
  The partial date at which the first episode was broadcasted.
  """
  firstAiredDate: PartialDate

  """
  The partial date at which the last episode was broadcasted.
  """
  lastAiredDate: PartialDate

  """
  The original channel that broadcasted the series.
  """
  channel: Company

  """
  The date at which the first episode was broadcasted.
  """
  firstAired: DateLimited @deprecated(reason: "This date is partial, use firstAiredDate instead")

  """
  The date at which the last episode was broadcasted.
  """
  lastAired: DateLimited @deprecated(reason: "This date is partial, use lastAiredDate instead")
}

"""
A broadcast.
"""
type Broadcast {
  """
  The episode which is broadcasted.
  """
  episode: Episode

  """
  The original channel that broadcasted the episode.
  """
  channel: Company

  """
  The date when the episode is broadcasted.
  """
  date: DateLimited

  """
  The hour when the episode is broadcasted.
  """
  broadcastTime: String

  """
  The type of the release.
  """
  type: String
}

"""
An Allociné release for a series.
"""
type SeriesRelease implements Node & ReleaseInterface {
  """
  The id of the release.
  """
  id: ID!

  stringValue: String

  """
  The country of the release.
  """
  country: Country

  """
  The company for which this release is limited to.
  """
  companyLimitation: Company

  """
  The date of the release.
  """
  releaseDate: PartialDate

  """
  The area for this release
  """
  area: String

  """
  Some data related to this release.
  """
  data: Json

  """
  The official recommendation of CNC.
  """
  certificate: Certificate

  releaseTags: ReleaseTag

  """
  The date of the release.
  """
  date: DateLimited @deprecated(reason: "No longer used. Will be remove soon. Use releaseDate instead.")

  """
  The name of the release.
  """
  name: String @deprecated(reason: "Please use the 'releaseTags' field instead.")

  """
  The internal id of the release.
  """
  internalId: Int

  """
  The list of companies who worked in this production.
  """
  companies("If provided, will only return the companies that match that type." activity: [CompanyActivity!]): [EntityCompany!]!
}

"""
An Allociné main release.
"""
type MainReleaseInfo {
  """
  The main release type
  """
  type: CustomReleaseType

  """
  The associated release
  """
  release: ReleaseInterface
}

"""
special releases for a movie or a series with social action.
"""
enum CustomReleaseType {
  ONLY_ON_NETFLIX @deprecated(reason: "Use non-provider based types instead.")

  COMING_SOON_ON_NETFLIX @deprecated(reason: "Use non-provider based types instead.")

  TO_VOD

  HAS_ONLINE_PRODUCT

  TO_DVD

  HAS_RELEASE

  HAS_THEATER_RELEASE

  HAS_ONLINE_RELEASE

  HAS_SVOD_RELEASE

  NOW_PLAYING

  COMING_SOON
}

"""
All stats about the series.
"""
type SeriesStats {
  """
  An array of metrics for a given entity.
  """
  metric: StatsMetric

  """
  Stats about ratings given by the users.
  """
  userRating: UserRatingsStats

  """
  Stats about reviews given by the users. Note that ratings related to reviews are already aggregated into the userRating field
  """
  userReview: UserReviewsStats

  """
  Stats about reviews given by the press.
  """
  pressReview: PressReviewsStats

  wantToSeeCount: Int!
}

"""
Aggregated press statistics, used for statistical purpose.
"""
type PressReviewsStats {
  """
  The score given by the press.
  """
  score("Return score on base 10 by default (base 5 available)." base: Int = 10): Float

  """
  The amount of ratings for a given score range (default from min to max).
  """
  count: Int
}

"""
Sorting criteria for trivias.
"""
enum TriviaSorting {
  """
  Trivias are sorted by rank.
  """
  RANK

  """
  Trivias are sorted by modification date, most recent first.
  """
  LATEST

  """
  Trivias are sorted by modification date, oldest first.
  """
  OLDEST
}

"""
A connection to a list of items.
"""
type triviasConnection {
  totalCount: Int

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [triviasEdge]
}

"""
An edge in a connection.
"""
type triviasEdge {
  """
  The item at the end of the edge.
  """
  node: Trivia

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A trivia, it contains some facts about movies, series, etc...
"""
type Trivia {
  """
  The title of the trivia.
  """
  title("If true will strip the content." strip: Boolean = false): String

  """
  The content of the trivia.
  """
  body("If true will strip the content." strip: Boolean = false): String

  """
  The content of the trivia on json format.
  """
  body_json: BodyJson
}

"""
An Allocine festival selection.
"""
type FestivalSelection {
  """
  The id of the festival selection.
  """
  id: ID!

  """
  The internal id of the festival selection.
  """
  internalId: BigInt

  """
  Wether or not the nominee has won.
  """
  hasWon: Boolean

  """
  The nominated entity.
  """
  nominees: [Node]

  """
  The festival.
  """
  festival: Festival

  """
  The festival edition related to this selection.
  """
  edition: FestivalEdition

  """
  The festival competition related to this selection.
  """
  competition: FestivalCompetition

  """
  The festival award related to this selection.
  """
  award: FestivalAward
}

"""
An Allociné festival.
"""
type Festival implements Node {
  """
  The id of the festival.
  """
  id: ID!

  """
  The internal id of the festival.
  """
  internalId: Int

  stringValue: String

  """
  The name of the festival.
  """
  name: String

  """
  The localized synopsis of the festival.
  """
  synopsis: String

  """
  The type of the festival.
  """
  type: FestivalType

  """
  The image of the festival.
  """
  poster: InternalImage

  """
  The theme of the festival.
  """
  theme: FestivalTheme

  """
  The country where the festival is.
  """
  country: Country

  """
  The localation where the festival is.
  """
  location: Location

  """
  The number of edition existing in database.
  """
  editionCount: Int

  """
  The editions of the festival.
  """
  editions("If provide will get all edition which the starts date is after or before the selected date." startDate: FilterDate, "If provide will get all edition which the ends date is after or before the selected date." endDate: FilterDate, "The amount of editions to return. If not provided, will get all editions" first: Int, "The order of the editions to return. If none provided the \"YEAR\" descendant order is used." order: [FestivalEditionSorting] = [LATEST]): [FestivalEdition]

  """
  The competitions of the festival.
  """
  competitions: [FestivalCompetition]

  """
  The awards of the festival.
  """
  awards: [FestivalAward]

  """
  The paginated awards of the festival.
  """
  awardsList(after: String, "The amount of awards to return." first: Int = 10, before: String, last: Int, "The order of the awards to return." order: [AwardsSorting] = [ID_ASC]): FestivalAwardConnection

  """
  The list of the news related to this festival.
  """
  news(after: String, "The amount of news to return." first: Int = 10, before: String, last: Int, "The order of the news to return. If none provided the \"LATEST_PUBLICATION\" order is used." order: [NewsSorting] = [LATEST_PUBLICATION], "If provided, will only return the news that match that category. If many categories are provided, every news that match at least one type will be included." category: [NewsCategory] = []): newsConnection

  """
  The list of videos related to this festival.
  """
  videos("The amount of videos to return." first: Int = 10, "The order of the videos to return. If none provided the \"RANK\" order is used." order: [EntityVideoSorting] = [RANK], type: [VideoType], "If true will also include videos from festival edition." withChildren: Boolean = false): [Video]

  """
  The list of the images for this festival.
  """
  images("The amount of images to return." first: Int = 10, "The order of the images to return. If none provided the \"RANK\" order is used." order: [EntityImageSorting] = [RANK], "If true will also include videos from festival edition." withChildren: Boolean = false): [InternalImage]
}

enum FestivalType {
  CYCLES_NUIT

  FESTIVAL_INTERNATIONAL

  FESTIVAL_ITINERANT

  FESTIVAL_NATIONAL

  PRIX

  RENCONTRES

  RETROSPECTIVE
}

enum FestivalTheme {
  FESTIVAL_CINEMA_TELEVISION

  FESTIVAL_COURT_METRAGE

  FESTIVAL_LONG_ET_COURT_METRAGE

  FESTIVAL_LONG_METRAGE

  FESTIVAL_TELEVISION

  WEBTV
}

"""
To filter elements between two dates.
"""
input FilterDate {
  """
  If provide will create a pattern of date after selected date
  """
  after: DateLimited

  """
  If provide will create a pattern of date before selected date
  """
  before: DateLimited
}

"""
Sorting criteria for editions
"""
enum FestivalEditionSorting {
  """
  Editions are sorted by year desc.
  """
  LATEST

  """
  Editions are sorted by year asc.
  """
  OLDEST
}

"""
An Allociné festival edition.
"""
type FestivalEdition implements Node {
  """
  The id of the festival edition.
  """
  id: ID!

  """
  The internal id of the festival edition.
  """
  internalId: Int

  stringValue: String

  """
  The name of the festival edition.
  """
  name: String

  """
  The image of the festival edition.
  """
  poster: InternalImage

  """
  The edition number.
  """
  number: Int

  """
  The start date of the edition.
  """
  startsAt: DateLimited

  """
  The end date of the edition.
  """
  endsAt: DateLimited

  """
  The year of the edition.
  """
  year: Int

  """
  The festival itself.
  """
  festival: Festival

  """
  !!!!! DEPRECATED !!!!! The selections in this festival competition
  """
  selections("If true will include only the winners. Does nothing by default." hasWon: Boolean = null, "The amount of selections to return." first: Int = 50): [FestivalSelection] @deprecated(reason: "Use selection instead")

  """
  The selections the person was selected in.
  """
  selection(after: String, "The amount of entries to return." first: Int = 5, before: String, last: Int, "It's an entity id in base64. If provided, will only return the selection where the entity is present." entity: String = null, "If true will include only the winners. Does nothing by default." hasWon: Boolean = null): FestivalSelectionConnection

  """
  The news related to this edition.
  """
  news(after: String, "The amount of news to return." first: Int = 10, before: String, last: Int, "The order of the news to return. If none provided the \"LATEST_PUBLICATION\" order is used." order: [NewsSorting] = [LATEST_PUBLICATION], "If provided, will only return the news that match that category. If many categories are provided, every news that match at least one type will be included." category: [NewsCategory] = [], "A global id you want the news to be related to. (Like Movie:1234, Series:1234, ... in base64 encoded)" parentId: String, "If provided, will only return the news that match that type. If many types are provided, every news that match at least one type will be included." type: [NewsType] = []): newsConnection

  """
  The list of the images for this festival edition.
  """
  images("The amount of images to return." first: Int = 10, "The order of the images to return. If none provided the \"RANK\" order is used." order: [EntityImageSorting] = [RANK], "If true will also include videos from festival edition." withChildren: Boolean = false): [InternalImage]

  juries: [FestivalJury]

  """
  The list of videos related to this festival edition.
  """
  videos(after: String, first: Int = 10, before: String, last: Int, "The order of the videos to return. If none provided the \"RANK\" order is used." order: [EntityVideoSorting] = [RANK], type: [VideoType]): videosConnection
}

"""
A connection to a list of items.
"""
type FestivalSelectionConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [FestivalSelectionEdge]
}

"""
An edge in a connection.
"""
type FestivalSelectionEdge {
  """
  The item at the end of the edge.
  """
  node: FestivalSelection

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A connection to a list of items.
"""
type newsConnection {
  totalCount: Int

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [newsEdge]
}

"""
An edge in a connection.
"""
type newsEdge {
  """
  The item at the end of the edge.
  """
  node: News

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type FestivalJury {
  """
  Role on the festival (!!! still in development, data can be incomplete !!!)
  """
  role: String

  """
  The person that is part of the jury.
  """
  person: Person

  festival: Festival

  edition: FestivalEdition

  competition: FestivalCompetition
}

"""
An Allociné festival competition.
"""
type FestivalCompetition {
  """
  The id of the festival competition.
  """
  id: ID!

  """
  The internal id of the festival competition.
  """
  internalId: Int

  """
  The name of the festival competition.
  """
  name: String

  """
  The festival itself.
  """
  festival: Festival

  """
  The selections in this festival competition
  """
  selections("If true will include only the winners. Does nothing by default." hasWon: Boolean = null, "The amount of selections to return." first: Int = 50): [FestivalSelection]
}

"""
A connection to a list of items.
"""
type videosConnection {
  totalCount: Int

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [videosEdge]
}

"""
An edge in a connection.
"""
type videosEdge {
  """
  The item at the end of the edge.
  """
  node: Video

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné festival award.
"""
type FestivalAward {
  """
  The id of the festival award.
  """
  id: ID!

  """
  The internal id of the festival award.
  """
  internalId: Int

  """
  The name of the festival award.
  """
  name: String

  """
  The festival itself.
  """
  festival: Festival

  """
  The selections in this festival award
  """
  selections("If true will include only the winners. Does nothing by default." hasWon: Boolean = null, "The amount of selections to return." first: Int = 50): [FestivalSelection]

  """
  WIP - The selections for this award.
  """
  selection(after: String, "The amount of entries to return." first: Int = 5, before: String, last: Int, "It's an entity id in base64. If provided, will only return the selection where the entity is present." entity: String = null, "If true will include only the winners. Does nothing by default." hasWon: Boolean = null): FestivalSelectionConnection
}

"""
Sorting criteria for Award
"""
enum AwardsSorting {
  """
  Award sorted by id asc.
  """
  ID_ASC

  """
  Award sorted by id desc.
  """
  ID_DESC
}

"""
A connection to a list of items.
"""
type FestivalAwardConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [FestivalAwardEdge]
}

"""
An edge in a connection.
"""
type FestivalAwardEdge {
  """
  The item at the end of the edge.
  """
  node: FestivalAward

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Sorting criteria for soundtracks
"""
enum SoundtrackSorting {
  """
  No sort is applied.
  """
  NONE

  """
  Sorted by soundtrack title in alphabetical order.
  """
  ALPHABETICAL

  """
  Sorted by soundtrack title in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Sorted by linked entity popularity order.
  """
  ENTITY_POPULARITY

  """
  Sorted by reverse linked entity popularity order.
  """
  REVERSE_ENTITY_POPULARITY

  """
  Sorted by popularity order.
  """
  POPULARITY

  """
  Sorted by reverse popularity order.
  """
  REVERSE_POPULARITY

  """
  Sorted by spotify rank order.
  """
  RANK

  """
  Sorted by reverse spotify rank order.
  """
  REVERSE_RANK

  """
  Sorted by date order.
  """
  DATE

  """
  Sorted by reverse date order.
  """
  REVERSE_DATE
}

"""
A Spotify soundtrack for a series or a movie.
"""
type Soundtrack {
  """
  The soundtrack's Spotify URL.
  """
  spotify: String

  """
  The soundtrack's title.
  """
  title: String

  """
  The soundtrack's release date.
  """
  releasedAt: PartialDate

  """
  The performers of the soundtrack.
  """
  performers: [Person]

  """
  The list of the albums.
  """
  disk: [Disk]

  """
  The related entities of the soundtrack
  """
  relatedEntities("Filters the related entities of the soundtrack based on their type." type: [NodeTypeSoundtracks]): [Node]

  """
  The newest comments added on this soundtrack, up to 50 elements. Directly use disqus API to get more of them.
  """
  comments("The amount of comments to display." first: Int = 50): [Comment]
}

type Disk {
  """
  An album of tracks.
  """
  tracks("The amount of tracks to return." first: Int = 10): [Track]
}

type Track {
  """
  The spotify id.
  """
  isrc: String

  """
  The track's name.
  """
  name: String

  """
  The track's duration.
  """
  duration: Int
}

enum NodeTypeSoundtracks {
  MOVIE

  SERIES
}

"""
Describes how entities are related to other entities.
"""
type Relation {
  """
  The type of the relation.
  """
  type: RelationType

  """
  The other entity this entity is related to.
  """
  node: Node
}

enum RelationType {
  """
  This entity is a remake of another entity.
  """
  REMAKE_OF

  """
  This entity is a spin of (eg. it's based on the same universe) of another entity.
  """
  SPIN_OF_FROM

  """
  This entity is was inspired by another entity.
  """
  INSPIRED_BY
}

"""
User series and seasons progression (%) and next episode.
"""
type UserSeriesProgression {
  """
  the global percentage of episodes seen by the user.
  """
  globalPercent: Float

  """
  the seasons list.
  """
  seasons: [UserSeasonsProgression]

  """
  Next episode to watch.
  """
  nextEpisode: Episode

  """
  Count of unwatched episodes.
  """
  remainingEpisodes: Int
}

"""
User seasons progression (%)
"""
type UserSeasonsProgression {
  """
  the percentage of season seen by the user.
  """
  percent: Float

  """
  the season entity.
  """
  season: Season

  episodesSeenStatus: [UserEpisodeSeen]
}

type UserEpisodeSeen {
  episode: Episode @deprecated(reason: "Use id, title and number fields instead.")

  """
  The episode's id.
  """
  id: String

  """
  The episode's title.
  """
  title: String

  """
  The episode's number.
  """
  number: Int

  """
  Episode is seen or not.
  """
  seen: Boolean
}

"""
Available types for social actions.
"""
enum UserSocialActionType {
  """
  The user clicks on Facebook like button.
  """
  FACEBOOKLIKE

  """
  The user clicks on Fan button.
  """
  FAN

  """
  The user find another social action (by another user) helpful.
  """
  HELPFUL

  """
  The user clicks on the "Not Interested" button.
  """
  NOTINTERESTED

  """
  The user clicks on the "Seen It" button.
  """
  SEENIT

  """
  The user reports a spoiler for running season.
  """
  SPOILERBLOCKED

  """
  The user find another social action (by another user) unhelpful.
  """
  UNHELPFUL

  """
  The user clicks on the "Want To See" button.
  """
  WANTTOSEE

  """
  The user clicks on the "Subscribe" button. (Follow series, movies ... )
  """
  SUBSCRIBE

  """
  Opinion contains the rating and the review a user gave.
  """
  OPINION

  """
  Opinion contains juste the review a user gave.
  """
  REVIEW

  """
  The user began to follow a user.
  """
  FOLLOW

  """
  The user began to follow a collection.
  """
  FOLLOW_COLLECTION
}

"""
Available types for generic node.
"""
enum NodeType {
  """
  An Allociné series or program episode.
  """
  EPISODE

  """
  An Allociné festival.
  """
  FESTIVAL

  """
  An Allociné festival edition.
  """
  FESTIVALEDITION

  """
  An Allociné movie.
  """
  MOVIE

  """
  An Allociné News.
  """
  NEWS

  """
  An Allociné person.
  """
  PERSON

  """
  An Allociné program.
  """
  PROGRAM

  """
  An Allociné program episode.
  """
  PROGRAMEPISODE

  """
  An Allociné program season.
  """
  PROGRAMSEASON

  """
  An Allociné series or program season.
  """
  SEASON

  """
  An Allociné series.
  """
  SERIES

  """
  An Allociné user review.
  """
  USERREVIEW

  """
  An Allociné User
  """
  USER

  """
  An Allociné Video.
  """
  VIDEO
}

"""
User movie status.
"""
enum MovieStatus {
  WANT_TO_SEE

  SEEN

  RATING

  NOT_INTERESTED
}

"""
A connection to a list of items.
"""
type UserMovieConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [UserMovieEdge]
}

"""
An edge in a connection.
"""
type UserMovieEdge {
  """
  The item at the end of the edge.
  """
  node: UserMovieLeaf

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Returns a movie on which the user interacted.
"""
type UserMovieLeaf implements UserEntityLeafInterface {
  """
  The id of the UserEntityLeaf.
  """
  id: String

  """
  The related entity of the social action.
  """
  entity: Node

  """
  The user's Fan action on this entity.
  """
  fan: Fan

  """
  The user's NotInterested action on this entity.
  """
  notInterested: NotInterested

  """
  The user's opinion on this entity.
  """
  opinion: Opinion

  """
  The user's SeenIt action on this entity.
  """
  seenIt: SeenIt

  """
  The user's Subscribe action on this entity.
  """
  subscribe: Subscribe

  """
  The user's WantToSee action on this entity.
  """
  wantToSee: WantToSee

  """
  The user's Helpful action on this entity.
  """
  helpful: Helpful

  """
  The user's Unhelpful action on this entity.
  """
  unhelpful: Unhelpful

  """
  The list of social actions for this user and this entity.
  """
  actionList: [SocialActionInterface]

  """
  The movie on which the user performed a social action.
  """
  movie: Movie
}

"""
Sorting criteria for movies
"""
enum MovieSorting {
  """
  No sort is applied.
  """
  NONE

  """
  Movies sorted by title in alphabetical order.
  """
  ALPHABETICAL

  """
  Movies sorted by title in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Movies sorted by popularity on a daily basis.
  """
  DAILY_POPULARITY

  """
  Movies sorted by popularity on a weekly basis.
  """
  WEEKLY_POPULARITY

  """
  Movies sorted by popularity on a monthly basis.
  """
  MONTHLY_POPULARITY

  """
  Movies sorted by popularity on a three-monthly basis.
  """
  QUARTERLY_POPULARITY

  """
  Movies sorted by the amount of theaters playing them during the current week.
  """
  MOST_PLAYING_THEATERS

  """
  Movies sorted by their release dates, most recent releases first.
  """
  LATEST_RELEASES

  """
  Movies sorted by their release dates, oldest releases first.
  """
  OLDEST_RELEASES

  """
  Movies sorted by their VOD release dates, most recent releases first.
  """
  LATEST_RELEASES_VOD

  """
  Movies sorted by their VOD release dates, oldest releases first.
  """
  OLDEST_RELEASES_VOD

  """
  Movies sorted by their DVD/BR release dates, most recent releases first.
  """
  LATEST_RELEASES_PHYSICAL

  """
  Movies sorted by their DVD/BR release dates, oldest releases first.
  """
  OLDEST_RELEASES_PHYSICAL

  """
  Movies sorted by their first DVD/BR release dates, most recent releases first.
  """
  LATEST_FIRST_RELEASES_PHYSICAL

  """
  Movies sorted by their first DVD/BR release dates, oldest releases first.
  """
  OLDEST_FIRST_RELEASES_PHYSICAL

  """
  Movies sorted by their latest release dates, most recent releases first.
  """
  ORDER_LATEST_LAST_RELEASES

  """
  Movies sorted by their latest release dates, oldest releases first.
  """
  ORDER_OLDEST_LAST_RELEASES

  """
  Movies sorted by their rank, best movies first.
  """
  SCORE

  """
  Movies sorted by their rank, worst movies first.
  """
  SCORE_WORST

  """
  Movies sorted by their press rank, best rating on movies first.
  """
  PRESS

  """
  Movies sorted by their editorial rank, best rating on movies first.
  """
  EDITORIAL

  """
  Movies sorted by their editorial review date, recent to oldest.
  """
  EDITORIAL_LATEST

  """
  Movies sorted by the sum of the views on their video (TEASER and TRAILER).
  """
  VIDEOS_VIEWS_COUNT

  """
  Movies having a release with a past release date will be sorted first.
  """
  HAS_PAST_RELEASE_FIRST
}

"""
releaseFrom and releaseTo filters date types for a movie.
"""
enum MovieReleaseDateFilterType {
  THEATER

  VOD

  VOD_FIRST_RELEASE
}

"""
Filter by releases features
"""
input ReleaseFilterType {
  """
  When provided, will only select releases limited to the specified companies.
  """
  companyLimitation: [Int!]

  """
  When provided, will only select releases that were released after this date.
  """
  dateFrom: DateTime

  """
  When provided, will only select releases that were released before this date.
  """
  dateTo: DateTime

  """
  When provided, will only select releases corresponding the the specified statuses.
  """
  status: [ReleaseFilterStatusValue!]

  """
  When provided, will only select releases having one of the specified flags.
  """
  flags: [ReleaseFilterFlagValue!]

  """
  When provided, will only select the first release, regardless of its type.
  """
  isFirst: Boolean

  """
  When provided, will only select the first release of the specified type.
  """
  isFirstOfType: Boolean

  """
  When provided, will only select the last release, regardless of its type.
  """
  isLast: Boolean

  """
  When provided, will only select the last release of the specified type.
  """
  isLastOfType: Boolean

  """
  When provided, will only select releases of the specified type.
  """
  type: [ReleaseFilterTypeValue!]

  """
  When provided, will only select releases of the specified physical type.
  Can only be used with the "type: [PHYSICAL]" argument.
  """
  physicalMaterial: [ReleaseFilterPhysicalMaterialValue!]
}

enum ReleaseFilterStatusValue {
  RELEASED

  UPCOMING
}

enum ReleaseFilterFlagValue {
  EXCLUSIVE

  ORIGINAL
}

enum ReleaseFilterTypeValue {
  AVOD

  PHYSICAL

  REPLAY

  SVOD

  THEATER

  TV

  VOD
}

enum ReleaseFilterPhysicalMaterialValue {
  BLURAY

  DVD
}

input FilterRangeRating {
  """
  If provide will create a pattern of rating after selected float value.
  """
  after: Float

  """
  If provide will create a pattern of rating before selected float value.
  """
  before: Float
}

input FilterRangeRatingCounter {
  """
  If provide will create a pattern of rating after selected integer value.
  """
  after: Int

  """
  If provide will create a pattern of rating before selected integer value.
  """
  before: Int
}

"""
Some custom movie filters with complexs algorithms.
"""
enum MovieSpecialFilter {
  """
  Selects the best movies that are available in theaters. This algorithm is based on the amount of theaters on a given period.
  """
  BEST_PLAYING
}

input MovieFlagsType {
  """
  Filter list with entity that has a soundtrack.
  """
  has_soundtrack: Boolean

  """
  Filter list with entity that has some trivia.
  """
  has_trivia: Boolean

  """
  When provided will list amazon prime's entities
  """
  is_amazon: Boolean

  """
  Filter list with entity that has a physical product.
  """
  has_physical_product: Boolean

  """
  Filter movies list that have an editorial review
  """
  has_editorial_review: Boolean

  """
  Filter movies list that have a preview
  """
  has_preview: Boolean

  """
  Filter movies list that have a rerun release
  """
  has_rerun: Boolean

  """
  Filter movies list that have been approved by Club300
  """
  is_club_300_approved: Boolean

  """
  Filter movies list that have at least one video
  """
  has_video: Boolean

  """
  Filter movies list that have at least one trailer or teaser
  """
  has_trailer: Boolean
}

enum SvodProviders {
  ADN

  AMAZON_PRIME

  APPLE_TV

  BENSHI

  CANALPLAY

  DISNEY

  FILMO_TV

  GLOBO_PLAY

  HBO

  HBO_GO

  JOYN

  MADELEN

  MAGENTA_TV

  MOVISTAR

  MUBI

  MY_CANAL

  NETFLIX

  OCS

  SALTO

  SFR_PLAY

  STARZ_PLAY

  SKY

  TV_NOW

  UNIVERS_CINE
}

enum SvodFlags {
  """
  Already available on svod provider
  """
  RELEASED

  """
  Will be released on svod provider
  """
  UPCOMING

  """
  only available from a svod provider
  """
  EXCLUSIVE

  """
  original creation of the svod provider
  """
  ORIGINAL
}

enum BaseReleaseType {
  RELEASED

  VOD_RELEASE

  VOD_RELEASE_WITH_PRODUCT

  COMING_SOON_WITHOUT_DATE

  HAS_THEATER_RELEASE

  NOW_PLAYING

  COMING_SOON

  COMING_SOON_THEATER
}

enum PhysicalProductType {
  BLU_RAY

  DVD

  GLOBAL
}

"""
A connection to a list of items.
"""
type moviesConnection {
  """
  Facets are ES aggregation. Represent the available filter in ES.
  """
  facets: [Facets]

  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [moviesEdge]
}

"""
An edge in a connection.
"""
type moviesEdge {
  """
  The item at the end of the edge.
  """
  node: Movie

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type UserSuggestedEntities {
  """
  Returns a list of series suggested for the user.
  """
  series(after: String, "The amount of nodes to return." first: Int = 20, before: String, last: Int, "The status you want to avoid" statusIsNot: [SeriesStatus]!): UserToSeriesConnection

  """
  Returns a list of movies suggested for the user.
  """
  movies(after: String, "The amount of nodes to return." first: Int = 20, before: String, last: Int, "The status you want to avoid" statusIsNot: [MovieStatus]!, "A filter on Movie that will be released." releasedInFuture: Boolean): UserToMovieConnection

  """
  Returns a list of movies and series suggested for the user based on a collection items.
  """
  entitiesFromCollection(after: String, "The amount of nodes to return." first: Int = 20, before: String, last: Int, "Id of one collection." id_collection: String!, "The status you want to avoid" statusIsNot: [MovieStatus], inRandomOrder: Boolean = true): UserEntityInterfaceConnection

  """
  Returns a list of movies suggested for the user based on a collection items.
  """
  moviesFromCollection(after: String, "The amount of nodes to return." first: Int = 20, before: String, last: Int, "Id of one collection." id_collection: String!, "The status you want to avoid" statusIsNot: [MovieStatus], inRandomOrder: Boolean = true): UserMovieConnection

  """
  Returns a list of series suggested for the user based on a collection items.
  """
  seriesFromCollection(after: String, "The amount of nodes to return." first: Int = 20, before: String, last: Int, "Id of one collection." id_collection: String!, "The status you want to avoid" statusIsNot: [MovieStatus], inRandomOrder: Boolean = true): UserSeriesConnection
}

"""
User series status.
"""
enum SeriesStatus {
  WANT_TO_SEE

  SEEN

  FOLLOWED

  NOT_REVIEWED

  NOT_INTERESTED

  HAVING_PROGRESSION

  """
  Series having a rating on series level
  """
  RATING
}

"""
A connection to a list of items.
"""
type UserToSeriesConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [UserToSeriesEdge]
}

"""
An edge in a connection.
"""
type UserToSeriesEdge {
  """
  The item at the end of the edge.
  """
  node: UserToSeriesLeaf

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Returns a series suggested to the user.
"""
type UserToSeriesLeaf {
  """
  list of series suggested to the user.
  """
  series: Series
}

"""
A connection to a list of items.
"""
type UserToMovieConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [UserToMovieEdge]
}

"""
An edge in a connection.
"""
type UserToMovieEdge {
  """
  The item at the end of the edge.
  """
  node: UserToMovieLeaf

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Returns a movie suggested to the user.
"""
type UserToMovieLeaf {
  """
  list of movies suggested to the user.
  """
  movie: Movie
}

type UserConnections {
  """
  The followers of this user
  """
  followers(after: String, "The amount of nodes to return." first: Int = 20, before: String, last: Int, "Ids of one or more followers." id: [String], "The legacy ids of one or more followers." legacyId: [String]): UsersConnection

  """
  The followees of this user
  """
  followees(after: String, "The amount of nodes to return." first: Int = 20, before: String, last: Int, "Id of one or more publishers." id: [String], "The legacy ids of one or more publishers." legacyId: [String]): UsersConnection
}

"""
A connection to a list of items.
"""
type UsersConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [UsersEdge]
}

"""
An edge in a connection.
"""
type UsersEdge {
  """
  The item at the end of the edge.
  """
  node: User

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A connection to a list of items.
"""
type UserSocialActionConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [UserSocialActionEdge]
}

"""
An edge in a connection.
"""
type UserSocialActionEdge {
  """
  The item at the end of the edge.
  """
  node: UserSocialActionLeaf

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Return a list of all user's actions.
"""
type UserSocialActionLeaf {
  """
  The user who did the social action.
  """
  user: User

  """
  The related action of the user.
  """
  action: SocialActionInterface
}

"""
Author data
"""
type AuthorData {
  seo: Seo

  """
  List of author's social links.
  """
  socialLinks: SocialLinks
}

"""
Social links
"""
type SocialLinks {
  facebook: String

  instagram: String

  linkedin: String

  pinterest: String

  snapchat: String

  tiktok: String

  tumblr: String

  twitter: String

  vk: String

  wechat: String

  youtube: String
}

"""
Author stats
"""
type AuthorStats {
  """
  Total number of news written by the author.
  """
  totalNews: Int!

  """
  Total number of movie news written by the author.
  """
  totalMovieNews: Int!

  """
  Total number of series news written by the author.
  """
  totalSeriesNews: Int!
}

"""
Author and signature data
"""
type AuthorSignature {
  author: Author!

  name: String

  body: String
}

enum FilmographyEntityStatus {
  MOVIE_IN_THEATER

  MOVIE_COMING_IN_THEATER

  SERIES_IN_PROGRESS
}

enum FilmographyEntityType {
  MOVIE

  SERIES
}

"""
This items represents the work of a person on a single movie/series/program/season/episode.
"""
type FilmographyEntry {
  """
  What the person did.
  """
  activity: FilmographyActivity

  """
  On what the person worked.
  """
  work: Node

  """
  The year the person worked on this. On a movie it's the production year. On a series or a season it's the start date. When it is an episode, the corresponding season start date is used.
  """
  year: Int

  extra: FilmographyExtraData
}

union FilmographyActivity = CastMember|CreditsMember

"""
Extra filmography information
"""
type FilmographyExtraData {
  """
  List of the episodes numbers
  """
  season_episodes: [Int]
}

"""
A connection to a list of items.
"""
type filmographyConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [filmographyEdge]
}

"""
An edge in a connection.
"""
type filmographyEdge {
  """
  The item at the end of the edge.
  """
  node: FilmographyEntry

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
List of stats about person's appearance in each types of content.
"""
type PersonAppearanceStats {
  """
  Total of appearances in a movie.
  """
  totalMovies: Int!

  """
  Total of appearances in a series.
  """
  totalSeries: Int!
}

enum PersonMovieReleaseFlags {
  """
  Retrieve all movies
  """
  ALL

  """
  Retrieve all movies currently in theaters
  """
  IN_THEATERS

  """
  Retrieve all movies to be released in the future
  """
  UPCOMING
}

"""
A connection to a list of items.
"""
type seriesConnection {
  """
  Facets are ES aggregation. Represent the available filter in ES.
  """
  facets: [Facets]

  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [seriesEdge]
}

"""
An edge in a connection.
"""
type seriesEdge {
  """
  The item at the end of the edge.
  """
  node: Series

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A connection to a list of items.
"""
type personsCollaborationConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [personsCollaborationEdge]
}

"""
An edge in a connection.
"""
type personsCollaborationEdge {
  """
  The item at the end of the edge.
  """
  node: PersonCollaboration

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
All persons and entities related aggregated by selected person.
"""
type PersonCollaboration {
  """
  A person who worked with the current person.
  """
  person: Person!

  """
  The list of entities (movie or series) where the collaboration took place.
  """
  entities: [Node!]

  """
  The number of collaboration.
  """
  totalCollaboration: Int!
}

"""
A date interval in the ISO 8601 format.
"""
scalar DateInterval

type MovieCompany {
  """
  The activity of the company.
  """
  activity: String

  """
  The company.
  """
  company: Company

  """
  The rank of the company for this movie.
  """
  rank: Int
}

"""
All differents releases for a movie.
"""
enum MovieReleaseType {
  RELEASED

  VOD_RELEASE

  VOD_RELEASE_WITH_PRODUCT

  COMING_SOON_WITHOUT_DATE

  HAS_THEATER_RELEASE

  NOW_PLAYING

  COMING_SOON

  COMING_SOON_THEATER

  COMING_SOON_ON_NETFLIX @deprecated(reason: "Use non-provider based types instead.")

  DIRECT_TO_TV

  DIRECT_TO_VOD

  DVD_BD_OFFICIAL_RELEASE_DATE

  ECINEMA

  FILMING

  LIMITED_THEATER_RELEASE

  ONLY_ON_CANALPLAY @deprecated(reason: "Use non-provider based types instead.")

  ONLY_ON_ITUNES @deprecated(reason: "Use non-provider based types instead.")

  ONLY_ON_NETFLIX @deprecated(reason: "Use non-provider based types instead.")

  ONLY_ON_OCS @deprecated(reason: "Use non-provider based types instead.")

  OUTLINE

  PLATFORM_THEATER_RELEASE

  POST_PRODUCTION

  RE_RELEASED

  SPECIAL_ADVANCE_SCREENING

  SVOD_RELEASE

  VODEST_RELEASE

  DVD_RELEASE

  BLU_RAY_RELEASE
}

"""
An Allociné release for a movie.
"""
type MovieRelease implements Node & ReleaseInterface {
  """
  The id of the release.
  """
  id: ID!

  stringValue: String

  """
  The country of the release.
  """
  country: Country

  """
  The company for which this release is limited to.
  """
  companyLimitation: Company

  """
  The date of the release.
  """
  releaseDate: PartialDate

  """
  The area for this release
  """
  area: String

  """
  Some data related to this release.
  """
  data: Json

  """
  The official recommendation of CNC.
  """
  certificate: Certificate

  releaseTags: ReleaseTag

  """
  The date of the release.
  """
  date: DateLimited @deprecated(reason: "No longer used. Will be remove soon. Use releaseDate instead.")

  """
  The name of the release.
  """
  name: String @deprecated(reason: "Please use the 'releaseTags' field instead.")

  """
  The internal id of the release.
  """
  internalId: Int

  """
  The list of companies who worked in this production.
  """
  companies("If provided, will only return the companies that match that type." activity: [CompanyActivity!]!): [EntityCompany!]!
}

"""
An Allociné editorial review.
"""
type EditorialReview implements Node {
  """
  The id of the editorial review.
  """
  id: ID!

  """
  The internal id of the editorial review.
  """
  internalId: Int

  stringValue: String

  """
  The body text of the editorial review.
  """
  body: String

  """
  The content of the editorial review on json format.
  """
  body_json: BodyJson

  """
  The rating of the editorial review.
  """
  rating: Rating

  """
  The author name of the editorial review.
  """
  authorName: String

  """
  The title of the editorial review.
  """
  title: String

  """
  The editorial review data.
  """
  data: Json

  """
  The newest comments added on this editorial review, up to 50 elements. Directly use disqus API to get more of them.
  """
  comments("The amount of comments to display." first: Int = 50): [Comment]

  """
  the date when the editorial review was created.
  """
  createdAt: DateTime
}

"""
A connection to a list of items.
"""
type FestivalEditionConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [FestivalEditionEdge]
}

"""
An edge in a connection.
"""
type FestivalEditionEdge {
  """
  The item at the end of the edge.
  """
  node: FestivalEdition

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An external link contains information to generate links for a given locale.
"""
type ExternalLink {
  """
  The id of the entity in the targeted locale.
  """
  id: Int

  """
  The title of the external link.
  """
  title: String

  """
  The locale of the external link.
  """
  locale: String
}

"""
All stats about the movie.
"""
type MovieStats {
  """
  An array of metrics for a given entity.
  """
  metric: StatsMetric

  """
  Stats about ratings given by the users.
  """
  userRating: UserRatingsStats

  """
  Stats about reviews given by the users. Note that ratings related to reviews are already aggregated into the userRating field
  """
  userReview: UserReviewsStats

  """
  Stats about reviews given by the press.
  """
  pressReview: PressReviewsStats

  wantToSeeCount: Int!

  commentsCount: Int
}

"""
Technical flags about movie to have rapid information
"""
type MovieFlags {
  """
  True if the movie is coming soon on netflix.
  """
  comingSoonOnNetflix: Boolean

  """
  True if the movie has dvd release.
  """
  hasDvdRelease: Boolean

  """
  True if the movie has vod, svod or vodest.
  """
  hasOnlineProduct: Boolean

  """
  True if the movie has vodest.
  """
  hasVodProduct: Boolean

  """
  True if the movie has vod release.
  """
  hasOnlineRelease: Boolean

  """
  True if the movie has bluray or dvd.
  """
  hasPhysicalProduct: Boolean

  """
  True if the movie has future showtime.
  """
  hasShowtime: Boolean

  """
  True if the movie has soundtrack.
  """
  hasSoundtrack: Boolean

  """
  True if the movie is outing in theater.
  """
  hasTheaterRelease: Boolean

  """
  True if the movie has some trivia.
  """
  hasTrivia: Boolean

  """
  True if the movie has some awards or nominations.
  """
  hasAwards: Boolean

  """
  True if the movie is coming soon without release dates.
  """
  isComingSoon: Boolean

  """
  True if the movie is played at least in one theater in the next 7 days.
  """
  isPlayingNow: Boolean

  """
  True if the movie is only on netflix.
  """
  onlyNetflix: Boolean

  """
  True if the movie has tv release.
  """
  tvRelease: Boolean

  """
  True if the movie has a preview at least in one theater.
  """
  hasPreview: Boolean

  """
  True if the movie is approved by the 'club 300'.
  """
  isClub300Approved: Boolean

  """
  True if the movie has at least one news with tag 'club 300'.
  """
  hasClub300News: Boolean

  """
  True if the movie has at least one news.
  """
  hasNews: Boolean
}

"""
A boxoffice.
"""
type BoxOffice {
  """
  The period range.
  """
  range: DateTimeRange

  """
  The boxoffice's value during the period range.
  """
  value: Int

  """
  The total between the first period range and this one.
  """
  cumulative: Int

  """
  The country of the box-office.
  """
  country: Country
}

"""
Global boxoffice.
"""
type GlobalBoxOffice {
  """
  The boxoffice's value.
  """
  value: Int

  """
  Unit
  """
  unit: BoxOfficeType
}

"""
Movie affinity score for current user.
"""
type MovieUserAffinity {
  reason: [UserAffinityScoreReason!]

  affinityScore: Float
}

"""
Retrieve an entity by another id than Allocine, like IMDB, Gaumont, eidr, isan, orange, hubble, legacy, Pathé Alex
"""
input ComposedIdType {
  """
  The id of the entity.
  """
  id: String!

  """
  The provider of the id.
  """
  provider: Provider!
}

enum Provider {
  CINEMASOURCE

  EIDR

  ISAN

  GAUMONT

  IMDB

  ORANGE

  HUBBLE

  PATHEALEX

  MOVIEPILOT

  LEGACY
}

"""
Sorting criteria for festivals
"""
enum FestivalSorting {
  """
  Festivals sorted by name in alphabetical order.
  """
  ALPHABETICAL

  """
  Festivals sorted by name in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Festivals sorted by their rank.
  """
  RANK

  """
  Festivals sorted by in reverse rank order.
  """
  REVERSE_RANK
}

"""
A connection to a list of items.
"""
type festivalConnection {
  """
  Facets are ES aggregation. Represent the available filter in ES.
  """
  facets: [Facets]

  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [festivalEdge]
}

"""
An edge in a connection.
"""
type festivalEdge {
  """
  The item at the end of the edge.
  """
  node: Festival

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Sorting criteria for images
"""
enum ImageSorting {
  """
  Images are sorted by added date.
  """
  LATEST

  """
  Images sorted by title in alphabetical order.
  """
  ALPHABETICAL

  """
  Images sorted by title in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL
}

"""
All types of images available.
"""
enum ImageType {
  PHOTO

  POSTER

  VIGNETTE_MAGAZINE
}

"""
A connection to a list of items.
"""
type imagesConnection {
  totalCount: Int

  backlink("A custom label set by backoffice." label: String): Backlink

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [imagesEdge]
}

"""
An edge in a connection.
"""
type imagesEdge {
  """
  The item at the end of the edge.
  """
  node: InternalImage

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Sorting criteria for localizations
"""
enum LocalizationSorting {
  """
  No sort is applied.
  """
  NONE

  """
  Sorted by localization name in alphabetical order.
  """
  ALPHABETICAL

  """
  Sort by number of theaters linked to the localization ascendant.
  """
  THEATER_COUNT

  """
  Sort by number of theaters linked to the localization descendant.
  """
  REVERSE_THEATER_COUNT

  """
  Sort by number of parent localization ascendant.
  """
  PARENT_NUMBER

  """
  Sort by number of parent localization ascendant.
  """
  REVERSE_PARENT_NUMBER

  """
  Sort ascendant by number of screen attached to the localization's theaters.
  """
  SCREEN_COUNT

  """
  Sort descendant by number of screen attached to the localization's theaters.
  """
  REVERSE_SCREEN_COUNT

  """
  Sort with the closest in space first.
  """
  CLOSEST

  """
  Sort by number of theaters that display the movie. Need movieDisplayed.
  """
  THEATER_FOR_MOVIE_COUNTER

  """
  Sort by number of theaters that display the movie in the next sliding weeks (number defined by product). Need movieDisplayedWithinTwoSlidingWeeks.
  """
  THEATER_FOR_MOVIE_COUNTER_WITHIN_TWO_SLIDING_WEEKS @deprecated(reason: "Use THEATER_FOR_MOVIE_COUNTER_WITHIN_PRODUCT_SLIDING_WEEKS instead")

  """
  Sort by number of theaters that display the movie in the next sliding weeks (number defined by product). Need movieDisplayedWithinProductSlidingWeeks.
  """
  THEATER_FOR_MOVIE_COUNTER_WITHIN_PRODUCT_SLIDING_WEEKS

  """
  Sort by score the matching result.
  """
  SCORE
}

"""
A wrapper object to get information about the current session.
"""
type Me {
  """
  Information about the current API session.
  """
  token: ApplicationToken

  """
  Information about the user for the current API session. Can be null.
  """
  user: User
}

"""
An Allocine Application Token.
"""
type ApplicationToken {
  """
  The raw/encoded value of the token.
  """
  stringValue: String

  """
  The date when this Application token will expire.
  """
  expiration: DateTime

  """
  The username which is bound to this token.
  """
  username: String

  """
  The application name which is bound to this token.
  """
  applicationName: String
}

"""
Metadata on an entity.
"""
type EntityMetadata {
  gid: String!

  active: Boolean!
}

"""
Sorting criteria for movies
"""
enum MovieShowtimeSorting {
  """
  No sort is applied.
  """
  NONE

  """
  Sort by release date of the movie.
  """
  RELEASE_DATE

  """
  Sort by release date of the movie descending.
  """
  REVERSE_RELEASE_DATE

  """
  Sort by weekly popularity descending.
  """
  POPULARITY
}

"""
A connection to a list of items.
"""
type moviesByTheaterListConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [moviesByTheaterListEdge]
}

"""
An edge in a connection.
"""
type moviesByTheaterListEdge {
  """
  The item at the end of the edge.
  """
  node: MovieByTheaterLeaf

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type MovieByTheaterLeaf {
  """
  The movies broadcasted in the theater.
  """
  movie: Movie
}

"""
Sorting criteria for movies
"""
enum ShowtimeSorting {
  """
  No sort is applied.
  """
  NONE

  """
  Sorted by movie title or theater name in alphabetical order. Using in theaterShowtimeList and movieShowtimeList.
  """
  ALPHABETICAL

  """
  Sorted by movie title or theater name in reverse alphabetical order. Using in theaterShowtimeList and movieShowtimeList.
  """
  REVERSE_ALPHABETICAL

  """
  Sort with the closest in space first. Only for theaterShowtimeList.
  """
  CLOSEST

  """
  Sorted by movie premieres. Only for movieShowtimeList.
  """
  PREVIEW

  """
  Sorted by movie with showtime in first week outing. Only for movieShowtimeList.
  """
  WEEKLY_OUTING

  """
  Sort by popularity (weekly) of the movie. Only for movieShowtimeList.
  """
  WEEKLY_POPULARITY

  """
  Sort by release date desc.
  """
  REVERSE_RELEASE_DATE

  """
  Sort by release date asc.
  """
  RELEASE_DATE

  """
  Sort by showtime date asc.
  """
  SHOWTIME_DATE

  """
  Sort by group rank. Only available on theaterShowtimeList and when using group filter.
  """
  GROUP_RANK
}

input FacetsMovieShowtimeType {
  """
  The aggregation field name.
  """
  field: FacetFieldShowtimeValue!

  """
  When provide will return the number count of facets.
  """
  first: Int

  """
  When provide will order aggregation keys.
  """
  order: [FacetSorting]
}

enum FacetFieldShowtimeValue {
  PROJECTION

  EXPERIENCE

  COMFORT

  VERSION

  PICTURE

  SOUND

  SERVICE
}

"""
A connection to a list of items.
"""
type movieShowtimeByTheaterListConnection {
  """
  Facets are ES aggregation. Represent the available filter in ES.
  """
  facets: [Facets]

  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [movieShowtimeByTheaterListEdge]
}

"""
An edge in a connection.
"""
type movieShowtimeByTheaterListEdge {
  """
  The item at the end of the edge.
  """
  node: MovieShowtimeLeaf

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Will get a movies and showtimes aggregation by selected theater.
"""
type MovieShowtimeLeaf {
  """
  The movies broadcasted in the theater.
  """
  movie: Movie

  """
  The showtimes screened for the movie.
  """
  showtimes("Filters the showtime by diffusion version." version: [ShowtimeVersion]): [Showtime]
}

type Showtime implements Node {
  """
  The id of the showtime.
  """
  id: ID!

  """
  The internal id of the showtime.
  """
  internalId: BigInt

  """
  The start date of the showtime (the hour is about the theater).
  """
  startsAt: DateTime

  """
  The theater screens related to this showtime.
  """
  screen: TheaterScreen

  stringValue: String

  """
  The diffusion version.
  """
  diffusionVersion: ShowtimeVersion

  """
  The comforts available in showtime
  """
  comfort: [Comfort]

  """
  !!! WARNING - The data in this endpoint are sensible and not accurate. You should not use them as long as this warning is present !!! The services available in showtime
  """
  service: [TheaterService]

  """
  The experience of the showtime
  """
  experience: [Experience]

  """
  The projection of the showtime
  """
  projection: [Projection]

  """
  The picture of the showtime
  """
  picture: [Picture]

  """
  The language of the showtime
  """
  languages: [Language]

  """
  The diffusion sound of the showtime
  """
  sound: [Sound]

  """
  The delay between the indicated start date of the showtime and the actual beginning of the projection.
  """
  timeBeforeStart: DateInterval

  """
  Technical information about the showtime.
  """
  data: ShowtimeData

  """
  Technical information about the showtime.
  """
  tags("Filter the tags." filter: [TagsFilterType!]): [String!]!

  """
  True if showtime is preview.
  """
  isPreview: Boolean

  """
  True if showtime is link on movies that is not in theater in the two showtime week but have showtime in future.
  """
  isFutureReleaseSoon: Boolean

  """
  True if showtime is displayed in theater in the first outing week of movie.
  """
  isWeeklyMovieOuting: Boolean

  """
  Showtime accessibility features
  """
  accessibility: [Accessibility]

  """
  The projection format.
  """
  format: ProjectionFormat @deprecated(reason: "Use projection instead.")

  """
  The projection techno.
  """
  techno: [TechnoFlag] @deprecated(reason: "Use experience instead.")

  """
  The projection language.
  """
  version: Language @deprecated(reason: "This field is not longer used. Use diffusionVersion to have real version.")
}

"""
Technical data about showtimes.
"""
type ShowtimeData {
  """
  An array of ticketing reservation.
  """
  ticketing("If provided, will filter on ticketing types." type: [TicketingTypeEnum], "If provider, will filter on ticketing providers." provider: [String]): [Ticketing]
}

"""
The type of the ticketing URL.
"""
enum TicketingTypeEnum {
  MOBILE

  DESKTOP
}

"""
The ticketing reservation url for desktop and mobile
"""
type Ticketing {
  """
  An array of URLs.
  """
  urls: [String]

  """
  The type of the ticketing URL.
  """
  type: TicketingTypeEnum

  """
  The provider of the ticketing URL.
  """
  provider: String
}

"""
The available tags to show.
"""
enum TagsFilterType {
  COMFORT

  EXPERIENCE

  LANGUAGES

  PICTURE

  PROJECTION

  SERVICE

  SOUND
}

"""
The different codes for a special operation.
"""
enum SpecialOperationCode {
  CLUB300

  SPONSORED_NEWS

  VIDEO_SELECTION_VIDEOS_HOME

  EMERGENCE

  MAC_DONALDS

  NETFLIX_NEWS

  NETFLIX_TAB

  NETFLIX_SPONSORED_NEWS

  NETFLIX_HOME

  VIDEO_SELECTION_GENERAL_PAGE

  SPONSORED_AUTOCOMPLETE

  TICKET_ANCHOR

  DISNEY_HOME

  CANAL_HOME

  AQOA_TOP_VOD

  EMERGENCE_SVOD

  VOD_HOME

  ROLLER_HOME

  NOVELAS_HOME

  IMAX_HOME
}

"""
Related entities type on news.
"""
enum NewsRelatedType {
  """
  Filter news by related entities type movie.
  """
  MOVIE

  """
  Filter news by related entities type series.
  """
  SERIES

  """
  Filter news by related entities type person.
  """
  PERSON
}

"""
Sorting criteria for person
"""
enum PersonSorting {
  """
  No sort is applied.
  """
  NONE

  """
  Persons sorted by 'first_name._.last_name' in alphabetical order.
  """
  ALPHABETICAL

  """
  Persons sorted by 'first_name._.last_name' in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Persons sorted by popularity on a daily basis.
  """
  DAILY_POPULARITY

  """
  Persons sorted by popularity on a weekly basis.
  """
  WEEKLY_POPULARITY

  """
  Persons sorted by popularity on a monthly basis.
  """
  ORDER_MONTHLY_POPULARITY

  """
  Persons sorted by popularity on a all time basis.
  """
  ALL_TIME_POPULARITY
}

"""
A connection to a list of items.
"""
type personsConnection {
  """
  Facets are ES aggregation. Represent the available filter in ES.
  """
  facets: [Facets]

  totalCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [personsEdge]
}

"""
An edge in a connection.
"""
type personsEdge {
  """
  The item at the end of the edge.
  """
  node: Person

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné program.
"""
type Program implements Node {
  """
  The id of the program.
  """
  id: ID!

  """
  The internal id of the program.
  """
  internalId: Int

  """
  The title of the program.
  """
  title: String

  stringValue: String

  """
  The poster of the season.
  """
  poster: InternalImage

  """
  The cover of the program
  """
  cover: InternalImage

  """
  The original title of the program.
  """
  originalTitle: String

  """
  The synopsis of the program, can be short or long (short by default).
  """
  synopsis("If true will return the full synopsis." long: Boolean = false): String

  """
  The keywords of the program.
  """
  keywords: String

  """
  The paginated seasons of the program.
  """
  seasons(after: String, first: Int = 10, before: String, last: Int, "The order of the seasons to return." order: [SeasonSorting] = [NUMBER_ASC]): programSeasonsConnection

  """
  The people working on this program.
  """
  credits("If provided, only persons of this department will be returned." department: PositionDepartment, "The amount of persons to return." first: Int = 10): [CreditsMember]

  """
  The tags of the program.
  """
  tags: TagCollection

  """
  The newest comments added on this program, up to 50 elements. Directly use disqus API to get more of them.
  """
  comments("The amount of comments to display." first: Int = 50): [Comment]

  """
  The list of the user reviews of this Program.
  """
  userReviews(after: String, first: Int = 10, before: String, last: Int, "Only includes reviews that were written after this date." from: DateTime, "Only includes reviews that were written before this date." to: DateTime, "Filters the reviews by positive or negative sentiment." sentiment: ReviewSentimentFilter = BOTH, "The order to apply to the reviews." order: [ReviewSorting] = [LATEST], "Only includes reviews for rating equals to X or X,5." rating: ReviewRating, "If true will also include reviews from seasons of the parentId." withChildren: Boolean = false): userReviewsConnection

  """
  Informations about the first broadcast of the program.
  """
  originalBroadcast: ProgramOriginalBroadcast

  """
  The usual length of an episode. Special episodes can be shorter/longer.
  """
  episodeLength: Duration

  """
  The number of known seasons (existing and coming).
  """
  seasonCount: Int

  """
  The number of known episodes (existing and coming).
  """
  episodeCount: Int

  """
  The number of episodes existing in database
  """
  computedEpisodeCount: Int

  """
  The number of seasons existing in database
  """
  computedSeasonCount: Int

  """
  The list of videos related to this program.
  """
  videos("The amount of videos to return." first: Int = 10, "The order of the videos to return. If none provided the \"RANK\" order is used." order: [EntityVideoSorting] = [RANK], type: [VideoType], "If true will also include videos from episodes and seasons of this program." withChildren: Boolean = false): [Video]

  """
  Some stats about metric, userRating, userReview and pressReview.
  """
  stats: SeriesStats
}

"""
A connection to a list of items.
"""
type programSeasonsConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [programSeasonsEdge]
}

"""
An edge in a connection.
"""
type programSeasonsEdge {
  """
  The item at the end of the edge.
  """
  node: ProgramSeason

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné program season.
"""
type ProgramSeason implements Node {
  """
  The id of the season.
  """
  id: ID!

  """
  The internal id of the season.
  """
  internalId: Int

  """
  The number of the season.
  """
  number: Int

  stringValue: String

  """
  The poster of the season.
  """
  poster: InternalImage

  """
  The program of the season.
  """
  program: Program

  """
  The list of episodes in that season.
  """
  episodes(after: String, "The amount of episodes to return for this season." first: Int = 20, before: String, last: Int, "The order of the episodes to return." order: [EpisodeSorting] = [NUMBER_ASC]): programEpisodesConnection

  """
  The list of videos related to this program.
  """
  videos("The amount of videos to return." first: Int = 10, "The order of the videos to return. If none provided the \"RANK\" order is used." order: [EntityVideoSorting] = [RANK], "The types of video we want to display." type: [VideoType], "If true will also include videos from episodes of this season." withChildren: Boolean = false): [Video]

  """
  The people playing on this season.
  """
  cast("The amount of persons to return." first: Int = 5): [CastMember]

  """
  The people working on this season.
  """
  credits("If provided, only persons of this department will be returned." department: PositionDepartment, "The amount of persons to return." first: Int = 5): [CreditsMember]

  """
  The start date of the season.
  """
  startsAt: DateLimited

  """
  The end date of the season.
  """
  endsAt: DateLimited

  """
  The tags of the season.
  """
  tags: TagCollection

  """
  Technical informations about the season.
  """
  data: SeasonData

  """
  All stats for the season.
  """
  stats: SeasonStats
}

"""
A connection to a list of items.
"""
type programEpisodesConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [programEpisodesEdge]
}

"""
An edge in a connection.
"""
type programEpisodesEdge {
  """
  The item at the end of the edge.
  """
  node: ProgramEpisode

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An Allociné program episode
"""
type ProgramEpisode implements Node {
  """
  The id of the episode
  """
  id: ID!

  """
  The internal id of the episode
  """
  internalId: Int

  """
  The number of the episode in its season
  """
  number: Int

  """
  The number of the episode in the whole prigram
  """
  numberInProgram: Int

  """
  The title of the episode
  """
  title: String

  """
  The original title of the episode
  """
  originalTitle: String

  stringValue: String

  """
  The keywords of the program
  """
  keywords: String

  """
  The season of the episode
  """
  season: ProgramSeason

  """
  The list of videos related to this program.
  """
  videos("The amount of videos to return." first: Int = 10, "The order of the videos to return. If none provided the \"RANK\" order is used." order: [EntityVideoSorting] = [RANK], type: [VideoType]): [Video]

  """
  The program of the episode, it is equivalent as getting the program from the season.
  """
  program: Program

  """
  The people playing in the program this season.
  """
  cast("The amount of persons to return." first: Int = 5): [CastMember]

  """
  The people working on the program this season.
  """
  credits("If provided, only persons of this department will be returned." department: PositionDepartment, "The amount of persons to return." first: Int = 5): [CreditsMember]
}

"""
An Allociné program.
"""
type ProgramOriginalBroadcast {
  """
  The date at which the first episode was broadcasted.
  """
  firstAired: PartialDate

  """
  The date at which the last episode was broadcasted.
  """
  lastAired: PartialDate

  """
  The original channel that broadcasted the program.
  """
  channel: Company
}

"""
Sorting criteria for program
"""
enum ProgramSorting {
  """
  No sort is applied.
  """
  NONE

  """
  Program sorted by popularity on (all time).
  """
  ALL_TIME_POPULARITY

  """
  Program sorted by title in alphabetical order.
  """
  ALPHABETICAL

  """
  Program sorted by the latest video created.
  """
  LATEST_VIDEO

  """
  Program sorted by their press rank, best best rating on program first.
  """
  PRESS

  """
  Program sorted by title in alphabetical reversed order.
  """
  REVERSE_ALPHABETICAL

  """
  Program sorted by user rating score.
  """
  SCORE

  """
  Program sorted by popularity on a weekly basis.
  """
  WEEKLY_POPULARITY
}

"""
A connection to a list of items.
"""
type programConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [programEdge]
}

"""
An edge in a connection.
"""
type programEdge {
  """
  The item at the end of the edge.
  """
  node: Program

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Available type for searching.
"""
enum SearchTypes {
  """
  Search movie type.
  """
  Movie

  """
  Search person type.
  """
  Person

  """
  Search series type.
  """
  Series

  """
  Search theater type.
  """
  Theater

  """
  Search video type.
  """
  Video

  """
  Search news type.
  """
  News

  """
  Search company type.
  """
  Company

  """
  Search program type.
  """
  Program

  """
  Search tag type.
  """
  Tag
}

"""
Sorting criteria for search.
"""
enum SearchSorting {
  """
  No sort is applied.
  """
  SCORE

  """
  Results sorted by label in alphabetical order.
  """
  ALPHABETICAL_LABEL

  """
  Results sorted by label in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL_LABEL

  """
  Results sorted by original label in alphabetical order.
  """
  ALPHABETICAL_ORIGINAL_LABEL

  """
  Results sorted by original label in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL_ORIGINAL_LABEL

  """
  Movies sorted by their latest release dates, most recent releases first (Only apply if type Movie is selected).
  """
  ORDER_LATEST_LAST_RELEASES

  """
  Movies sorted by their latest release dates, oldest releases first (Only apply if type Movie is selected).
  """
  ORDER_OLDEST_LAST_RELEASES
}

enum SearchProvider {
  NEW

  LEGACY
}

"""
A connection to a list of items.
"""
type searchResultsConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [searchResultsEdge]
}

"""
An edge in a connection.
"""
type searchResultsEdge {
  """
  The item at the end of the edge.
  """
  node: SearchResult

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
The search result.
"""
type SearchResult {
  """
  The type of the node.
  """
  type: String

  """
  The score for this result.
  """
  score: Float

  """
  The label of the result.
  """
  label: String

  """
  The result is in the given collection.
  """
  inCollection: Boolean

  """
  The node itself.
  """
  node: Node
}

"""
The aggregated search result.
"""
type SearchTopListResult {
  movies: SearchTopMovie

  persons: SearchTopPerson

  series: SearchTopSeries

  tags: SearchTopTag

  videos: SearchTopVideo

  companies: SearchTopCompany

  programs: SearchTopProgram

  news: SearchTopNews

  theaters: SearchTopTheaters
}

"""
A list of movies.
"""
type SearchTopMovie {
  """
  The amount of items.
  """
  count: Int!

  """
  The items searched for
  """
  items: [Movie]!
}

"""
A list of persons.
"""
type SearchTopPerson {
  """
  The amount of items.
  """
  count: Int!

  """
  The items searched for
  """
  items: [Person]!
}

"""
A list of series.
"""
type SearchTopSeries {
  """
  The amount of items.
  """
  count: Int!

  """
  The items searched for
  """
  items: [Series]!
}

"""
A list of tags.
"""
type SearchTopTag {
  """
  The amount of items.
  """
  count: Int!

  """
  The items searched for
  """
  items: [Tag]!
}

"""
A list of videos.
"""
type SearchTopVideo {
  """
  The amount of items.
  """
  count: Int!

  """
  The items searched for
  """
  items: [Video]!
}

"""
A list of companies.
"""
type SearchTopCompany {
  """
  The amount of items.
  """
  count: Int!

  """
  The items searched for
  """
  items: [Company]!
}

"""
A list of programs.
"""
type SearchTopProgram {
  """
  The amount of items.
  """
  count: Int!

  """
  The items searched for
  """
  items: [Program]!
}

"""
A list of news.
"""
type SearchTopNews {
  """
  The amount of items.
  """
  count: Int!

  """
  The items searched for
  """
  items: [News]!
}

"""
A list of theaters.
"""
type SearchTopTheaters {
  """
  The amount of items.
  """
  count: Int!

  """
  The items searched for
  """
  items: [Theater]!
}

input SeriesFlagsType {
  """
  Filter list with entity that has a soundtrack.
  """
  has_soundtrack: Boolean

  """
  Filter list with entity that has some trivia.
  """
  has_trivia: Boolean

  """
  When provided will list amazon prime's entities
  """
  is_amazon: Boolean

  """
  Filter list with entity that has a physical product.
  """
  has_physical_product: Boolean

  """
  Filter movies list that have an editorial review
  """
  has_editorial_review: Boolean

  """
  When provided will list Netflix's series
  """
  is_netflix: Boolean

  """
  Filter list with series coming with new season.
  """
  is_upcoming: Boolean

  """
  Filter list with series coming with new season on TV.
  """
  renew_series_to_tv: Boolean
}

"""
Sorting criteria for series
"""
enum SeriesSorting {
  """
  No sort is applied.
  """
  NONE

  """
  Series sorted by title in alphabetical order.
  """
  ALPHABETICAL

  """
  Series sorted by title in alphabetical reversed order.
  """
  REVERSE_ALPHABETICAL

  """
  Series sorted by popularity on a weekly basis.
  """
  WEEKLY_POPULARITY

  """
  Series sorted by popularity on a monthly basis.
  """
  MONTHLY_POPULARITY

  """
  Series sorted by popularity on a three-monthly basis.
  """
  QUARTERLY_POPULARITY

  """
  Series sorted by user rating score
  """
  SCORE

  """
  Series sorted by their press rank, best best rating on series first.
  """
  PRESS

  """
  Series sorted by started date desc.
  """
  PREMIERE_ORIGINAL

  """
  Series sorted by their season's date coming to tv.
  """
  SEASON_PREMIERE

  """
  Series sorted by the trend (evolution of the rank of daily visit).
  """
  TREND

  """
  Series sorted by their VOD release dates, most recent releases first.
  """
  LATEST_RELEASES_VOD

  """
  Series sorted by their VOD release dates, oldest releases first.
  """
  OLDEST_RELEASES_VOD

  """
  Series sorted by their SVOD release dates, most recent releases first.
  """
  LATEST_RELEASES_SVOD

  """
  Series sorted by their SVOD release dates, oldest releases first.
  """
  OLDEST_RELEASES_SVOD
}

"""
releaseFrom and releaseTo filters date types.
"""
enum ReleaseDateFilterType {
  VOD

  VOD_FIRST_RELEASE
}

"""
Filter by last season (in progress or ended) starts/end dates
"""
input SeriesLastSeasonFilterType {
  """
  The date to start the range from (default: current date).
  """
  dateFrom: DateTime!

  """
  The amount of days after the season ending date to include in the result (default: 30 days).
  """
  range: Int = 30
}

input FacetsSoundtrackType {
  """
  The aggregation field name.
  """
  field: FacetFieldSoundtrackValue!

  """
  When provide will return the number count of facets.
  """
  first: Int

  """
  When provide will order aggregation keys.
  """
  order: [FacetSorting]
}

enum FacetFieldSoundtrackValue {
  DECADES

  YEAR
}

"""
A connection to a list of items.
"""
type soundtrackConnection {
  """
  Facets are ES aggregation. Represent the available filter in ES.
  """
  facets: [Facets]

  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [soundtrackEdge]
}

"""
An edge in a connection.
"""
type soundtrackEdge {
  """
  The item at the end of the edge.
  """
  node: Soundtrack

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
The different codes for a target of special operation.
"""
enum SpecialOperationTargetCode {
  THEATER_PAGE

  CAROUSEL_ITEM

  MOBILE_BOTTOM_BANNER

  NEWS

  OTHERTRAILERS

  PLAYERFOOTER

  PLAYERLIST

  POSTROLL

  MAINVIDEO

  SVOD_NEWS

  SVOD_ROLLER

  HOMEPAGE_NEWS_1

  HOMEPAGE_NEWS_2

  HOMEPAGE_NEWS_3

  HOMEPAGE_ROLLER_1

  HOMEPAGE_ROLLER_2

  HOMEPAGE_ROLLER_3

  COUNTDOWN
}

"""
Sorting criteria for news
"""
enum TagSorting {
  """
  Tag are sorted by reverse publication date.
  """
  LATEST_PUBLICATION

  """
  Tag are sorted by publication date.
  """
  OLDEST_PUBLICATION

  """
  Tag are sorted by weekly popularity
  """
  WEEKLY_POPULARITY

  """
  Tag are sorted by monthly popularity
  """
  MONTHLY_POPULARITY

  """
  Tag are sorted by yearly popularity
  """
  YEARLY_POPULARITY
}

"""
Related entities type on tag.
"""
enum TagRelatedType {
  """
  Filter tag by related entities type movie.
  """
  MOVIE

  """
  Filter tag by related entities type series.
  """
  SERIES

  """
  Filter tag by related entities type person.
  """
  PERSON
}

"""
A connection to a list of items.
"""
type TagConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [TagEdge]
}

"""
An edge in a connection.
"""
type TagEdge {
  """
  The item at the end of the edge.
  """
  node: Tag

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input FacetsTheaterShowtimeType {
  """
  The aggregation field name.
  """
  field: FacetFieldTheaterShowtimeValue!

  """
  When provide will return the number count of facets.
  """
  first: Int

  """
  When provide will order aggregation keys.
  """
  order: [FacetSorting]
}

enum FacetFieldTheaterShowtimeValue {
  PROJECTION

  EXPERIENCE

  COMFORT

  VERSION

  PICTURE

  SOUND

  SERVICE

  LOYALTY_CARDS

  BOOKING
}

input TheaterAffiliation {
  """
  The id of the company (Company:1234 in base64 encoded).
  """
  companyId: String!

  """
  The relation possible with the company
  """
  activity: TheaterCompanyActivity!
}

"""
Relation possible with a company.
"""
enum TheaterCompanyActivity {
  THEATER_AFFILIATE

  THEATER_CHAIN

  THEATER_ONLINE_TICKETING

  THEATER_POINT_OF_SALE

  THEATER_TRADE_GROUP
}

"""
A connection to a list of items.
"""
type theaterShowtimeByMovieListConnection {
  """
  Facets are ES aggregation. Represent the available filter in ES.
  """
  facets: [Facets]

  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [theaterShowtimeByMovieListEdge]
}

"""
An edge in a connection.
"""
type theaterShowtimeByMovieListEdge {
  """
  The item at the end of the edge.
  """
  node: TheaterShowtimeLeaf

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Will get a theater and showtimes aggregation by selected movie.
"""
type TheaterShowtimeLeaf {
  """
  The theaters where the movie is showing.
  """
  theater: Theater

  """
  The showtimes screened in the theater.
  """
  showtimes("Filters the showtime by diffusion version." version: [ShowtimeVersion]): [Showtime]
}

"""
Sorting criteria for theaters
"""
enum TheaterSorting {
  """
  Theaters sorted by name in alphabetical order.
  """
  ALPHABETICAL

  """
  Theaters sorted by name in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Sort theaters by screen count ascendant.
  """
  SCREEN_COUNT

  """
  Sort theaters by screen count descendant.
  """
  REVERSE_SCREEN_COUNT

  """
  Sort theater by daily stats desc.
  """
  DAILY_STATS

  """
  Sort theater by weekly stats desc.
  """
  WEEKLY_STATS

  """
  Sort theater by monthly stats desc.
  """
  MONTHLY_STATS

  """
  Sort theater by all time stats desc.
  """
  ALL_TIME_STATS

  """
  Sort with the closest in space first.
  """
  CLOSEST

  """
  Sort with the farthest in space first.
  """
  FARTHEST

  """
  Alias of FARTHEST.
  """
  FURTHEST
}

"""
Sorting criteria for companies.
"""
enum TheaterChainSorting {
  """
  No sort is applied.
  """
  NONE

  """
  Sorted by company name in alphabetical order.
  """
  ALPHABETICAL

  """
  Companies sorted by name in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Sort companies by theaters count attached ascendant.
  """
  THEATER_COUNT

  """
  Sort companies by theaters count attached descendant.
  """
  REVERSE_THEATER_COUNT
}

"""
A connection to a list of items.
"""
type companyConnection {
  totalCount: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [companyEdge]
}

"""
An edge in a connection.
"""
type companyEdge {
  """
  The item at the end of the edge.
  """
  node: Company

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Sorting criteria for videos
"""
enum VideoSorting {
  """
  Videos are sorted by added date desc.
  """
  LATEST

  """
  Videos are sorted by added date.
  """
  OLDEST

  """
  Videos sorted by title in alphabetical order.
  """
  ALPHABETICAL

  """
  Videos sorted by title in reverse alphabetical order.
  """
  REVERSE_ALPHABETICAL

  """
  Videos sorted by popularity on a monthly basis.
  """
  MONTHLY_POPULARITY

  """
  Videos sorted by popularity on a weekly basis.
  """
  WEEKLY_POPULARITY

  """
  Videos sorted by popularity on a daily J-1.
  """
  DAILY_POPULARITY

  """
  Videos sorted by the selection of cms.
  """
  CMS_RANK

  """
  Videos sorted by their rank.
  """
  RANK
}

"""
Some custom videos filters with complexs algorithms.
"""
enum VideoSpecialFilter {
  """
  Select the top videos which are the most viewed and whose the movie is coming on theaters.
  """
  TOP_VIDEOS

  """
  Select some video from movies or series that do have a SVOD release.
  """
  SVOD_RELEASED_ENTITIES
}

enum MovieRecommendationAlgo {
  MOVIE_RELEASE
}

"""
A connection to a list of items.
"""
type RecoMovieConnection {
  totalCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  edges: [RecoMovieEdge]
}

"""
An edge in a connection.
"""
type RecoMovieEdge {
  """
  The item at the end of the edge.
  """
  node: Movie

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
a deleted entity, and it's potential replacement entity
"""
type DeletedEntity {
  """
  the replacement entity.
  """
  replacedBy: Node

  """
  the date when the entity was deleted.
  """
  createdAt: DateTime
}

type ShowtimeWithParentsId implements Node {
  """
  The id of the showtime.
  """
  id: ID!

  """
  The internal id of the showtime.
  """
  internalId: BigInt

  """
  The start date of the showtime (the hour is about the theater).
  """
  startsAt: DateTime

  """
  The theater screens related to this showtime.
  """
  screen: TheaterScreen

  stringValue: String

  """
  The diffusion version.
  """
  diffusionVersion: ShowtimeVersion

  """
  The comforts available in showtime
  """
  comfort: [Comfort]

  """
  !!! WARNING - The data in this endpoint are sensible and not accurate. You should not use them as long as this warning is present !!! The services available in showtime
  """
  service: [TheaterService]

  """
  The experience of the showtime
  """
  experience: [Experience]

  """
  The projection of the showtime
  """
  projection: [Projection]

  """
  The picture of the showtime
  """
  picture: [Picture]

  """
  The language of the showtime
  """
  languages: [Language]

  """
  The diffusion sound of the showtime
  """
  sound: [Sound]

  """
  The delay between the indicated start date of the showtime and the actual beginning of the projection.
  """
  timeBeforeStart: DateInterval

  """
  Technical information about the showtime.
  """
  data: ShowtimeData

  """
  Technical information about the showtime.
  """
  tags("Filter the tags." filter: [TagsFilterType!]): [String!]!

  """
  True if showtime is preview.
  """
  isPreview: Boolean

  """
  True if showtime is link on movies that is not in theater in the two showtime week but have showtime in future.
  """
  isFutureReleaseSoon: Boolean

  """
  True if showtime is displayed in theater in the first outing week of movie.
  """
  isWeeklyMovieOuting: Boolean

  """
  Showtime accessibility features
  """
  accessibility: [Accessibility]

  """
  The projection format.
  """
  format: ProjectionFormat @deprecated(reason: "Use projection instead.")

  """
  The projection techno.
  """
  techno: [TechnoFlag] @deprecated(reason: "Use experience instead.")

  """
  The projection language.
  """
  version: Language @deprecated(reason: "This field is not longer used. Use diffusionVersion to have real version.")

  """
  The movies broadcasted in the theater.
  """
  movie: Movie

  """
  The theaters where the movie is showing.
  """
  theater: Theater
}

type Mutation {
  """
  To add a clicked social action (like Fan, SeenIt, WantToSee).
  """
  addUserSocialAction(input: UserSocialActionInput!): [MutationOutput!]!

  """
  To delete a clicked social action (like Fan, SeenIt, WantToSee).
  """
  deleteUserSocialAction(input: UserSocialActionInput!): [MutationOutput!]!

  """
  To add a rating/review.
  """
  addUserOpinion(input: UserOpinionInput!): MutationOutput!

  """
  To update a rating/review.
  """
  updateUserOpinion(input: UserOpinionInput!): MutationOutput!

  """
  To delete a rating/review.
  """
  deleteUserOpinion(input: DeleteUserOpinionInput!): MutationOutput!

  """
  To add a new friend to follow.
  """
  addUserFollowUser(input: UserFollowUserInput!): Follow!

  """
  To delete a new friend to follow.
  """
  deleteUserFollowUser(input: UserFollowUserInput!): Follow!

  """
  To add a theater to user theaters list.
  """
  addUserTheater(input: UserTheaterInput!): Theater

  """
  To delete a theater from user theaters list.
  """
  deleteUserTheater(input: UserTheaterInput!): Theater

  """
  To add a collection to/from user collections list.
  """
  addUserCollection(input: AddUserCollectionInput!): UserCollection

  """
  To update a collection to/from user collections list.
  """
  updateUserCollection(input: UpdateUserCollectionInput!): UserCollection

  """
  To delete a collection to/from user collections list.
  """
  deleteUserCollection(input: DeleteUserCollectionInput!): UserCollection

  """
  To add elements into a collection.
  """
  addUserCollectionEntities(input: UserCollectionEntitiesInput!): UserCollection

  """
  To delete elements from a collection.
  """
  deleteUserCollectionEntities(input: UserCollectionEntitiesInput!): UserCollection

  """
  To reorder user collection entities.
  """
  reorderUserCollectionEntities(input: UserCollectionReorderInput!): UserCollection

  """
  To follow a user collection.
  """
  followUserCollection(input: FollowCollectionInput!): UserCollection

  """
  To follow a user collection.
  """
  unfollowUserCollection(input: FollowCollectionInput!): UserCollection

  """
  To add/update/delete activities from a user sharing preferences.
  """
  sendPreferences(input: UserSharingPreferencesInput!): UserSharingPreferences
}

input UserSocialActionInput {
  """
  Array of GraphQL entity Id.
  """
  id_entity: [String!]!

  """
  Social action done by the user.
  """
  action: UserSocialClickType!
}

"""
Available types for social actions.
"""
enum UserSocialClickType {
  """
  The user clicks on Facebook like button.
  """
  FACEBOOKLIKE

  """
  The user clicks on Fan button.
  """
  FAN

  """
  The user find another social action (by another user) helpful.
  """
  HELPFUL

  """
  The user clicks on the "Not Interested" button.
  """
  NOTINTERESTED

  """
  The user clicks on the "Seen It" button.
  """
  SEENIT

  """
  The user reports a spoiler for running season.
  """
  SPOILERBLOCKED

  """
  The user find another social action (by another user) unhelpful.
  """
  UNHELPFUL

  """
  The user clicks on the "Want To See" button.
  """
  WANTTOSEE

  """
  The user clicks on the "Subscribe" button. (Follow series, movies ... )
  """
  SUBSCRIBE
}

type MutationOutput {
  """
  An entity on which the user interacted.
  """
  userEntityLeaf: UserEntityLeafInterface
}

input UserOpinionInput {
  """
  GraphQL entity Id.
  """
  id_entity: String!

  """
  The rating the user gave with this review.
  """
  rating: Float

  """
  The content of the review.
  """
  review: String
}

input DeleteUserOpinionInput {
  """
  GraphQL entity Id.
  """
  id_entity: String!
}

input UserFollowUserInput {
  """
  Internal or legacy id of the publisher.
  """
  id_publisher: String!

  """
  The id provider
  """
  provider: UserIdProvider = ID
}

enum UserIdProvider {
  ID

  LEGACY
}

"""
A follow action done by a user.
"""
type Follow implements SocialActionInterface {
  """
  The id of the social action.
  """
  id: ID!

  stringValue: String

  """
  The date this action was submitted at first.
  """
  createdAt: DateTime

  """
  The date this action was updated.
  """
  updatedAt: DateTime

  """
  !!!!! DEPRECATED !!!!! Use relatedEntity instead.
  """
  relatedUser: User @deprecated(reason: "Use relatedEntity instead.")

  """
  The related entity of the social action.
  """
  relatedEntity: Node
}

input UserTheaterInput {
  """
  theater Id.
  """
  id_theater: String!
}

input AddUserCollectionInput {
  """
  The collection name.
  """
  name: String!

  """
  The collection description.
  """
  description: String

  """
  The collection visibility.
  """
  public: Boolean = true

  """
  The array of entities graphQl ids to be added to the collection.
  """
  id_entities: [String!]
}

input UpdateUserCollectionInput {
  """
  The collection GraphQL id. Used to update or delete a collection.
  """
  id: String!

  """
  The collection name.
  """
  name: String

  """
  The collection description.
  """
  description: String

  """
  The collection visibility.
  """
  public: Boolean = true
}

input DeleteUserCollectionInput {
  """
  The collection GraphQL id. Used to update or delete a collection.
  """
  id: String!

  """
  The collection name.
  """
  name: String

  """
  The collection description.
  """
  description: String

  """
  The collection visibility.
  """
  public: Boolean = true
}

input UserCollectionEntitiesInput {
  """
  The collection id.
  """
  id_collection: String!

  """
  The array of entities graphQl ids.
  """
  id_entities: [String]
}

input UserCollectionReorderInput {
  """
  The collection id. Used to update or delete a collection.
  """
  id_collection: String!

  """
  The collection name.
  """
  entities: [UserCollectionEntityPosition]
}

input UserCollectionEntityPosition {
  """
  the entity id.
  """
  id: String

  """
  The position of the entity (the id above).
  """
  position: Int
}

input FollowCollectionInput {
  """
  The collection id.
  """
  id_collection: String!
}

input UserSharingPreferencesInput {
  """
  Array of activities ENUM to be shared by the user.
  """
  activities: [UserSharedActivityType]
}

type CountryFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The country which type match.
  """
  country: Country
}

type GenreFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The genre which type match.
  """
  genre: GenreType
}

type GenreType {
  """
  The genre id.
  """
  id: Int

  """
  The genre name.
  """
  name: String
}

type TypeFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The type which type match.
  """
  type: CustomType
}

type CustomType {
  """
  The type id.
  """
  id: Int

  """
  The type name.
  """
  name: String
}

type GenericFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!
}

type ExperienceFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The experience which type match.
  """
  translation: genericTagFacetType
}

type genericTagFacetType {
  """
  The type's tag.
  """
  tag: String

  """
  The type's name.
  """
  name: String
}

type ProjectionFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The experience which type match.
  """
  translation: genericTagFacetType
}

type ComfortFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The experience which type match.
  """
  translation: genericTagFacetType
}

type PictureFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The experience which type match.
  """
  translation: genericTagFacetType
}

type SoundFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The experience which type match.
  """
  translation: genericTagFacetType
}

type LoyaltyCardFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The experience which type match.
  """
  translation: genericTagFacetType
}

type VersionFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The experience which type match.
  """
  version: ShowtimeVersion
}

type ServiceFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The experience which type match.
  """
  translation: genericTagFacetType
}

type BookingFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The booking value as boolean.
  """
  booking: Boolean
}

type AgeFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The age which type match.
  """
  age: Tag
}

type ThemeFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The age which type match.
  """
  theme: Tag
}

type ThemeTagFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  The theme Tag3D which type match.
  """
  theme_tag: CustomType
}

type PhysicalProductFacet implements FacetValue {
  """
  The aggregation value name.
  """
  key: String!

  """
  The aggregation value count.
  """
  doc_count: Int!

  """
  Physical product which type match. That facet type cannot be ordered.
  """
  product: PhysicalProductFacetType
}

type PhysicalProductFacetType {
  """
  The physical product genre name.
  """
  name: String
}

schema {
  query: Query
  mutation: Mutation
}
